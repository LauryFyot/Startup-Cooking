<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwoLayeredGUI</name>
    </assembly>
    <members>
        <member name="T:TwoLayeredGUI.AccessString">
            <summary>
            A class that stores a string combined with some extended accessibility information.
            </summary>
            <remarks>
            <para>This class stores a string along with some accessibility information such as a mnemonic.
              Instances of this class are immutable.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.AccessString.#ctor">
            <summary>
            Initializes a new instance with a text of length zero.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.AccessString.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="text">The text.</param>
            <remarks>
            <para>If <see langword="null"/> is passed as a value for the <paramref name="text"/> argument, the <see cref="P:TwoLayeredGUI.AccessString.Text"/> property will be set to an empty string.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.AccessString.#ctor(System.String,System.Char)">
            <summary>
            Initializes a new instance with a mnemonic.
            </summary>
            <param name="text">The text.</param>
            <param name="mnemonic">The mnemonic.</param>
            <exception cref="T:System.ArgumentException"><paramref name="text"/> does not contain <paramref name="mnemonic"/>.</exception>
            <remarks>
            <para>If <see langword="null"/> is passed as a value for the <paramref name="text"/> argument, the <see cref="P:TwoLayeredGUI.AccessString.Text"/> property will be set to an empty string.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.AccessString.text">
            <summary>
            The text.
            </summary>
            <seealso cref="P:TwoLayeredGUI.AccessString.Text"/>
        </member>
        <member name="F:TwoLayeredGUI.AccessString.mnemonic">
            <summary>
            The mnemonic.
            </summary>
            <seealso cref="P:TwoLayeredGUI.AccessString.Mnemonic"/>
            <seealso cref="P:TwoLayeredGUI.AccessString.MnemonicIndex"/>
            <seealso cref="P:TwoLayeredGUI.AccessString.HasMnemonic"/>
        </member>
        <member name="M:TwoLayeredGUI.AccessString.ToString">
            <summary>
            Returns a string representation of the text.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:TwoLayeredGUI.AccessString.Equals(TwoLayeredGUI.AccessString)">
            <summary>
            Checks whether this instance is equal to another <see cref="T:TwoLayeredGUI.AccessString"/> instance.
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value that indicates if the values are equal.</returns>
        </member>
        <member name="M:TwoLayeredGUI.AccessString.op_Explicit(TwoLayeredGUI.AccessString)~System.String">
            <summary>
            Converts an <see cref="T:TwoLayeredGUI.AccessString"/> value to a <see cref="T:System.String"/>.
            </summary>
            <param name="str">The original value.</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="str"/>, or <see langword="null"/> if <paramref name="str"/> was <see langword="null"/>.</returns>
        </member>
        <member name="P:TwoLayeredGUI.AccessString.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.AccessString.Mnemonic">
            <summary>
            The mnemonic for the string.
            </summary>
            <exception cref="T:System.InvalidOperationException">This string does not provide a mnemonic.</exception>
            <seealso cref="P:TwoLayeredGUI.AccessString.MnemonicIndex"/>
            <seealso cref="P:TwoLayeredGUI.AccessString.HasMnemonic"/>
        </member>
        <member name="P:TwoLayeredGUI.AccessString.MnemonicIndex">
            <summary>
            The index of the mnemonic in the string.
            </summary>
            <exception cref="T:System.InvalidOperationException">This string does not provide a mnemonic.</exception>
            <seealso cref="P:TwoLayeredGUI.AccessString.Mnemonic"/>
            <seealso cref="P:TwoLayeredGUI.AccessString.HasMnemonic"/>
        </member>
        <member name="P:TwoLayeredGUI.AccessString.HasMnemonic">
            <summary>
            Indicates whether a mnemonic is stored for this string.
            </summary>
            <seealso cref="P:TwoLayeredGUI.AccessString.Mnemonic"/>
            <seealso cref="P:TwoLayeredGUI.AccessString.MnemonicIndex"/>
        </member>
        <member name="T:TwoLayeredGUI.ArrayAccessor`1">
            <summary>
            Wraps an <see cref="T:TwoLayeredGUI.IArray`1"/> around an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The list item type.</typeparam>
        </member>
        <member name="T:TwoLayeredGUI.IArray`1">
            <summary>
            Provides access to a fixed-size list.
            </summary>
            <typeparam name="T">The item type of the list.</typeparam>
            <seealso cref="T:TwoLayeredGUI.IImmutableArray`1"/>
        </member>
        <member name="T:TwoLayeredGUI.IImmutableArray`1">
            <summary>
            Provides read-only access to a fixed-size list.
            </summary>
            <typeparam name="T">The item type of the list.</typeparam>
            <seealso cref="T:TwoLayeredGUI.IArray`1"/>
        </member>
        <member name="P:TwoLayeredGUI.IImmutableArray`1.Item(System.Int32)">
            <summary>
            Gets a value at a specified position in the list.
            </summary>
            <param name="index">The position of the value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.IImmutableArray`1.Count">
            <summary>
            Returns the number of elements in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.IArray`1.Item(System.Int32)">
            <summary>
            Gets or sets a value at a specified position in the list.
            </summary>
            <param name="index">The position of the value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ArrayAccessor`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance based on a list.
            </summary>
            <param name="list">The list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ArrayAccessor`1.list">
            <summary>
            The list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ArrayAccessor`1.GetEnumerator">
            <summary>
            Returns an enumeration over all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ArrayAccessor`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumeration over all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ArrayAccessor`1.Item(System.Int32)">
            <summary>
            Gets or sets a value at a specified position in the list.
            </summary>
            <param name="index">The position of the value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ArrayAccessor`1.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ArrayAccessor`1.Count">
            <summary>
            Returns the number of elements in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ButtonDef">
            <summary>
            An abstract definition of a button.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ButtonDef.#ctor(TwoLayeredGUI.AccessString)">
            <summary>
            Initializes a new instance with a specified caption.
            </summary>
            <param name="text">The caption of the button.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ButtonDef.#ctor(TwoLayeredGUI.AccessString,System.String)">
            <summary>
            Initializes a new instance with a specified caption and tooltip.
            </summary>
            <param name="text">The caption of the button.</param>
            <param name="toolTip">The tooltip.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ButtonDef.#ctor(TwoLayeredGUI.AccessString,TwoLayeredGUI.DefaultButtonKind)">
            <summary>
            Initializes a new instance with a specified caption and pre-defined button type.
            </summary>
            <param name="text">The caption of the button.</param>
            <param name="kind">The button type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="kind"/> is not a valid button type.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ButtonDef.#ctor(TwoLayeredGUI.AccessString,System.String,TwoLayeredGUI.DefaultButtonKind)">
            <summary>
            Initializes a new instance with a specified caption, tooltip and pre-defined button type.
            </summary>
            <param name="text">The caption of the button.</param>
            <param name="toolTip">The tooltip.</param>
            <param name="kind">The button type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="kind"/> is not a valid button type.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ButtonDef.#ctor(TwoLayeredGUI.DefaultButtonKind)">
            <summary>
            Initializes a new instance based on a pre-defined button type.
            </summary>
            <param name="kind">The button type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">There is no default button definition for <paramref name="kind"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ButtonDef.#ctor(TwoLayeredGUI.ButtonDef)">
            <summary>
            Initializes a new instance that copies its initial settings from another <see cref="T:TwoLayeredGUI.ButtonDef"/> instance.
            </summary>
            <param name="other">The other instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.text">
            <summary>
            The button caption.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.Text"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.toolTip">
            <summary>
            The button tooltip.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.ToolTip"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.isCloseButton">
            <summary>
            Indicates whether the button closes the parent form.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.IsCloseButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.requiresValidInput">
            <summary>
            Indicates whether the button can only be pressed when the input in the current window is valid.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.RequiresValidInput"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.icon">
            <summary>
            The icon displayed on the button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.Icon"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.group">
            <summary>
            Stores a group index for grouping the button with other buttons.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.Group"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.kind">
            <summary>
            The button kind.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.Kind"/>
        </member>
        <member name="M:TwoLayeredGUI.ButtonDef.CreateClone">
            <summary>
            Creates a new instance of the current type that is used for the <see cref="M:TwoLayeredGUI.ButtonDef.Clone"/> operation.
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>The default implementation creates a new instance using the default contructor of the class.
              Override this method where this is not acceptable.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ButtonDef.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The copied object.</returns>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.okButton">
            <summary>
            The OK button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.OkButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.cancelButton">
            <summary>
            The Cancel button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.CancelButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.closeButton">
            <summary>
            The Close button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.CloseButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.applyButton">
            <summary>
            The Apply button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.ApplyButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.helpButton">
            <summary>
            The Help button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.HelpButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.abortButton">
            <summary>
            The Abort button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.AbortButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.retryButton">
            <summary>
            The Retry button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.RetryButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.ignoreButton">
            <summary>
            The Ignore button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.IgnoreButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.yesButton">
            <summary>
            The Yes button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.YesButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.yesToAllButton">
            <summary>
            The YesToAll button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.YesToAllButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.noButton">
            <summary>
            The No button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.NoButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.noToAllButton">
            <summary>
            The NoToAll button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.NoToAllButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.saveButton">
            <summary>
            The Save button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.SaveButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.discardButton">
            <summary>
            The Discard button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.DiscardButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.resetButton">
            <summary>
            The Reset button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.ResetButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.nextButton">
            <summary>
            The Next button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.NextButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.previousButton">
            <summary>
            The Previous button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.PreviousButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.finishButton">
            <summary>
            The Finish button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.FinishButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.showDetailsButton">
            <summary>
            The Show Details button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.ShowDetailsButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.hideDetailsButton">
            <summary>
            The Hide Details button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.HideDetailsButton"/>
        </member>
        <member name="F:TwoLayeredGUI.ButtonDef.defaultButtonDefs">
            <summary>
            Maps <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> values to the default button definitions.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ButtonDef.GetDefaultButton(TwoLayeredGUI.DefaultButtonKind)">
            <summary>
            Retrieves a default button definition by its kind.
            </summary>
            <param name="kind">The button kind.</param>
            <returns>The default button definition.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">There is no default button definition for <paramref name="kind"/>.</exception>
            <seealso cref="T:TwoLayeredGUI.DefaultButtonKind"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.Text">
            <summary>
            The button caption.
            </summary>
            <exception cref="T:System.ArgumentNullException"><see langword="null"/> is assigned.</exception>
            <value>
            <para>This property defines what text will be displayed on the button.
              If <see cref="P:TwoLayeredGUI.ButtonDef.ToolTip"/> is <see langword="null"/>, the value of this property will be used as the tooltip text, too.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.ToolTip"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.ToolTip">
            <summary>
            The button tooltip.
            </summary>
            <value>
            <para>The tooltip of the button.
              If this property is <see langword="null"/>, the value of the <see cref="P:TwoLayeredGUI.ButtonDef.Text"/> property will be used instead.
              However, this property can be set to an empty string in order to suppress any tooltip text.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ButtonDef.Text"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.IsCloseButton">
            <summary>
            Indicates whether the button closes the parent form.
            </summary>
            <value>
            <para>If this property is <see langword="true"/>, clicking the button will automatically close the parent form (after executing the button's click event handler).</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.RequiresValidInput">
            <summary>
            Indicates whether the button can only be pressed when the input in the current window is valid.
            </summary>
            <value>
            <para>This property controls whether the button is enabled only when the input in the current window is valid.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.Icon">
            <summary>
            The icon displayed on the button.
            </summary>
            <value>
            <para>Gets or sets an object that provides access to the icon to display on the button.
              If set to <see langword="null"/>, no icon will be displayed.
              The default value is <see langword="null"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.Group">
            <summary>
            Stores a group index for grouping the button with other buttons.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.Kind">
            <summary>
            The button kind.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">An invalid value is assigned.</exception>
            <value>
            <para>This property specifies the kind of the button.
              It is only meaningful for default buttons.
              For any custom buttons, the property value should be set to <see cref="F:TwoLayeredGUI.DefaultButtonKind.Unknown"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.OkButton">
            <summary>
            The OK button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Ok"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.CancelButton">
            <summary>
            The Cancel button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Cancel"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.CloseButton">
            <summary>
            The Close button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.ApplyButton">
            <summary>
            The Apply button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Apply"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.HelpButton">
            <summary>
            The Help button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Help"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.AbortButton">
            <summary>
            The Abort button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Abort"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.RetryButton">
            <summary>
            The Retry button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Retry"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.IgnoreButton">
            <summary>
            The Ignore button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Ignore"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.YesButton">
            <summary>
            The Yes button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Yes"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.YesToAllButton">
            <summary>
            The YesToAll button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.YesToAll"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.NoButton">
            <summary>
            The No button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.No"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.NoToAllButton">
            <summary>
            The NoToAll button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.NoToAll"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.SaveButton">
            <summary>
            The Save button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Save"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.DiscardButton">
            <summary>
            The Discard button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Discard"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.ResetButton">
            <summary>
            The Reset button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Reset"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.NextButton">
            <summary>
            The Next button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Next"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.PreviousButton">
            <summary>
            The Previous button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Previous"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.FinishButton">
            <summary>
            The Finish button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.Finish"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.ShowDetailsButton">
            <summary>
            The Show Details button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.ShowDetails"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.HideDetailsButton">
            <summary>
            The Hide Details button.
            </summary>
            <seealso cref="F:TwoLayeredGUI.DefaultButtonKind.HideDetails"/>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.OkCancelButtons">
            <summary>
            Returns an array that contains the objects <see cref="P:TwoLayeredGUI.ButtonDef.OkButton"/> and <see cref="P:TwoLayeredGUI.ButtonDef.CancelButton"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.AbortRetryIgnoreButtons">
            <summary>
            Returns an array that contains the objects <see cref="P:TwoLayeredGUI.ButtonDef.AbortButton"/>, <see cref="P:TwoLayeredGUI.ButtonDef.RetryButton"/> and <see cref="P:TwoLayeredGUI.ButtonDef.IgnoreButton"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.YesNoButtons">
            <summary>
            Returns an array that contains the objects <see cref="P:TwoLayeredGUI.ButtonDef.YesButton"/> and <see cref="P:TwoLayeredGUI.ButtonDef.NoButton"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.YesNoCancelButtons">
            <summary>
            Returns an array that contains the objects <see cref="P:TwoLayeredGUI.ButtonDef.YesButton"/>, <see cref="P:TwoLayeredGUI.ButtonDef.NoButton"/> and <see cref="P:TwoLayeredGUI.ButtonDef.CancelButton"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.YesNoToAllButtons">
            <summary>
            Returns an array that contains the objects <see cref="P:TwoLayeredGUI.ButtonDef.YesButton"/>, <see cref="P:TwoLayeredGUI.ButtonDef.YesToAllButton"/>, <see cref="P:TwoLayeredGUI.ButtonDef.NoButton"/> and <see cref="P:TwoLayeredGUI.ButtonDef.NoToAllButton"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.YesNoToAllAndCancelButtons">
            <summary>
            Returns an array that contains the objects <see cref="P:TwoLayeredGUI.ButtonDef.YesButton"/>, <see cref="P:TwoLayeredGUI.ButtonDef.YesToAllButton"/>, <see cref="P:TwoLayeredGUI.ButtonDef.NoButton"/>, <see cref="P:TwoLayeredGUI.ButtonDef.NoToAllButton"/> and <see cref="P:TwoLayeredGUI.ButtonDef.CancelButton"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.SaveDiscardCancelButtons">
            <summary>
            Returns an array that contains the objects <see cref="P:TwoLayeredGUI.ButtonDef.SaveButton"/>, <see cref="P:TwoLayeredGUI.ButtonDef.DiscardButton"/> and <see cref="P:TwoLayeredGUI.ButtonDef.CancelButton"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.OkApplyCancelButtons">
            <summary>
            Returns an array that contains the objects <see cref="P:TwoLayeredGUI.ButtonDef.OkButton"/>, <see cref="P:TwoLayeredGUI.ButtonDef.ApplyButton"/> and <see cref="P:TwoLayeredGUI.ButtonDef.CancelButton"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ButtonDef.DefaultButtons">
            <summary>
            Returns an enumeration with all default button definitions.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.CastingArrayAccessor`2">
            <summary>
            This class implements the <see cref="T:TwoLayeredGUI.IArray`1"/> interface and casts values to another type.
            </summary>
            <typeparam name="TSource">The element type of the source <see cref="T:TwoLayeredGUI.IArray`1"/>.</typeparam>
            <typeparam name="TDest">The element type of this array accessor.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.CastingArrayAccessor`2.#ctor(TwoLayeredGUI.IArray{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="source">The data source.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.CastingArrayAccessor`2.source">
            <summary>
            The data source.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.CastingArrayAccessor`2.GetEnumerator">
            <summary>
            Returns an enumerator over all values.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CastingArrayAccessor`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over all values.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.CastingArrayAccessor`2.Item(System.Int32)">
            <summary>
            Gets or sets a value at a specified position in the list.
            </summary>
            <param name="index">The position of the value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.CastingArrayAccessor`2.Count">
            <summary>
            Returns the number of elements in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.CastingImmutableArrayAccessor`2">
            <summary>
            A wrapper around a list that casts the elements into a different type and that implements the <see cref="T:TwoLayeredGUI.IImmutableArray`1"/> interface.
            </summary>
            <typeparam name="TSource">The element type of the source list.</typeparam>
            <typeparam name="TDest">The element type returned from the wrapper.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.CastingImmutableArrayAccessor`2.#ctor(TwoLayeredGUI.IImmutableArray{`0})">
            <summary>
            Initializes a new instance based on an <see cref="T:TwoLayeredGUI.IImmutableArray`1"/> instance.
            </summary>
            <param name="source">The wrapped list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CastingImmutableArrayAccessor`2.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance based on an <see cref="T:System.Collections.Generic.IList`1"/> instance.
            </summary>
            <param name="source">The wrapped list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.CastingImmutableArrayAccessor`2.source">
            <summary>
            The wrapped list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.CastingImmutableArrayAccessor`2.GetEnumerator">
            <summary>
            Returns an enumerator over all elements of the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CastingImmutableArrayAccessor`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over all elements of the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.CastingImmutableArrayAccessor`2.Count">
            <summary>
            Returns the number of elements in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.CastingImmutableArrayAccessor`2.Item(System.Int32)">
            <summary>
            Gets the element at a given position.
            </summary>
            <param name="index">The position of the element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside of the allowable bounds of the list.</exception>
            <value>
            <para>Provides access to a particular element in the wrapped list.
              For any items from the source list that cannot be converted to <typeparamref name="TDest"/>, the default value of <typeparamref name="TDest"/> will be returned instead.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.CommonUtilities">
            <summary>
            This class provides general utilities for various classes.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.CloneTyped``1(``0)">
            <summary>
            Clones an arbitrary object and returns the strongly-typed clone.
            </summary>
            <typeparam name="T">The type of the original object as well as the clone.</typeparam>
            <param name="obj">The original object.</param>
            <returns>A clone of the object, as defined by <see cref="M:System.ICloneable.Clone"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="M:System.ICloneable.Clone"/> method of <paramref name="obj"/> returns <see langword="null"/> or a type that is not compatible with <typeparamref name="T"/>.</exception>
            <remarks>
            <para>This method can be used as an extension method and serves as a replacement for <see cref="M:System.ICloneable.Clone"/> where the resulting object must be cast back to the type of the original right away.
              Note that the <see cref="M:System.ICloneable.Clone"/> method of <paramref name="obj"/> must return an object that is assignable to <typeparamref name="T"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all items from an enumeration to a collection.
            </summary>
            <typeparam name="T">The item type of the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The enumeration of items.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},``0,``0[])">
            <summary>
            Adds several items to a collection.
            </summary>
            <typeparam name="T">The item type of the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="firstItem">The first item to add.</param>
            <param name="moreItems">More items to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="moreItems"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.CopyToAs``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1},``1[],System.Int32)">
            <summary>
            Copies the transformed elements of a collection to an array, starting at a particular array index.
            </summary>
            <param name="collection">The collection.</param>
            <param name="transformationFunc">The function used to transform the items.</param>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <typeparam name="TSource">The item type of the collection.</typeparam>
            <typeparam name="TResult">The item type of the destination array.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>, <paramref name="transformationFunc"/> or <paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><typeparamref name="TResult"/> cannot be cast to the item type of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Indicates whether an enumeration is empty.
            </summary>
            <param name="collection">The enumeration.</param>
            <returns>A value that indicates whether <paramref name="collection"/> is empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.ToArrayAccessor``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns an <see cref="T:TwoLayeredGUI.IArray`1"/> wrapper for an <see cref="T:System.Collections.Generic.IList`1"/> object.
            </summary>
            <typeparam name="T">The item type of the list.</typeparam>
            <param name="list">The list.</param>
            <returns>The wrapper.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.CheckedCast``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Exception,``1})">
            <summary>
            Converts the elements of an enumeration to another type.
            </summary>
            <typeparam name="TSource">The element type of the original enumeration.</typeparam>
            <typeparam name="TResult">The element type of the resulting enumeration.</typeparam>
            <param name="source">The original enumeration.</param>
            <param name="fallbackCastingFunc">This function is invoked when the cast fails.
              It may, for example, return a default value or throw an exception.
              The original item as well as the exception that was thrown during the conversion attempt are supplied as arguments.</param>
            <returns>An enumeration with the new element type.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.ToBitArray(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Converts an enumeration of <see cref="T:System.Boolean"/> values to a <see cref="T:System.Collections.BitArray"/>.
            </summary>
            <param name="source">The source enumeration.</param>
            <returns>The <see cref="T:System.Collections.BitArray"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.IsValidIndex(System.Collections.IList,System.Int32)">
            <summary>
            Checks whether a given <see cref="T:System.Int32"/> value is a valid index in the range of an <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="list">The list.</param>
            <param name="index">The index to check.</param>
            <returns>A value that indicates whether <paramref name="index"/> is a valid index in <paramref name="list"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.IncludesProperty(System.ComponentModel.PropertyChangingEventArgs,System.String)">
            <summary>
            Checks whether a given <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> refers to the given property.
            </summary>
            <param name="eventArgs">The event information object.</param>
            <param name="propertyName">The property name to check for.</param>
            <returns>A value that indicates whether <paramref name="eventArgs"/> includes the property whose name is passed in the <paramref name="propertyName"/> argument.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventArgs"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.IncludesProperty(System.ComponentModel.PropertyChangedEventArgs,System.String)">
            <summary>
            Checks whether a given <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> refers to the given property.
            </summary>
            <param name="eventArgs">The event information object.</param>
            <param name="propertyName">The property name to check for.</param>
            <returns>A value that indicates whether <paramref name="eventArgs"/> includes the property whose name is passed in the <paramref name="propertyName"/> argument.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventArgs"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CommonUtilities.DisposeIfRequired(System.Object)">
            <summary>
            Disposes of an object if it is disposable.
            </summary>
            <param name="value">The object.</param>
        </member>
        <member name="T:TwoLayeredGUI.Container`1">
            <summary>
            Stores a value of another type.
            </summary>
            <typeparam name="T">The type of the stored value.</typeparam>
            <remarks>
            <para>This class stores a value of another type <typeparamref name="T"/>.
              It can be used as a base class for types that need to contain one value.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Container`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Container`1.#ctor(`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="value">The initial value to store in the instance.</param>
        </member>
        <member name="F:TwoLayeredGUI.Container`1.storedValue">
            <summary>
            The value stored in the instance.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Container`1.Value"/>
        </member>
        <member name="F:TwoLayeredGUI.Container`1.isValueSet">
            <summary>
            A value that indicates whether anything has been assigned to <see cref="P:TwoLayeredGUI.Container`1.Value"/>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Container`1.IsValueSet"/>
        </member>
        <member name="P:TwoLayeredGUI.Container`1.Value">
            <summary>
            The value stored in the instance.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Container`1.IsValueSet"/>
        </member>
        <member name="P:TwoLayeredGUI.Container`1.IsValueSet">
            <summary>
            A value that indicates whether anything has been assigned to <see cref="P:TwoLayeredGUI.Container`1.Value"/>.
            </summary>
            <value>
            <para>This value indicates whether anything has been assigned to the <see cref="P:TwoLayeredGUI.Container`1.Value"/> property.
              A value of <see langword="true"/> does not mean that <see cref="P:TwoLayeredGUI.Container`1.Value"/> is not <see langword="null"/>; it just indicates that any value (including <see langword="null"/>) has been assigned to the <see cref="P:TwoLayeredGUI.Container`1.Value"/> property at any point.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Container`1.Value"/>
        </member>
        <member name="T:TwoLayeredGUI.ControlButtonLayout">
            <summary>
            Indicates how the control buttons are placed in a form.
            </summary>
            <remarks>
            <para>The control buttons of a form are buttons that are related to the whole form.
              They control its behavior by closing it, saving or resetting its settings or showing a help text for the whole form.</para>
            <para>It is wise to define an application-wide standard on how these buttons should be placed.
              The values of this enumeration type can specify such a standard setting.</para>
            <para>For mirrored interfaces with a right-to-left reading direction, the meanings of these enumeration constants are mirrored likewise.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.ControlButtonLayout.BottomRight">
            <summary>
            The buttons are placed along the bottom side of the form, ragged to the right corner.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ControlButtonLayout.BottomCenter">
            <summary>
            The buttons are placed along the bottom side of the form, horizontally centered.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ControlButtonLayout.RightSide">
            <summary>
            The buttons are placed vertically at the right side of the form.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.CreatingListBase`1">
            <summary>
            A basic default implementation of the <see cref="T:TwoLayeredGUI.ICreatingList`1"/> interface.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
            <remarks>
            <para>This class is a default implementation of the <see cref="T:TwoLayeredGUI.ICreatingList`1"/> interface.
              It serves as a base class for implementations of the interface.
              Implementations need to override the <see cref="M:TwoLayeredGUI.CreatingListBase`1.CreateItem(System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.ICreatingList`1">
            <summary>
            An interface for lists that create their own items.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
            <seealso cref="T:TwoLayeredGUI.IParametrizedCreatingList`2"/>
        </member>
        <member name="M:TwoLayeredGUI.ICreatingList`1.Add">
            <summary>
            Appends a new item at the end of the list.
            </summary>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ICreatingList`1.Insert(System.Int32)">
            <summary>
            Inserts a new item at the given position in the list.
            </summary>
            <param name="index">The position of the new item.</param>
            <returns>The newly created item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ICreatingList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether <paramref name="item"/> was deleted.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ICreatingList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position from the list.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ICreatingList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ICreatingList`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from a position to another position in the list.
            </summary>
            <param name="oldIndex">The old index of the item.</param>
            <param name="newIndex">The new index of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> or <paramref name="newIndex"/> are not within the allowable boundaries for indices in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ICreatingList`1.Contains(`0)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether the list contains <paramref name="item"/>.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ICreatingList`1.IndexOf(`0)">
            <summary>
            Determines the position of a given item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The zero-based index of <paramref name="item"/>, or a negative value if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="F:TwoLayeredGUI.CreatingListBase`1.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts a created item into the list.
            </summary>
            <param name="index">The position at which the item should be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.CreateItem(System.Int32)">
            <summary>
            Creates a new item for the list.
            </summary>
            <param name="destinationIndex">The position at which the item will initially be inserted.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.Add">
            <summary>
            Appends a new item at the end of the list.
            </summary>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.Insert(System.Int32)">
            <summary>
            Inserts a new item at the given position in the list.
            </summary>
            <param name="index">The position of the new item.</param>
            <returns>The newly created item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.CreatingListBase`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether <paramref name="item"/> was deleted.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position from the list.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from a position to another position in the list.
            </summary>
            <param name="oldIndex">The old index of the item.</param>
            <param name="newIndex">The new index of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> or <paramref name="newIndex"/> are not within the allowable boundaries for indices in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.Contains(`0)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether the list contains <paramref name="item"/>.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CreatingListBase`1.IndexOf(`0)">
            <summary>
            Determines the position of a given item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The zero-based index of <paramref name="item"/>, or a negative value if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="P:TwoLayeredGUI.CreatingListBase`1.Item(System.Int32)">
            <summary>
            Gets an item at a specific position in the list.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside of the allowable index range.</exception>
        </member>
        <member name="P:TwoLayeredGUI.CreatingListBase`1.Count">
            <summary>
            Returns the total number of items in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.CreatingNotifyingListBase`1">
            <summary>
            A basic implementation of the <see cref="T:TwoLayeredGUI.ICreatingList`1"/> interface that invokes virtual methods upon any changes to the list.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
            <remarks>
            <para>This class is a default implementation of the <see cref="T:TwoLayeredGUI.ICreatingList`1"/> interface.
              It serves as a base class for implementations of the interface.
              Implementations need to override the <see cref="M:TwoLayeredGUI.CreatingListBase`1.CreateItem(System.Int32)"/> method.
              Moreover, implementations may override the <see cref="M:TwoLayeredGUI.CreatingNotifyingListBase`1.ItemAdded(System.Int32,`0)"/>, <see cref="M:TwoLayeredGUI.CreatingNotifyingListBase`1.ItemRemoved(System.Int32,`0)"/>, and the <see cref="M:TwoLayeredGUI.CreatingNotifyingListBase`1.ItemMoved(System.Int32,System.Int32,`0)"/> methods to process any modifications to the list.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.CreatingNotifyingListBase`1.Add">
            <summary>
            Appends a new item at the end of the list.
            </summary>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CreatingNotifyingListBase`1.Insert(System.Int32)">
            <summary>
            Inserts a new item at the given position in the list.
            </summary>
            <param name="index">The position of the new item.</param>
            <returns>The newly created item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.CreatingListBase`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CreatingNotifyingListBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether <paramref name="item"/> was deleted.</returns>
        </member>
        <member name="M:TwoLayeredGUI.CreatingNotifyingListBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position from the list.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CreatingNotifyingListBase`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from a position to another position in the list.
            </summary>
            <param name="oldIndex">The old index of the item.</param>
            <param name="newIndex">The new index of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> or <paramref name="newIndex"/> are not within the allowable boundaries for indices in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CreatingNotifyingListBase`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.CreatingNotifyingListBase`1.ItemAdded(System.Int32,`0)">
            <summary>
            This method is invoked when an item has been inserted.
            </summary>
            <param name="index">The position of the new item.</param>
            <param name="item">The newly inserted item.</param>
        </member>
        <member name="M:TwoLayeredGUI.CreatingNotifyingListBase`1.ItemRemoved(System.Int32,`0)">
            <summary>
            This method is invoked when an item has been removed.
            </summary>
            <param name="index">The previous position of the removed item.</param>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:TwoLayeredGUI.CreatingNotifyingListBase`1.ItemMoved(System.Int32,System.Int32,`0)">
            <summary>
            This method is invoked when an item has been moved in the list.
            </summary>
            <param name="oldIndex">The old index of the item.</param>
            <param name="newIndex">The new index of the item.</param>
            <param name="item">The moved item.</param>
        </member>
        <member name="T:TwoLayeredGUI.Debug.GeneralDebugUtilities">
            <summary>
            Provides some general debugging utilities.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Debug.GeneralDebugUtilities.GetFullGenericTypeName(System.Type)">
            <summary>
            Returns the full name of a type, including any generic arguments and their respective generic arguments, if any.
            </summary>
            <param name="type">The type.</param>
            <returns>The type name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method is equivalent to a call to <see cref="M:TwoLayeredGUI.Debug.GeneralDebugUtilities.GetFullGenericTypeName(System.Type,System.Boolean)"/> with the second argument set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Debug.GeneralDebugUtilities.GetFullGenericTypeName(System.Type,System.Boolean)">
            <summary>
            Returns the full name of a type, including any generic arguments, and allows control over whether generic arguments of generic arguments should be output as well.
            </summary>
            <param name="type">The type.</param>
            <param name="recursive">Indicates whether generic arguments of generic arguments are to be output as well.</param>
            <returns>The type name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.Debug.WizardGuiFactoryDebugUtilities">
            <summary>
            This class provides some debugging utilities connected to wizard GUI factories.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Debug.WizardGuiFactoryDebugUtilities.GetStoredTypes``1(TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory{``0},System.Int32)">
            <summary>
            Returns a string that contains all types names registered with a <see cref="T:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1"/>.
            </summary>
            <param name="factoryDirectory">The GUI factory directory.</param>
            <param name="indentationDepth">The depth of one indentation level.</param>
            <returns>The debug string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="factoryDirectory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="indentationDepth"/> is less than zero, or the resulting string exceeds the maximum capacity.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Debug.WizardGuiFactoryDebugUtilities.GetStoredTypes``1(TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory{``0})">
            <summary>
            Returns a string that contains all types names registered with a <see cref="T:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1"/> and uses a default indentation depth.
            </summary>
            <param name="factoryDirectory">The GUI factory directory.</param>
            <returns>The debug string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="factoryDirectory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.Debug.NamespaceDoc">
            <summary>
            This namespaces provides some utilities for debugging applications that employ the Two-Layered GUI Toolkit.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.DefaultButtonKind">
            <summary>
            Provides an ordinal value for each default button kind.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Unknown">
            <summary>
            Not a known default button.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Ok">
            <summary>
            The OK button.
              Saves and applies any changes and leaves the current interface.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Cancel">
            <summary>
            The Cancel button.
              Leaves the current interface and discards any changes.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Close">
            <summary>
            The Close button.
              Leaves the current interface.
              This is meant for interfaces that do not allow any reversible changes to be made.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Apply">
            <summary>
            The Apply button.
              Saves and applies any changes.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Help">
            <summary>
            The Help button.
              Invokes the interface's help system.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Abort">
            <summary>
            The Abort button.
              Aborts the current already started operation.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Retry">
            <summary>
            The Retry button.
              Retries to execute the current step in an operation.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Ignore">
            <summary>
            The Ignore button.
              Ignores a problem.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Yes">
            <summary>
            The Yes button.
              Confirms a question.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.YesToAll">
            <summary>
            The Yes to All button.
              Confirms a question and all similar questions that will follow in the same process.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.No">
            <summary>
            The No button.
              Declines a question.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.NoToAll">
            <summary>
            The No to All button.
              Declines a question and all similar questions that will follow in the same process.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Save">
            <summary>
            The Save button.
              Saves any changes.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Discard">
            <summary>
            The Discard button.
              Discards any changes.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Reset">
            <summary>
            The Reset button.
              Discards any changes and resets the interface into its initial state.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Next">
            <summary>
            The Next button.
              Switches to the next part of the interface, for example in a wizard dialog.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Previous">
            <summary>
            The Previous button.
              Switches to the previous part of the interface, for example in a wizard dialog.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.Finish">
            <summary>
            The Finish button.
              Completes an operation.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.ShowDetails">
            <summary>
            The Show Details button.
              Shows additional details that can be hidden with <see cref="F:TwoLayeredGUI.DefaultButtonKind.HideDetails"/>.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.DefaultButtonKind.HideDetails">
            <summary>
            The Hide Details button.
              Hides additional details shown with <see cref="F:TwoLayeredGUI.DefaultButtonKind.ShowDetails"/>.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ControlButtonList`1">
            <summary>
            Stores a list of control buttons for a dialog box.
            </summary>
            <typeparam name="T">The type of the control button definitions.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ControlButtonList`1.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ControlButtonList`1.buttonKindList">
            <summary>
            Provides access to the list via the <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> values.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ControlButtonList`1.ButtonKindList"/>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.Add(`0)">
            <summary>
            Appends an item to the end of the list.
            </summary>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at an arbitrary position in the list.
            </summary>
            <param name="index">The position of the item.</param>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ControlButtonList`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.IndexOf(`0)">
            <summary>
            Determines the position of an item in the list.
            </summary>
            <param name="item">The item being searched for.</param>
            <returns>The position of the item or a negative value, if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ControlButtonList`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.Contains(`0)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item being searched for.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.Remove(`0)">
            <summary>
            Removes a specified item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the operation was successful.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.GetEnumerator">
            <summary>
            Returns an object that iterates over all items.
            </summary>
            <returns>The iterator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that iterates over all items.
            </summary>
            <returns>The iterator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.ButtonDef"/> cannot be cast to the item type of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.Clone">
            <summary>
            Creates a shallow copy of the object.
            </summary>
            <returns>The newly created copy.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Appends an item to the end of the list.
            </summary>
            <param name="value">The element to add.</param>
            <returns>The position of the new element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be cast to <see cref="T:TwoLayeredGUI.ButtonDef"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Checks whether the list contains a given element.
            </summary>
            <param name="value">The element to find.</param>
            <returns>A value that indicates whether <paramref name="value"/> is in the list.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be cast to <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Retrieves the position of a given item in the list.
            </summary>
            <param name="value">The item to locate.</param>
            <returns>The position of <paramref name="value"/>, or a negative value if <paramref name="value"/> is not found.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be cast to <see cref="T:TwoLayeredGUI.ButtonDef"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item at a given position into the list.
            </summary>
            <param name="index">The position of the item.</param>
            <param name="value">The item to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ControlButtonList`1.Count"/>.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be cast to <see cref="T:TwoLayeredGUI.ButtonDef"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to remove.</param>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be cast to <see cref="T:TwoLayeredGUI.ButtonDef"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="index"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.ButtonDef"/> cannot be cast to the item type of the destination array.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="array"/> is not an array of <see cref="T:TwoLayeredGUI.ButtonDef"/> elements.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.ButtonKindList">
            <summary>
            Provides access to the list via the <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> values.
            </summary>
            <value>
            <para>This property provides access to a wrapper around this list that handles <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> instances.</para>
            </value>
            <note type="caution">Note that the <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> and <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/> methods can only be used if <typeparamref name="T"/> provides a constructor that accepts a single <see cref="T:TwoLayeredGUI.ButtonDef"/> instance (and copies the settings of that instance to the new instance).
              Otherwise, these methods will throw a <see cref="T:System.NotSupportedException"/>.</note>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.Item(System.Int32)">
            <summary>
            Gets or sets an item based on its position in the list.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentNullException">The assigned value is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ControlButtonList`1.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.ContainsCloseButton">
            <summary>
            Indicates whether any of the buttons in the list has its <see cref="P:TwoLayeredGUI.ButtonDef.IsCloseButton"/> property set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Indicates whether this instance is read-only.
            </summary>
            <value>
            <para>This implementation always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets an item at a specified position in the list.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the number of items in the list.</exception>
            <exception cref="T:System.InvalidCastException">The assigned value is not a valid <see cref="T:TwoLayeredGUI.ButtonDef"/> value.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Indicates whether the list has a fixed size.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Indicates whether access to the list is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Indicates whether the list is read-only.
            </summary>
            <value>
            <para>This implementation always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor">
            <summary>
            This class provides access to the list as a list of <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> values.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.IDefaultButtonKindList">
            <summary>
            An interface for lists of <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> values.
            </summary>
            <remarks>
            <para>This interface is an interface for lists of <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> values.
              It is essentially the <see cref="T:System.Collections.Generic.IList`1"/> interface typed to <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> with a few additional methods.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.IDefaultButtonKindList.IndexOfAny(TwoLayeredGUI.DefaultButtonKind[])">
            <summary>
            Retrieves the position of the first item with any of a given set of <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> values.
            </summary>
            <param name="kinds">The button kinds to find.</param>
            <returns>The position of hte button in the list or a negative value, if none of the button kinds was found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kinds"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.#ctor(TwoLayeredGUI.ControlButtonList{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="owner">The list wrapped by the instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.owner">
            <summary>
            The list wrapped by the instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.buttonDefCopyCtor">
            <summary>
            The constructor of <typeparamref name="T"/> that can create instances based on settings of other <see cref="T:TwoLayeredGUI.ButtonDef"/> instances.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.IndexOf(TwoLayeredGUI.DefaultButtonKind)">
            <summary>
            Retrieves the position of an item with a given <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> value.
            </summary>
            <param name="item">The button kind to find.</param>
            <returns>The position of the button in the list or a negative value, if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.IndexOfAny(TwoLayeredGUI.DefaultButtonKind[])">
            <summary>
            Retrieves the position of the first item with any of a given set of <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> values.
            </summary>
            <param name="kinds">The button kinds to find.</param>
            <returns>The position of hte button in the list or a negative value, if none of the button kinds was found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kinds"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Add(TwoLayeredGUI.DefaultButtonKind)">
            <summary>
            Appends a default button to the end of the list.
            </summary>
            <param name="item">The button kind of the new item.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="item"/> is not a valid <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> value.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="T"/> does not provide a constructor that allows for creating instances based on the settings of a <see cref="T:TwoLayeredGUI.ButtonDef"/> instance.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Insert(System.Int32,TwoLayeredGUI.DefaultButtonKind)">
            <summary>
            Inserts a default button at an arbitrary position in the list.
            </summary>
            <param name="index">The position of the item.</param>
            <param name="item">The button kind of the new item.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="item"/> is not a valid <see cref="T:TwoLayeredGUI.DefaultButtonKind"/> value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="T"/> does not provide a constructor that allows for creating instances based on the settings of a <see cref="T:TwoLayeredGUI.ButtonDef"/> instance.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Contains(TwoLayeredGUI.DefaultButtonKind)">
            <summary>
            Checks whether an item with a given <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> value is in the list.
            </summary>
            <param name="item">The button kind being searched.</param>
            <returns>A value that indicates whether the specified button kind was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Remove(TwoLayeredGUI.DefaultButtonKind)">
            <summary>
            Removes a button with a given <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> value.
            </summary>
            <param name="item">The button kind to remove.</param>
            <returns>A value that indicates whether the operation was successful.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.System#Collections#Generic#IEnumerable{TwoLayeredGUI#DefaultButtonKind}#GetEnumerator">
            <summary>
            Returns an object that iterates over all items.
            </summary>
            <returns>The iterator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.System#Collections#Generic#ICollection{TwoLayeredGUI#DefaultButtonKind}#CopyTo(TwoLayeredGUI.DefaultButtonKind[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.DefaultButtonKind"/> cannot be cast to the item type of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that iterates over all items.
            </summary>
            <returns>The iterator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Item(System.Int32)">
            <summary>
            Gets an item based on its position in the list.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentNullException">The assigned value is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">A value is assigned to the property.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.System#Collections#Generic#ICollection{TwoLayeredGUI#DefaultButtonKind}#IsReadOnly">
            <summary>
            Indicates whether this instance is read-only.
            </summary>
            <value>
            <para>This implementation always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ControlButtonList`1.DefaultButtonKindAccessor.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.DefaultObjectAccess">
            <summary>
            Provides access to default object of the Two-Layered GUI Toolkit.
            </summary>
            <remarks>
            <para>This class exists only to provide access to the static properties via an object instance.
              This can be used for automatic translator services that do not work well with static properties, for example.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.Information">
            <summary>
            The information message box template.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.Confirmation">
            <summary>
            The confirmation message box template.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.Warning">
            <summary>
            The warning message box template.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.Error">
            <summary>
            The error message box template.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.OkButton">
            <summary>
            The OK button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.CancelButton">
            <summary>
            The Cancel button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.CloseButton">
            <summary>
            The Close button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.ApplyButton">
            <summary>
            The Apply button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.HelpButton">
            <summary>
            The Help button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.AbortButton">
            <summary>
            The Abort button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.RetryButton">
            <summary>
            The Retry button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.IgnoreButton">
            <summary>
            The Ignore button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.YesButton">
            <summary>
            The Yes button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.YesToAllButton">
            <summary>
            The Yes to All button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.NoButton">
            <summary>
            The No button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.NoToAllButton">
            <summary>
            The No to All button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.SaveButton">
            <summary>
            The Save button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.DiscardButton">
            <summary>
            The Discard button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.ResetButton">
            <summary>
            The Reset button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.NextButton">
            <summary>
            The Next button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.PreviousButton">
            <summary>
            The Previous button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.FinishButton">
            <summary>
            The Finish button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.ShowDetailsButton">
            <summary>
            The Show Details button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.HideDetailsButton">
            <summary>
            The Hide Details button definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DefaultObjectAccess.AllFilesFilter">
            <summary>
            The file filter for all files.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.DialogBoxSettings">
            <summary>
            Stores settings relevant for all kinds of dialog boxes.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.#ctor(TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance with buttons.
            </summary>
            <param name="buttons">The buttons to show in the dialog box.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.#ctor(System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance with a title text and buttons.
            </summary>
            <param name="title">The dialog title.</param>
            <param name="buttons">The buttons to show in the dialog box.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.#ctor(TwoLayeredGUI.DialogBoxSettings,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on another instance.
            </summary>
            <param name="template">The other instance.</param>
            <param name="buttons">The buttons to show in the dialog box.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor internally calls the <see cref="M:TwoLayeredGUI.DialogBoxSettings.Assign(TwoLayeredGUI.DialogBoxSettings)"/> method.
              If an overridden version of <see cref="M:TwoLayeredGUI.DialogBoxSettings.Assign(TwoLayeredGUI.DialogBoxSettings)"/> requires a class member to be initialized, this constructor must not be used.
              Instead, call <see cref="M:TwoLayeredGUI.DialogBoxSettings.Assign(TwoLayeredGUI.DialogBoxSettings)"/> directly in the constructor of the derived class if initialization based on a template object is desired.</para>
            <para>If <paramref name="buttons"/> contains at least one element, any buttons from <paramref name="template"/> will be ignored.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.#ctor(TwoLayeredGUI.DialogBoxSettings,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on another instance with a custom title.
            </summary>
            <param name="template">The other instance.</param>
            <param name="title">The dialog title.</param>
            <param name="buttons">The buttons to show in the dialog box.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor internally calls the <see cref="M:TwoLayeredGUI.DialogBoxSettings.Assign(TwoLayeredGUI.DialogBoxSettings)"/> method.
              If an overridden version of <see cref="M:TwoLayeredGUI.DialogBoxSettings.Assign(TwoLayeredGUI.DialogBoxSettings)"/> requires a class member to be initialized, this constructor must not be used.
              Instead, call <see cref="M:TwoLayeredGUI.DialogBoxSettings.Assign(TwoLayeredGUI.DialogBoxSettings)"/> directly in the constructor of the derived class if initialization based on a template object is desired.</para>
            <para>If <paramref name="buttons"/> contains at least one element, any buttons from <paramref name="template"/> will be ignored.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.title">
            <summary>
            The title bar text of the dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.Title"/>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.headline">
            <summary>
            The headline of the dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.Headline"/>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.controlButtonLayout">
            <summary>
            Indicates where the control buttons of the form will be placed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.ControlButtonLayout"/>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.controlButtons">
            <summary>
            The list of control buttons in the dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.ControlButtons"/>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.preselectedControlButton">
            <summary>
            The preselected button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.PreselectedControlButton"/>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.defaultControlButton">
            <summary>
            The default button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.DefaultControlButton"/>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.FindDefaultControlButton">
            <summary>
            Retrieves the index of a control button that is suitable to be the <see cref="P:TwoLayeredGUI.DialogBoxSettings.DefaultControlButton">default control button</see> based on its <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/>.
            </summary>
            <returns>The index of the button, or a negative value if no suitable button is found.</returns>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.cancelControlButton">
            <summary>
            The cancel button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.CancelControlButton"/>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.FindCancelControlButton">
            <summary>
            Retrieves the index of a control button that is suitable to be the <see cref="P:TwoLayeredGUI.DialogBoxSettings.CancelControlButton">cancel control button</see> based on its <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/>.
            </summary>
            <returns>The index of the button, or a negative value if no suitable button is found.</returns>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.groupButtons">
            <summary>
            Determines whether control buttons are grouped.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.GroupButtons"/>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.hideDetails">
            <summary>
            Indicates whether the area showing the detailed information is hidden by default and can be extended.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.HideDetails"/>
        </member>
        <member name="F:TwoLayeredGUI.DialogBoxSettings.dialogFont">
            <summary>
            A font for the dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.DialogFont"/>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.CreateClone">
            <summary>
            Creates a new instance of the current type that is used for the <see cref="M:TwoLayeredGUI.DialogBoxSettings.Clone"/> operation.
            </summary>
            <returns>The new instance.</returns>
            <exception cref="T:System.NotSupportedException">This implementation of the method is called for a type that does not have a constructor with a supported signature.</exception>
            <remarks>
            <para>The default implementation creates a new instance using either a parameterless constructor or a constructor that accepts an array of <see cref="T:TwoLayeredGUI.ButtonDef"/> values.
              Override this method where this is not acceptable or no such constructor exists.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The copied object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.Assign(TwoLayeredGUI.DialogBoxSettings)">
            <summary>
            Copies the settings from another object.
            </summary>
            <param name="other">The other object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.AssignStyle(TwoLayeredGUI.DialogBoxSettings)">
            <summary>
            Copies only the style-related settings from another object.
            </summary>
            <param name="other">The other object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method copies only those settings from <paramref name="other"/> that are merely related to the visual style of the dialog box.
              The copied settings are:</para>
            <list type="bullet">
              <item><see cref="P:TwoLayeredGUI.DialogBoxSettings.ControlButtonLayout"/></item>
              <item><see cref="P:TwoLayeredGUI.DialogBoxSettings.DialogFont"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Notifies any listeners about a property that is about to change.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="M:TwoLayeredGUI.DialogBoxSettings.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Notifies any listeners about a property that has changed.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.Title">
            <summary>
            The title bar text of the dialog box.
            </summary>
            <value>
            <para>The value of this property will be displayed in the title bar of the dialog box.
              It can never be <see langword="null"/>.</para>
            <para>If you need to display a more extensive description of the dialog box, use the <see cref="P:TwoLayeredGUI.DialogBoxSettings.Headline"/> property.
              The value of the <see cref="P:TwoLayeredGUI.DialogBoxSettings.Title"/> property should be brief and concise so it fits into the title bar and allows for a quick identification of the window at a single glance.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.Headline">
            <summary>
            The headline of the dialog box.
            </summary>
            <value>
            <para>Gets or sets a headline for the dialog box.
              The headline can contain a short descriptive text that outlines the main point of the dialog box or message window.</para>
            <para>Note that the headline is displayed inside the dialog box, in a manner that is well visible.
              It is not the same as the title bar text of the window, which can be set by using the <see cref="P:TwoLayeredGUI.DialogBoxSettings.Title"/> property.
              Therefore, the headline may span several lines if it is too long to fit on a single line.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.HasHeadline"/>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.HasHeadline">
            <summary>
            Indicates whether the dialog box has a headline.
            </summary>
            <value>
            <para>This property indicates whether a headline is set for the dialog box.
              It is <see langword="true"/> if the <see cref="P:TwoLayeredGUI.DialogBoxSettings.Headline"/> property is not <see langword="null"/>.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.Headline"/>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.ControlButtonLayout">
            <summary>
            Indicates where the control buttons of the form will be placed.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A invalid value is assigned.</exception>
            <value>
            <para>This property indicates where the control buttons of the form should be placed.
              The control buttons of a form are buttons that are related to the whole form.
              They control its behavior by closing it, saving or resetting its settings or showing a help text for the whole form.</para>
            <para>It is wise to define an application-wide standard on how these buttons should be placed.
              The values of this enumeration type can specify such a standard setting.</para>
            <para>For mirrored interfaces with a right-to-left reading direction, the meanings of these enumeration constants are mirrored likewise.</para>
            <para>Note that this setting may be ignored by a few types of dialog boxes.
              Message boxes, for instance, always align the buttons centered at the bottom side of the form.</para>
            <para>The default value is <see cref="F:TwoLayeredGUI.ControlButtonLayout.BottomRight"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.ControlButtons">
            <summary>
            The list of control buttons in the dialog box.
            </summary>
            <value>
            <para>This property provides access to the list of control buttons in the dialog box.</para>
            <para>The control buttons of a form are buttons that are related to the whole form.
              They control its behavior by closing it, saving or resetting its settings or showing a help text for the whole form.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.PreselectedControlButton">
            <summary>
            The preselected button.
            </summary>
            <value>
            <para>This property gets or sets the index of the button from the <see cref="P:TwoLayeredGUI.DialogBoxSettings.ControlButtons"/> list which is focused upon opening the dialog box.</para>
            <para>If an invalid index is specified and no other focusable controls besides the buttons are found in the dialog box, the first control button will be automatically focused.</para>
            <para>The default value of the property is zero.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.DefaultControlButton">
            <summary>
            The default button.
            </summary>
            <value>
            <para>This property gets or sets the index of the default button from the <see cref="P:TwoLayeredGUI.DialogBoxSettings.ControlButtons"/> list.
              The default button may be activated using a default key, no matter where focus is currently located.</para>
            <para>If an invalid index is specified, the first button of the kind <see cref="F:TwoLayeredGUI.DefaultButtonKind.Ok"/>, <see cref="F:TwoLayeredGUI.DefaultButtonKind.Yes"/>, <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/>, <see cref="F:TwoLayeredGUI.DefaultButtonKind.Save"/> or <see cref="F:TwoLayeredGUI.DefaultButtonKind.Next"/> will be chosen.
              If no such button exists, the first control button will be the default button.</para>
            <para>The default value of the property is <c>-1</c>.</para>
            </value>
            <seealso cref="M:TwoLayeredGUI.DialogBoxSettings.FindDefaultControlButton"/>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.CancelControlButton"/>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.CancelControlButton">
            <summary>
            The cancel button.
            </summary>
            <value>
            <para>This property gets or sets the index of the cancel button from the <see cref="P:TwoLayeredGUI.DialogBoxSettings.ControlButtons"/> list.
              The cancel button may be activated using a cancel key, no matter where focus is currently located.</para>
            <para>If an invalid index is specified, the first button of the kind <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/>, <see cref="F:TwoLayeredGUI.DefaultButtonKind.No"/>, <see cref="F:TwoLayeredGUI.DefaultButtonKind.Cancel"/> or <see cref="F:TwoLayeredGUI.DefaultButtonKind.Abort"/> will be chosen.
              If no such button exists, the last control button will be the cancel button.</para>
            <para>The default value of the property is <c>-1</c>.</para>
            </value>
            <seealso cref="M:TwoLayeredGUI.DialogBoxSettings.FindCancelControlButton"/>
            <seealso cref="P:TwoLayeredGUI.DialogBoxSettings.DefaultControlButton"/>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.GroupButtons">
            <summary>
            Determines whether control buttons are grouped.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.HideDetails">
            <summary>
            Indicates whether the area showing the detailed information is hidden by default and can be extended.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.DialogBoxSettings.DialogFont">
            <summary>
            A font for the dialog box.
            </summary>
            <value>
            <para>If an instance is assigned to this property, that instance defines the font settings used for the dialog box.
              If the property is <see langword="null"/>, the system's default settings will be used.</para>
            </value>
        </member>
        <member name="E:TwoLayeredGUI.DialogBoxSettings.PropertyChanging">
            <summary>
            This event is fired when a property is about to change.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.DialogBoxSettings.PropertyChanged">
            <summary>
            This event is fired when a property has changed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.CustomEnumerableModifier`1">
            <summary>
            Modifies <see cref="T:System.Collections.Generic.IEnumerable`1"/> objects based on a transformation function delegate.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="T:TwoLayeredGUI.IEnumerableModifier`1">
            <summary>
            Modifies <see cref="T:System.Collections.Generic.IEnumerable`1"/> objects.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.IEnumerableModifier`1.Modify(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs the modification.
            </summary>
            <param name="enumerable">The original enumerable object.</param>
            <returns>The modified enumerable object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumerable"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.CustomEnumerableModifier`1.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="function">The transformation function.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.CustomEnumerableModifier`1.function">
            <summary>
            The transformation function.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.CustomEnumerableModifier`1.Modify(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs the modification.
            </summary>
            <param name="enumerable">The original enumerable object.</param>
            <returns>The modified enumerable object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumerable"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.DisposalManager">
            <summary>
            Executes custom operations upon disposal.
            </summary>
            <remarks>
            <para>Some user interface toolkits do not provide any means to determine when input controls are no longer needed.
              As control definition objects might sometimes remain linked to obsolete input controls, they should register with an instance of the <see cref="T:TwoLayeredGUI.DisposalManager"/> class to ensure the removal of any remaining references.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.IDisposalManager">
            <summary>
            Executes custom operations upon disposal.
            </summary>
            <seealso cref="T:TwoLayeredGUI.DisposalManager"/>
        </member>
        <member name="E:TwoLayeredGUI.IDisposalManager.Disposing">
            <summary>
            This event is fired when the object is disposed of.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.DisposalManager.Dispose">
            <summary>
            Frees any allocated resources by invoking the delegates registered with the <see cref="E:TwoLayeredGUI.DisposalManager.Disposing"/> event
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.DisposalManager.Disposing">
            <summary>
            This event is fired when the <see cref="M:TwoLayeredGUI.DisposalManager.Dispose"/> method is invoked.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.DynamicGUIProvider">
            <summary>
            An implementation of the <see cref="T:TwoLayeredGUI.IGUIProvider"/> interface that allows a dynamic setting of specific providers.
            </summary>
            <remarks>
            <para>This class implements the <see cref="T:TwoLayeredGUI.IGUIProvider"/> interface.
              The specific GUI providers are dynamically assigned by means of the <see cref="M:TwoLayeredGUI.DynamicGUIProvider.RegisterProvider``1(``0)"/> method.
              Providers are mapped to a given provider type, which must be an interface.
              The <see cref="P:TwoLayeredGUI.DynamicGUIProvider.AllowOverwrite"/> property determines whether providers, once set, can be replaced.</para>
            <para>Use the <see cref="P:TwoLayeredGUI.DynamicGUIProvider.Fallback"/> property to indicate an alternative <see cref="T:TwoLayeredGUI.IGUIProvider"/> implementation that will be invoked if there is no specific provider available for a given provider type.
              Without a fallback implementation, the properties that retrieve specific GUI providers will throw a <see cref="T:System.NotSupportedException"/> if no appropriate GUI provider has been registered.</para>
            </remarks>
            <seealso cref="T:TwoLayeredGUI.IGUIProvider"/>
        </member>
        <member name="T:TwoLayeredGUI.IGUIProvider">
            <summary>
            An interface that provides access to the features of the Two-Layered GUI Toolkit.
            </summary>
            <remarks>
            <para>This is an interface for objects that store specific GUI providers, that is, objects that can display the dialogs supported by the Two-Layered GUI Toolkit.
              If one of these specific GUI providers is not available, attempting to retrieve it via its respective property will result in a <see cref="T:System.NotSupportedException"/>.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.MessageBox">
            <summary>
            Returns an object that can be used to show message boxes.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.SupportsMessageBox"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.SupportsMessageBox">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.IGUIProvider.MessageBox"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.MessageBox"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.InputBox">
            <summary>
            Returns an object that can be used to show input boxes.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.SupportsInputBox"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.SupportsInputBox">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.IGUIProvider.InputBox"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.InputBox"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.ProgressDialog">
            <summary>
            Returns an object that can be used to show progress dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.SupportsProgressDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.SupportsProgressDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.IGUIProvider.ProgressDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.ProgressDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.FileDialog">
            <summary>
            Returns an object that can be used to show file dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.SupportsFileDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.SupportsFileDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.IGUIProvider.FileDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.FileDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.DirectoryDialog">
            <summary>
            Returns an object that can be used to show directory selection dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.SupportsDirectoryDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.SupportsDirectoryDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.IGUIProvider.DirectoryDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.DirectoryDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.WizardDialog">
            <summary>
            Returns an object that can be used to show wizard dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.SupportsWizardDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.SupportsWizardDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.IGUIProvider.WizardDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.WizardDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.DialogBox">
            <summary>
            Returns an object that can be used to show dialog boxes.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.IGUIProvider.SupportsDialogBox"/>
        </member>
        <member name="P:TwoLayeredGUI.IGUIProvider.SupportsDialogBox">
            <summary>
            Indicates whether the <see cref="P:DialogBox"/> property returns a value.
            </summary>
            <seealso cref="P:DialogBox"/>
        </member>
        <member name="M:TwoLayeredGUI.DynamicGUIProvider.CheckProviderType(System.Type)">
            <summary>
            Checks whether a <see cref="T:System.Type"/> instance is a valid GUI provider type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> instance to check.
              This must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> cannot be a GUI provider type (it is not an interface type).</exception>
        </member>
        <member name="F:TwoLayeredGUI.DynamicGUIProvider.providers">
            <summary>
            The internal directory of registered providers.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.DynamicGUIProvider.RegisterProvider``1(``0)">
            <summary>
            Registers a GUI provider of a given type.
            </summary>
            <typeparam name="T">The GUI provider type.</typeparam>
            <param name="provider">The provider to register.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not a GUI provider type, as it is not an interface type.</exception>
            <exception cref="T:System.InvalidOperationException">A provider has already been registered for type <typeparamref name="T"/> and <see cref="P:TwoLayeredGUI.DynamicGUIProvider.AllowOverwrite"/> is <see langword="false"/>.</exception>
            <remarks>
            <para>This method registers a GUI provider of a given type.
              Specify the interface type of the GUI provider for the type argument <typeparamref name="T"/>.
              In the <paramref name="provider"/> argument, pass an instance of an implementation of that that GUI provider interface.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.DynamicGUIProvider.GetProvider``1">
            <summary>
            Retrieves a GUI provider of a given type, if available.
            </summary>
            <typeparam name="T">The GUI provider type.</typeparam>
            <returns>The GUI provider, or <see langword="null"/> if no GUI provider was registered for type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not a GUI provider type, as it is not an interface type.</exception>
        </member>
        <member name="F:TwoLayeredGUI.DynamicGUIProvider.allowOverwrite">
            <summary>
            Indicates whether overwriting a provider for a provider type that has already been registered is allowed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.AllowOverwrite"/>
        </member>
        <member name="F:TwoLayeredGUI.DynamicGUIProvider.fallback">
            <summary>
            Stores a GUI provider that will be used as a fallback if any of the default providers has not been registered.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.Fallback"/>
        </member>
        <member name="M:TwoLayeredGUI.DynamicGUIProvider.RequireProvider``1(System.Func{``0})">
            <summary>
            Enforces the retrieval of a GUI provider of a given type, and throws an exception if retrieval is unsuccessful.
            </summary>
            <typeparam name="T">The GUI provider type.</typeparam>
            <param name="fallbackFunc">A function that retrieves a fallback GUI provider of type <typeparamref name="T"/>, or <see langword="null"/> if no such function can be provided.</param>
            <returns>The GUI provider of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not a GUI provider type, as it is not an interface type.</exception>
            <exception cref="T:System.NotSupportedException">No GUI provider of type <typeparamref name="T"/> is registered in the current instance.</exception>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.AllowOverwrite">
            <summary>
            Gets or sets a value that controls whether overwriting a provider for a provider type that has already been registered is allowed.
            </summary>
            <value>
            <para>This property gets or sets a value that controls whether overwriting a provider for a provider type that has already been registered is allowed.
              If set to <see langword="true"/> (the default value), calling <see cref="M:TwoLayeredGUI.DynamicGUIProvider.RegisterProvider``1(``0)"/> more than once for a certain provider type means that the last assigned provider will prevail.
              If set to <see langword="false"/>, calling <see cref="M:TwoLayeredGUI.DynamicGUIProvider.RegisterProvider``1(``0)"/> more than once for a certain provider type will yield an exception.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.Fallback">
            <summary>
            Gets or sets a GUI provider that will be used as a fallback if any of the default providers has not been registered.
            </summary>
            <value>
            <para>This property gets or sets a GUI provider that will be used when any of the default child providers has not been registered.</para>
            <para>All of the default child providers returned by the properties of the <see cref="T:TwoLayeredGUI.IGUIProvider"/> interface have to be supplied for any implementation of that interface.
              If for any of them, no provider has been registered in the current instance, the fallback GUI provider will be queried.
              Only if that provider does not provide any implementation of a given child provider type, either, an exception will be thrown by the <see cref="T:TwoLayeredGUI.IGUIProvider"/> property.</para>
            <para>If the property is <see langword="null"/> (the default value), the step with the fallback GUI provider will be skipped.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.HasFallback"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.HasFallback">
            <summary>
            Indicates whether a fallback provider is registered.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.Fallback"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.MessageBox">
            <summary>
            Returns an object that can be used to show message boxes.
            </summary>
            <exception cref="T:System.NotSupportedException">No GUI provider of type <see cref="T:TwoLayeredGUI.IMessageBoxProvider"/> is registered in the current instance.</exception>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.SupportsMessageBox">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.DynamicGUIProvider.MessageBox"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.MessageBox"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.InputBox">
            <summary>
            Returns an object that can be used to show input boxes.
            </summary>
            <exception cref="T:System.NotSupportedException">No GUI provider of type <see cref="T:TwoLayeredGUI.ValueInput.IInputBoxProvider"/> is registered in the current instance.</exception>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.SupportsInputBox">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.DynamicGUIProvider.InputBox"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.InputBox"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.ProgressDialog">
            <summary>
            Returns an object that can be used to show progress dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">No GUI provider of type <see cref="T:TwoLayeredGUI.IProgressDialogProvider"/> is registered in the current instance.</exception>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.SupportsProgressDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.DynamicGUIProvider.ProgressDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.ProgressDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.FileDialog">
            <summary>
            Returns an object that can be used to show file dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">No GUI provider of type <see cref="T:TwoLayeredGUI.FileSystem.IFileDialogProvider"/> is registered in the current instance.</exception>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.SupportsFileDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.DynamicGUIProvider.FileDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.FileDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.DirectoryDialog">
            <summary>
            Returns an object that can be used to show directory selection dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.SupportsDirectoryDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.SupportsDirectoryDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.DynamicGUIProvider.DirectoryDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.DirectoryDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.WizardDialog">
            <summary>
            Returns an object that can be used to show wizard dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.SupportsWizardDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.SupportsWizardDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.DynamicGUIProvider.WizardDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.WizardDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.DialogBox">
            <summary>
            Returns an object that can be used to show dialog boxes.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.DynamicGUIProvider.SupportsDialogBox"/>
        </member>
        <member name="P:TwoLayeredGUI.DynamicGUIProvider.SupportsDialogBox">
            <summary>
            Indicates whether the <see cref="P:DialogBox"/> property returns a value.
            </summary>
            <seealso cref="P:DialogBox"/>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.DirectoryDialogSettings">
            <summary>
            Stores settings for a directory selection dialog.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.isDirectoryCreationAppropriate">
            <summary>
            Gets or sets a value that indicates whether users expect to be able to create new directories.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.IsDirectoryCreationAppropriate"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.initialSelection">
            <summary>
            The initially selected directory.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.InitialSelection"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.CreateClone">
            <summary>
            Creates a new instance of the current type that is used for the <see cref="M:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.Clone"/> operation.
            </summary>
            <returns>The new instance.</returns>
            <exception cref="T:System.NotSupportedException">This implementation of the method is called for a type that does not have a constructor with a supported signature.</exception>
            <remarks>
            <para>The default implementation creates a new instance using a parameterless constructor.
              Override this method where this is not acceptable or no such constructor exists.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The copied object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.Assign(TwoLayeredGUI.FileSystem.DirectoryDialogSettings)">
            <summary>
            Copies the settings from another object.
            </summary>
            <param name="other">The other object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.IsDirectoryCreationAppropriate">
            <summary>
            Gets or sets a value that indicates whether users expect to be able to create new directories.
            </summary>
            <value>
            <para>On some systems, directory selection dialog boxes can offer an option to create new directories.
              Such an option is only useful in certain situations.
              This property indicates whether the dialog box will be shown when creation of a new directory is something users might want to do.</para>
            <para>The default value of this property is <see langword="false"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.DirectoryDialogSettings.InitialSelection">
            <summary>
            Gets or sets the initially selected directory.
            </summary>
            <value>
            <para>This property gets or sets the directory that is initially selected when opening the dialog box.
              If it is <see langword="null"/> (the default value), no particular directory will be selected.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.DirectoryExistsValidator">
            <summary>
            A string validator that checks whether the string represents the name of an existing directory.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1">
            <summary>
            The base class for value validators.
            </summary>
            <typeparam name="TValue">The data type to validate.</typeparam>
            <remarks>
            <para>This is the base class for any objects that can validate input values.
              In order to derive a validator class, override the <see cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.DoValidate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/> method.
              If your validator class is specific to a particular data type, indicate an actual type for the type argument <typeparamref name="TValue"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})">
            <summary>
            Executes the validation process.
            </summary>
            <param name="info">An object that contains some information about the value to validate.</param>
            <returns>A value that indicates whether the value was valid.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.DoValidate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.
              This cannot be <see langword="null"/>.</param>
            <remarks>
            <para>This method must be overridden to perform the actual validation.
              If any errors are detected, respective messages must be saved using the <see cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.AddError(System.String,System.Object[])"/> method.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.errorMessages">
            <summary>
            The current list of error messages.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.AddError(System.String,System.Object[])">
            <summary>
            Adds an error message.
            </summary>
            <param name="format">The format of the message to add.</param>
            <param name="args">The objects to format in the message string.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or contains an invalid argument index.</exception>
            <remarks>
            <para>Adds an error messages to the list of error messages.
              This method should only be called during the validation process.</para>
            <para>The error message might become directly visible to users.
              Therefore, it should explain what was wrong with the value.
              Also, the error message should be kept localizable.
              Therefore, design subclasses of <see cref="T:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1"/> in a way that callers can specify user-defined error message strings.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.HasErrors">
            <summary>
            Indicates whether any errors have been detected during the last call to <see cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.ErrorMessages"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.ErrorMessages">
            <summary>
            Returns an enumeration of the errors detected during the last call to <see cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/>.
            </summary>
            <value>
            <para>This property returns an object that can enumerate all error messages evoked during the last validation process.
              If it contains any elements, <see cref="P:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.HasErrors"/> is <see langword="true"/> and the validation has failed (i.e. the value to check was invalid).</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.HasErrors"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.#ctor">
            <summary>
            Initializes a new instance that requires the existence of a directory.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="requireExistence">A value that determines whether the existence of the directory is required.</param>
            <seealso cref="P:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.RequireExistence"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.DefaultExistenceMessage">
            <summary>
            The default value for the <see cref="P:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.ExistenceMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.existenceMessage">
            <summary>
            The message to show when the directory that is required to be absent is existing.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.ExistenceMessage"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.DefaultAbsenceMessage">
            <summary>
            The default value for the <see cref="P:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.AbsenceMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.absenceMessage">
            <summary>
            The message to show when the directory that is required to exist is missing.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.AbsenceMessage"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.requireExistence">
            <summary>
            Determines whether the validator requires the existence or the absence of a directory.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.RequireExistence"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.DoValidate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.String})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.
              This cannot be <see langword="null"/>.</param>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.ExistenceMessage">
            <summary>
            The message to show when the directory that is required to be absent is existing.
            </summary>
            <value>
            <para>Gets or sets the message to show when the directory that is required to be absent is existing.
              The following <see cref="M:System.String.Format(System.String,System.Object[])"/> arguments may be used:</para>
            <list type="table">
              <listheader>
                <term>Index</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><c>0</c></term>
                <description>The validated string.</description>
              </item>
            </list>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.AbsenceMessage">
            <summary>
            The message to show when the directory that is required to exist is missing.
            </summary>
            <value>
            <para>Gets or sets the message to show when the directory that is required to exist is missing.
              The following <see cref="M:System.String.Format(System.String,System.Object[])"/> arguments may be used:</para>
            <list type="table">
              <listheader>
                <term>Index</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><c>0</c></term>
                <description>The validated string.</description>
              </item>
            </list>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.DirectoryExistsValidator.RequireExistence">
            <summary>
            Determines whether the validator requires the existence or the absence of a directory.
            </summary>
            <value>
            <para>Gets or sets a value that determines whether the existence of a directory is required.
              The default value is <see langword="true"/>.</para>
            <para>If this property is <see langword="true"/>, the validator will output an error message if the validated string does not denote an existing directory.
              If this property is <see langword="true"/>, the validator will output an error message if a directory with the name indicated by the validated string is already existing.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.EditDirectoryNameCommand">
            <summary>
            An <see cref="T:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1"/> that lets users input a directory name by means of a directory selection dialog.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1">
            <summary>
            An object that represents a command that invokes an editor for a value.
            </summary>
            <typeparam name="T">The value type to edit in the editor.</typeparam>
            <remarks>
            <para>Instances of this class represent a command for editing a value of type <typeparamref name="T"/> (for example, that of an <see cref="T:TwoLayeredGUI.ValueInput.InputValue"/> instance).
              Such a command will usually be executed upon activating an input element such as a button.
              Once that happens, the action defined by the <see cref="M:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InvokeEditor(`0@)"/> method is executed.</para>
            <para>Derived classes have to override <see cref="M:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InvokeEditor(`0@)"/> in order to execute the editor function.
              If a user interface needs to be displayed for an editor, it is the responsibility of the subclass to obtain access to a suitable frontend connector.
              One solution is passing an implementation of the <see cref="T:TwoLayeredGUI.IGUIProvider"/> interface, or of a more specific GUI provider interface, to the constructor of the <see cref="T:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1"/> subclass.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommands"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.#ctor(TwoLayeredGUI.AccessString,System.String,TwoLayeredGUI.Graphics.IBitmapProvider)">
            <summary>
            Initializes a new instance with an icon and a text that represent the command.
            </summary>
            <param name="displayName">A text that represents the editor action.</param>
            <param name="infoText">A text that can be shown related to the element that triggers the editor action.</param>
            <param name="icon">An image that can be shown related to the element that triggers the editor action.</param>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InvokeEditor(`0@)">
            <summary>
            Invokes the editor for a given value.
            </summary>
            <param name="value">The value to edit.
              If the changes in the editor are confirmed, the value will be replaced with the new value.</param>
            <returns>A value that indicates whether the editing operation was completed successfully.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InvokeEditor(TwoLayeredGUI.ValueInput.IInputControlLink)">
            <summary>
            Invokes the editor with an input control link.
            </summary>
            <param name="link">An object that provides a link to the input control.</param>
            <returns>A value that indicates whether the editing operation was completed successfully.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="link"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method invokes the editor and uses the value stored in an input control link.
              The method calls the <see cref="M:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InvokeEditor(`0@)">overload of this method that expects the edited value as an argument</see>.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.icon">
            <summary>
            Stores an image that can be shown related to the element that triggers the editor action.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.Icon"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.displayName">
            <summary>
            A text that represents the editor action.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.DisplayName"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.infoText">
            <summary>
            A text that describes the editor action.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InfoText"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.Icon">
            <summary>
            Gets or sets an image that can be shown related to the element that triggers the editor action.
            </summary>
            <value>
            <para>This property gets or sets an image that can be shown related to the element that triggers the editor action.</para>
            <para>The value of this property, along with <see cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InfoText"/> and <see cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.DisplayName"/>, indicate what the command does to the user.
              Note that not all of these properties need to be set.
              Moreover, depending on the user interface representation, not all of these properties, even if set, might be shown.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.HasIcon"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.HasIcon">
            <summary>
            Indicates whether an icon has been associated with the command.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.Icon"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.DisplayName">
            <summary>
            Gets or sets a text that represents the editor action.
            </summary>
            <value>
            <para>This property gets or sets a text that represents the editor action.</para>
            <para>The value of this property, along with <see cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.Icon"/> and <see cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InfoText"/>, indicate what the command does to the user.
              Note that not all of these properties need to be set.
              Moreover, depending on the user interface representation, not all of these properties, even if set, might be shown.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.HasDisplayName"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.HasDisplayName">
            <summary>
            Indicates whether a text that represents the editor action is available.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.DisplayName"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InfoText">
            <summary>
            Gets or sets a text that describes the editor action.
            </summary>
            <value>
            <para>This property gets or sets a text that describes the editor action.</para>
            <para>The value of this property, along with <see cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.Icon"/> and <see cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.DisplayName"/>, indicate what the command does to the user.
              Note that not all of these properties need to be set.
              Moreover, depending on the user interface representation, not all of these properties, even if set, might be shown.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.HasInfoText"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.HasInfoText">
            <summary>
            Indicates whether an information text has been associated with the command.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1.InfoText"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.EditDirectoryNameCommand.#ctor(TwoLayeredGUI.FileSystem.IDirectoryDialogProvider)">
            <summary>
            initializes a new instance.
            </summary>
            <param name="guiProvider">An object that can display directory selection dialogs.</param>
            <exception cref="T:System.ArgumentException"><paramref name="guiProvider"/> is an empty string.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.EditDirectoryNameCommand.#ctor(TwoLayeredGUI.FileSystem.IDirectoryDialogProvider,TwoLayeredGUI.AccessString)">
            <summary>
            Initializes a new instance with a custom display name.
            </summary>
            <param name="guiProvider">An object that can display file dialogs.</param>
            <param name="displayName">The custom display for the instance, or <see langword="null"/> if no display name is desired.</param>
            <exception cref="T:System.ArgumentException"><paramref name="guiProvider"/> is an empty string.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.EditDirectoryNameCommand.guiProvider">
            <summary>
            An object that can display directory selection dialogs.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.EditDirectoryNameCommand.dialogSettings">
            <summary>
            The settings for the file selection dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.EditDirectoryNameCommand.DialogSettings"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.EditDirectoryNameCommand.InvokeEditor(System.String@)">
            <summary>
            Invokes the editor for a given value.
            </summary>
            <param name="value">The value to edit.
              If the changes in the editor are confirmed, the value will be replaced with the new value.</param>
            <returns>A value that indicates whether the editing operation was completed successfully.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.EditDirectoryNameCommand.DialogSettings">
            <summary>
            The settings for the filename selection dialog box.
            </summary>
            <value>
            <para>This property provides access to the settings for the filename selection dialog box.</para>
            <para>The <see cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelection"/> property will be ignored.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.EditFileNameCommand">
            <summary>
            An <see cref="T:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1"/> that lets users input a filename by means of a file dialog.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.EditFileNameCommand.#ctor(TwoLayeredGUI.FileSystem.IFileDialogProvider)">
            <summary>
            initializes a new instance.
            </summary>
            <param name="guiProvider">An object that can display file dialogs.</param>
            <exception cref="T:System.ArgumentException"><paramref name="guiProvider"/> is an empty string.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.EditFileNameCommand.#ctor(TwoLayeredGUI.FileSystem.IFileDialogProvider,TwoLayeredGUI.AccessString)">
            <summary>
            Initializes a new instance with a custom display name.
            </summary>
            <param name="guiProvider">An object that can display file dialogs.</param>
            <param name="displayName">The custom display for the instance, or <see langword="null"/> if no display name is desired.</param>
            <exception cref="T:System.ArgumentException"><paramref name="guiProvider"/> is an empty string.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.EditFileNameCommand.guiProvider">
            <summary>
            An object that can display file dialogs.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.EditFileNameCommand.dialogSettings">
            <summary>
            The settings for the file selection dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.EditFileNameCommand.DialogSettings"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.EditFileNameCommand.InvokeEditor(System.String@)">
            <summary>
            Invokes the editor for a given value.
            </summary>
            <param name="value">The value to edit.
              If the changes in the editor are confirmed, the value will be replaced with the new value.</param>
            <returns>A value that indicates whether the editing operation was completed successfully.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.EditFileNameCommand.DialogSettings">
            <summary>
            The settings for the filename selection dialog box.
            </summary>
            <value>
            <para>This property provides access to the settings for the filename selection dialog box.</para>
            <para>The <see cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelection"/> property will be ignored.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileDialogMode">
            <summary>
            Defines a mode for a file dialog.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileDialogMode.Open">
            <summary>
            The purpose of the file dialog is to select one or more filenames of existing files to open.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileDialogMode.Save">
            <summary>
            The purpose of the file dialog is to select one or more filenames to save information to.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileDialogSettings">
            <summary>
            Stores settings for a file selection dialog.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileDialogSettings.title">
            <summary>
            The title of the dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.Title"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileDialogSettings.filters">
            <summary>
            The list of filename filters.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.Filters"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileDialogSettings.mode">
            <summary>
            The mode of the file dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.Mode"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileDialogSettings.initialSelection">
            <summary>
            The initially selected filename(s).
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelection"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.CreateClone">
            <summary>
            Creates a new instance of the current type that is used for the <see cref="M:TwoLayeredGUI.FileSystem.FileDialogSettings.Clone"/> operation.
            </summary>
            <returns>The new instance.</returns>
            <exception cref="T:System.NotSupportedException">This implementation of the method is called for a type that does not have a constructor with a supported signature.</exception>
            <remarks>
            <para>The default implementation creates a new instance using a parameterless constructor.
              Override this method where this is not acceptable or no such constructor exists.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The copied object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.Assign(TwoLayeredGUI.FileSystem.FileDialogSettings)">
            <summary>
            Copies the settings from another object.
            </summary>
            <param name="other">The other object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.Title">
            <summary>
            The title of the dialog box.
            </summary>
            <value>
            <para>Gets or sets the title of the dialog box.
              It can never be <see langword="null"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.Filters">
            <summary>
            The list of filename filters.
            </summary>
            <value>
            <para>Provides access to the list of file filters offered in the dialog box.
              Do not attempt to add <see langword="null"/> to this list, as it will result in an exception.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.Mode">
            <summary>
            The mode of the file dialog box.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is not a valid <see cref="T:TwoLayeredGUI.FileSystem.FileDialogMode"/> value.</exception>
            <value>
            <para>Gets or sets the mode of the file dialog box.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelection">
            <summary>
            The initially selected filename(s).
            </summary>
            <value>
            <para>This list contains the filename(s) that are initially selected when the dialog box is displayed.
              If the dialog box is just displayed to select one filename, only the first item in the list (if any) will be used.</para>
            <para>This list does not accept <see langword="null"/> as an element.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IList`1"/> for elements of type <see cref="T:TwoLayeredGUI.FileSystem.FileFilter"/> that does not accept <see langword="null"/> as an element value.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.IndexOf(TwoLayeredGUI.FileSystem.FileFilter)">
            <summary>
            Retrieves the position of an item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The position of the item, or a negative value if <paramref name="item"/> was not found in the list.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Insert(System.Int32,TwoLayeredGUI.FileSystem.FileFilter)">
            <summary>
            Inserts an item at the given position.
            </summary>
            <param name="index">The position of the new item.</param>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the given position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Add(TwoLayeredGUI.FileSystem.FileFilter)">
            <summary>
            Appends an item at the end of the list.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Contains(TwoLayeredGUI.FileSystem.FileFilter)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.CopyTo(TwoLayeredGUI.FileSystem.FileFilter[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternPart"/> cannot be cast to the item type of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Remove(TwoLayeredGUI.FileSystem.FileFilter)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the removal was successful.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Item(System.Int32)">
            <summary>
            Gets or sets an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The assigned value is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.FilterList.System#Collections#Generic#ICollection{TwoLayeredGUI#FileSystem#FileFilter}#IsReadOnly">
            <summary>
            Returns a value that indicates whether the list can be modified.
            </summary>
            <value>
            <para>This implementation always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList">
            <summary>
            The class that stores the items that represent the initial selection.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.IndexOf(System.String)">
            <summary>
            Retrieves the position of an item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The position of the item, or a negative value if <paramref name="item"/> was not found in the list.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Insert(System.Int32,System.String)">
            <summary>
            Inserts an item at the given position.
            </summary>
            <param name="index">The position of the new item.</param>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the given position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Add(System.String)">
            <summary>
            Appends an item at the end of the list.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Contains(System.String)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternPart"/> cannot be cast to the item type of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Remove(System.String)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the removal was successful.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Item(System.Int32)">
            <summary>
            Gets or sets an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The assigned value is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileDialogSettings.InitialSelectionList.System#Collections#Generic#ICollection{System#String}#IsReadOnly">
            <summary>
            Returns a value that indicates whether the list can be modified.
            </summary>
            <value>
            <para>This implementation always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileExistsValidator">
            <summary>
            A string validator that checks whether the string represents the name of an existing file.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileExistsValidator.#ctor">
            <summary>
            Initializes a new instance that requires the existence of a file.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileExistsValidator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="requireExistence">A value that determines whether the existence of the file is required.</param>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileExistsValidator.RequireExistence"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileExistsValidator.DefaultExistenceMessage">
            <summary>
            The default value for the <see cref="P:TwoLayeredGUI.FileSystem.FileExistsValidator.ExistenceMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileExistsValidator.existenceMessage">
            <summary>
            The message to show when the file that is required to be absent is existing.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileExistsValidator.ExistenceMessage"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileExistsValidator.DefaultAbsenceMessage">
            <summary>
            The default value for the <see cref="P:TwoLayeredGUI.FileSystem.FileExistsValidator.AbsenceMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileExistsValidator.absenceMessage">
            <summary>
            The message to show when the file that is required to exist is missing.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileExistsValidator.AbsenceMessage"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileExistsValidator.requireExistence">
            <summary>
            Determines whether the validator requires the existence or the absence of a file.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileExistsValidator.RequireExistence"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileExistsValidator.DoValidate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.String})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.
              This cannot be <see langword="null"/>.</param>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileExistsValidator.ExistenceMessage">
            <summary>
            The message to show when the file that is required to be absent is existing.
            </summary>
            <value>
            <para>Gets or sets the message to show when the file that is required to be absent is existing.
              The following <see cref="M:System.String.Format(System.String,System.Object[])"/> arguments may be used:</para>
            <list type="table">
              <listheader>
                <term>Index</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><c>0</c></term>
                <description>The validated string.</description>
              </item>
            </list>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileExistsValidator.AbsenceMessage">
            <summary>
            The message to show when the file that is required to exist is missing.
            </summary>
            <value>
            <para>Gets or sets the message to show when the file that is required to exist is missing.
              The following <see cref="M:System.String.Format(System.String,System.Object[])"/> arguments may be used:</para>
            <list type="table">
              <listheader>
                <term>Index</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><c>0</c></term>
                <description>The validated string.</description>
              </item>
            </list>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileExistsValidator.RequireExistence">
            <summary>
            Determines whether the validator requires the existence or the absence of a file.
            </summary>
            <value>
            <para>Gets or sets a value that determines whether the existence of a file is required.
              The default value is <see langword="true"/>.</para>
            <para>If this property is <see langword="true"/>, the validator will output an error message if the validated string does not denote an existing file.
              If this property is <see langword="true"/>, the validator will output an error message if a file with the name indicated by the validated string is already existing.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileFilter">
            <summary>
            Defines a basic file filter.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance with a human-readable name.
            </summary>
            <param name="displayName">The human-readable name for the filter.
              If <see langword="null"/> is supplied here, the name will be set to an emptry string.</param>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.#ctor(System.String,System.Collections.Generic.IEnumerable{TwoLayeredGUI.FileSystem.FileNamePattern})">
            <summary>
            Initializes a new instance with a human-readable name and some filename patterns.
            </summary>
            <param name="displayName">The human-readable name for the filter.
              If <see langword="null"/> is supplied here, the name will be set to an emptry string.</param>
            <param name="patterns">An enumeration of filename patterns.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="patterns"/>, or any of its elements, is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.#ctor(System.String,TwoLayeredGUI.FileSystem.FileNamePattern,TwoLayeredGUI.FileSystem.FileNamePattern[])">
            <summary>
            Initializes a new instance with a human-readable name and some filename patterns.
            </summary>
            <param name="displayName">The human-readable name for the filter.
              If <see langword="null"/> is supplied here, the name will be set to an emptry string.</param>
            <param name="firstPattern">The first filename pattern.</param>
            <param name="morePatterns">An array that may contain more filename patterns.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstPattern"/>, <paramref name="morePatterns"/>, or any of its elements, is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance with a human-readable name and some filename patterns based on file extensions.
            </summary>
            <param name="displayName">The human-readable name for the filter.
              If <see langword="null"/> is supplied here, the name will be set to an emptry string.</param>
            <param name="extensions">An enumeration of file extensions (without the leading dot).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="extensions"/>, or any of its elements, is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance with a human-readable name and some filename patterns based on file extensions.
            </summary>
            <param name="displayName">The human-readable name for the filter.
              If <see langword="null"/> is supplied here, the name will be set to an emptry string.</param>
            <param name="firstExtension">The first file extension (without the leading dot).</param>
            <param name="moreExtensions">An array that may contain more file extensions (without the leading dot).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstExtension"/>, <paramref name="moreExtensions"/>, or any of its elements, is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileFilter.displayName">
            <summary>
            The human-readable name of the filter.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileFilter.DisplayName"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileFilter.patterns">
            <summary>
            The list of filename patterns associated with the filter.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileFilter.Patterns"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.ToString(TwoLayeredGUI.FileSystem.FileFilterStringSettings)">
            <summary>
            Returns a string representation of the object based on a settings object.
            </summary>
            <param name="settings">The object that stores the settings for the conversion.</param>
            <returns>The string representation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The newly created copy.</returns>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileFilter.allFilesFilter">
            <summary>
            A filter for all files.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileFilter.AllFilesFilter"/>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileFilter.DisplayName">
            <summary>
            The human-readable name of the filter.
            </summary>
            <value>
            <para>Gets or sets a human-readable name of the filter.
              When the filter is displayed in a list of filters, this name can be used to represent the filter.</para>
            <para>This property cannot become <see langword="null"/>.
              If <see langword="null"/> is assigned, the property will be set to an empty string.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileFilter.Patterns">
            <summary>
            The list of filename patterns associated with the filter.
            </summary>
            <value>
            <para>Gets the list of filename patterns associated with the filter.
              Only filenames matching one of these patterns will be accepted by the filter.</para>
            <para>This list does not accept <see langword="null"/>.
              When <see langword="null"/> is inserted, an exception will be thrown.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileFilter.AllFilesFilter">
            <summary>
            A filter for all files.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileFilter.PatternList">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IList`1"/> for elements of type <see cref="T:TwoLayeredGUI.FileSystem.FileNamePattern"/> that does not accept <see langword="null"/> as an element value.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileFilter.PatternList.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.IndexOf(TwoLayeredGUI.FileSystem.FileNamePattern)">
            <summary>
            Retrieves the position of an item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The position of the item, or a negative value if <paramref name="item"/> was not found in the list.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Insert(System.Int32,TwoLayeredGUI.FileSystem.FileNamePattern)">
            <summary>
            Inserts an item at the given position.
            </summary>
            <param name="index">The position of the new item.</param>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the given position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Add(TwoLayeredGUI.FileSystem.FileNamePattern)">
            <summary>
            Appends an item at the end of the list.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Contains(TwoLayeredGUI.FileSystem.FileNamePattern)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.CopyTo(TwoLayeredGUI.FileSystem.FileNamePattern[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternPart"/> cannot be cast to the item type of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Remove(TwoLayeredGUI.FileSystem.FileNamePattern)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the removal was successful.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilter.PatternList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Item(System.Int32)">
            <summary>
            Gets or sets an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The assigned value is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileFilter.PatternList.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileFilter.PatternList.System#Collections#Generic#ICollection{TwoLayeredGUI#FileSystem#FileNamePattern}#IsReadOnly">
            <summary>
            Returns a value that indicates whether the list can be modified.
            </summary>
            <value>
            <para>This implementation always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileFilterStringSettings">
            <summary>
            Stores some settings that determine how a <see cref="T:TwoLayeredGUI.FileSystem.FileFilter"/> is represented as a string.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileFilterStringSettings.DefaultTextFormat">
            <summary>
            Provides a default text format for file filter strings.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.TextFormat"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileFilterStringSettings.textFormat">
            <summary>
            The text format for the file filter string.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.TextFormat"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileFilterStringSettings.DefaultPatternDelimiter">
            <summary>
            Provides a default value for the <see cref="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.PatternDelimiter"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileFilterStringSettings.patternDelimiter">
            <summary>
            The delimiter displayed between each consecutive pair of filename patterns.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.PatternDelimiter"/>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileFilterStringSettings.patternConverter">
            <summary>
            The object used to transform filename patterns into strings.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.PatternConverter"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileFilterStringSettings.GenerateString(TwoLayeredGUI.FileSystem.FileFilter)">
            <summary>
            Generates a string for a given <see cref="T:TwoLayeredGUI.FileSystem.FileFilter"/> object based on the settings in the current instance.
            </summary>
            <param name="filter">The file filter to convert to a string.</param>
            <returns>A string representation based on the settings in the current instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filter"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException">The value of the <see cref="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.TextFormat"/> property is an invalid <see cref="M:System.String.Format"/> string.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.TextFormat">
            <summary>
            The text format for the file filter string.
            </summary>
            <value>
            <para>Gets or sets the text format for the file filter string.
              You can use the following <see cref="M:System.String.Format"/> arguments:</para>
            <list type="table">
              <listheader>
                <term>Argument Index</term>
                <value>Meaning</value>
              </listheader>
              <item>
                <term><c>0</c></term>
                <value>The human-readable filter name.
                  This value will be retrieved from the <see cref="P:TwoLayeredGUI.FileSystem.FileFilter.DisplayName"/> property of the <see cref="T:TwoLayeredGUI.FileSystem.FileFilter"/> class.</value>
              </item>
              <item>
                <term><c>1</c></term>
                <value>A concatenated representation of the associated filename patterns.
                  Assign a value to the <see cref="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.PatternConverter"/> property to customize the representation of filename patterns.
                  In order to modify the way several patterns are concatenated, assign a custom value to the <see cref="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.PatternDelimiter"/> property.</value>
              </item>
            </list>
            </value>
            <see cref="F:TwoLayeredGUI.FileSystem.FileFilterStringSettings.DefaultTextFormat"/>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.PatternDelimiter">
            <summary>
            The delimiter displayed between each consecutive pair of filename patterns.
            </summary>
            <value>
            <para>When string representations of the <see cref="P:TwoLayeredGUI.FileSystem.FileFilter.Patterns"/> of <see cref="T:TwoLayeredGUI.FileSystem.FileFilter"/> are concatenated, the value of this property will be inserted between each consecutive pair of filename patterns.
              If this property is <see langword="null"/>, nothing will be inserted.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileFilterStringSettings.PatternConverter">
            <summary>
            The object used to transform filename patterns into strings.
            </summary>
            <value>
            <para>Gets or sets an object that transforms filename patterns into strings.
              If this property is <see langword="null"/>, the <see cref="M:TwoLayeredGUI.FileSystem.FileNamePattern.ToString"/> method will be called on each pattern.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileNamePattern">
            <summary>
            Defines a filename matching pattern.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.#ctor(System.Collections.Generic.IEnumerable{TwoLayeredGUI.FileSystem.FileNamePatternPart})">
            <summary>
            Initializes a new instance with a list of pattern parts.
            </summary>
            <param name="parts">The parts to add to the new instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parts"/>, or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.#ctor(TwoLayeredGUI.FileSystem.FileNamePatternPart,TwoLayeredGUI.FileSystem.FileNamePatternPart[])">
            <summary>
            Initializes a new instance with a list of pattern parts.
            </summary>
            <param name="firstPart">The first pattern part to add.</param>
            <param name="moreParts">More pattern parts to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstPart"/>, <paramref name="moreParts"/>, or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.#ctor(System.String)">
            <summary>
            Initializes a new instance based on a file extension.
            </summary>
            <param name="extension">The file extension (without the leading dot).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="extension"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a new instance based on a file extension.
              The pattern will match the glob pattern <c>*.extension</c>.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileNamePattern.parts">
            <summary>
            The list of parts in the pattern.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.ToString">
            <summary>
            Returns a default string representation of the filename pattern.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The newly created copy.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileNamePattern.Parts">
            <summary>
            The list of parts in the pattern.
            </summary>
            <value>
            <para>Gets the list of parts in the filename pattern.
              Adding <see langword="null"/> to this list will result in an <see cref="T:System.ArgumentNullException"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileNamePattern.PartList">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IList`1"/> for elements of type <see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternPart"/> that does not accept <see langword="null"/> as an element value.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.IndexOf(TwoLayeredGUI.FileSystem.FileNamePatternPart)">
            <summary>
            Retrieves the position of an item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The position of the item, or a negative value if <paramref name="item"/> was not found in the list.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Insert(System.Int32,TwoLayeredGUI.FileSystem.FileNamePatternPart)">
            <summary>
            Inserts an item at the given position.
            </summary>
            <param name="index">The position of the new item.</param>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the given position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Add(TwoLayeredGUI.FileSystem.FileNamePatternPart)">
            <summary>
            Appends an item at the end of the list.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Contains(TwoLayeredGUI.FileSystem.FileNamePatternPart)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.CopyTo(TwoLayeredGUI.FileSystem.FileNamePatternPart[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternPart"/> cannot be cast to the item type of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Remove(TwoLayeredGUI.FileSystem.FileNamePatternPart)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the removal was successful.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Item(System.Int32)">
            <summary>
            Gets or sets an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The assigned value is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileNamePattern.PartList.System#Collections#Generic#ICollection{TwoLayeredGUI#FileSystem#FileNamePatternPart}#IsReadOnly">
            <summary>
            Returns a value that indicates whether the list can be modified.
            </summary>
            <value>
            <para>This implementation always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1">
            <summary>
            Converts a <see cref="T:TwoLayeredGUI.FileSystem.FileNamePattern"/> into a specialized form.
            </summary>
            <typeparam name="TResult">The type that results from the conversion.</typeparam>
            <remarks>
            <para>Subclasses of this class convert instances of type <see cref="T:TwoLayeredGUI.FileSystem.FileNamePattern"/> to a form specialized for a particular system or library.
              This form can be a specially formatted <see cref="T:System.String"/>, or any other data type.
              Indicate that resulting type in the <typeparamref name="TResult"/> type argument.</para>
            <para>For subclasses, the <see cref="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.ConvertPart(TwoLayeredGUI.FileSystem.FileNamePatternPart,`0)"/> method has to be implemented.
              It translates a <see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternPart"/></para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.Convert(TwoLayeredGUI.FileSystem.FileNamePattern)">
            <summary>
            Converts a filename pattern to a specialized format that can be used with a given system or library.
            </summary>
            <param name="pattern">The filename pattern to convert.</param>
            <returns>The converted pattern.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The conversion could not be completed.</exception>
            <remarks>
            <para>This method converts a filename pattern to the specialized format supported by the instantiated subclass of <see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1"/>.
              The overridden version of the <see cref="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.ConvertPart(TwoLayeredGUI.FileSystem.FileNamePatternPart,`0)"/> method will be invoked in order to convert each part in <paramref name="pattern"/>.
              If possible, make sure to check the documentation on the employed implementation to find out about restrictions of the implementation being used.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.BeginConversion">
            <summary>
            Initializes members of the object before starting a conversion process.
            </summary>
            <remarks>
            <para>This method is invoked right before a conversion process is started.
              Subclasses can override it to execute initialization code that has to run before a new conversion starts.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.EndConversion"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.EndConversion">
            <summary>
            Finalizes members of the object before starting a conversion process.
            </summary>
            <remarks>
            <para>This method is invoked right after a filename pattern has been converted.
              Subclasses can override it to execute finalization code that has to run after a conversion has terminated.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.BeginConversion"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.ConvertPart(TwoLayeredGUI.FileSystem.FileNamePatternPart,`0)">
            <summary>
            Converts a part of a filename pattern into a specialized form.
            </summary>
            <param name="part">The part to convert.
              This will not be <see langword="null"/>.</param>
            <param name="prefix">The conversion result obtained so far, based on the previous filename pattern parts.</param>
            <returns>The conversion result, including the converted current filename pattern part.</returns>
            <exception cref="T:System.Exception"><paramref name="part"/> cannot be converted.</exception>
            <remarks>
            <para>This method converts a part of a filename pattern into a specialized form and appends the result of the conversion to the previous result.
              The return value combines <paramref name="prefix"/> with the converted <paramref name="part"/>.</para>
            <para>Note that <paramref name="prefix"/> is initialized to the default value of <typeparamref name="TResult"/> when starting a conversion.
              Hence, when this method is invoked for the very first part of a given <see cref="T:TwoLayeredGUI.FileSystem.FileNamePattern"/>, <paramref name="prefix"/> will be the default value of <typeparamref name="TResult"/>.
              If an additional marker is required to determine that a new conversion operation has begun, add a new field in a subclass and override the <see cref="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.BeginConversion"/> method.</para>
            <para>If an implementation cannot process a given pattern part, an arbitrary exception may be thrown.
              The <see cref="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.RejectPart(TwoLayeredGUI.FileSystem.FileNamePatternPart)"/> method can be used to throw an exception with a pre-defined error message.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.RejectPart(TwoLayeredGUI.FileSystem.FileNamePatternPart)">
            <summary>
            Throws an exception that expresses how a filename pattern part will not be processed.
            </summary>
            <param name="part">The part to reject.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="part"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The method is invoked.</exception>
            <remarks>
            <para>This is a courtesy method for throwing an exception during the <see cref="M:TwoLayeredGUI.FileSystem.FileNamePatternConverter`1.ConvertPart(TwoLayeredGUI.FileSystem.FileNamePatternPart,`0)"/> method.
              The exception message will contain some information about the converter class and the pattern part class.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileNamePatternLiteralPart">
            <summary>
            A part of a filename pattern that can match only a particular literal.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileNamePatternPart">
            <summary>
            Represents a part of a <see cref="T:TwoLayeredGUI.FileSystem.FileNamePattern"/>.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternPart.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>
            <para>This constructor is marked as <see langword="internal"/> as custom subclasses defined in other libraries are not desired.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternPart.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The newly created copy.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternLiteralPart.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternLiteralPart.#ctor(System.String)">
            <summary>
            Initializes a new instance with a literal value.
            </summary>
            <param name="literal">The literal value represented by the new instance.
              If this is <see langword="null"/>, it will be replaced with an empty string.</param>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileNamePatternLiteralPart.literal">
            <summary>
            The literal value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileNamePatternLiteralPart.Literal"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternLiteralPart.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternLiteralPart.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The newly created copy.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileNamePatternLiteralPart.Literal">
            <summary>
            The literal value.
            </summary>
            <value>
            <para>Gets or sets the literal string value represented by this pattern part.
              This cannot be <see langword="null"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileNamePatternUtilities">
            <summary>
            This class provides a number of utility methods for using the <see cref="T:TwoLayeredGUI.FileSystem.FileNamePattern"/> class and related types.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternUtilities.AddLiteral(System.Collections.Generic.ICollection{TwoLayeredGUI.FileSystem.FileNamePatternPart},System.String)">
            <summary>
            Adds a <see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternLiteralPart"/> to a collection of <see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternPart"/> instances.
            </summary>
            <param name="collection">The collection.</param>
            <param name="literal">The text represented by the literal part.
              If set to <see langword="null"/>, an empty string will be added.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternUtilities.AddWildcard(System.Collections.Generic.ICollection{TwoLayeredGUI.FileSystem.FileNamePatternPart},System.Boolean)">
            <summary>
            Adds a <see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart"/> to a collection of <see cref="T:TwoLayeredGUI.FileSystem.FileNamePatternPart"/> instances.
            </summary>
            <param name="collection">The collection.</param>
            <param name="anyNumber">Sets the value of the <see cref="P:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart.AnyNumber"/> property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart">
            <summary>
            A part of a filename pattern that can match one or more arbitrary characters.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance and assigns an initial value to the <see cref="P:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart.AnyNumber"/> property.
            </summary>
            <param name="anyNumber">Indicates whether any number of characters is matched by this part.</param>
        </member>
        <member name="F:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart.anyNumber">
            <summary>
            Indicates whether any number of characters is matched by this part.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart.AnyNumber"/>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The newly created copy.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FileSystem.FileNamePatternWildcardPart.AnyNumber">
            <summary>
            Indicates whether any number of characters is matched by this part.
            </summary>
            <value>
            <para>This property determines whether any number of characters is matched by this part.
              When set to <see langword="true"/>, the part matches zero to an unlimited number of arbitrary characters.
              When set to <see langword="false"/>, the part matches exactly one arbitrary character.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.GlobStyleConverter">
            <summary>
            A filename pattern converter that creates glob style patterns.
            </summary>
            <remarks>
            <para>This class converts filename patterns to strings that match glob style patterns.</para>
            <note type="caution">This class does not escape string literals.
              Be aware of this when string literals in any of your filename patterns might contain special characters.</note>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.GlobStyleConverter.ConvertPart(TwoLayeredGUI.FileSystem.FileNamePatternPart,System.String)">
            <summary>
            Converts a part of a filename pattern into a specialized form.
            </summary>
            <param name="part">The part to convert.
              This will not be <see langword="null"/>.</param>
            <param name="prefix">The conversion result obtained so far, based on the previous filename pattern parts.</param>
            <returns>The conversion result, including the converted current filename pattern part.</returns>
            <exception cref="T:System.Exception"><paramref name="part"/> cannot be converted.</exception>
            <remarks>
            <para>This method converts a filename pattern into a glob-style-like representation.</para>
            <note type="caution">This method does not escape string literals.
              Be aware of this when string literals in any of your filename patterns might contain special characters.</note>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.IDirectoryDialogProvider">
            <summary>
            An interface for objects that can display directory selection dialog boxes.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.IDirectoryDialogProvider.SelectDirectory(TwoLayeredGUI.FileSystem.DirectoryDialogSettings)">
            <summary>
            Displays a dialog box where the user can select a directory path.
            </summary>
            <param name="settings">The settings for the dialog box.</param>
            <returns>The selected directory path, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.IFileDialogProvider">
            <summary>
            An interface for objects that can display file dialog boxes.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.IFileDialogProvider.SelectFile(TwoLayeredGUI.FileSystem.FileDialogSettings)">
            <summary>
            Displays a dialog box where the user can select one filename.
            </summary>
            <param name="settings">The settings for the dialog box.</param>
            <returns>The selected filename, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.IFileDialogProvider.SelectFiles(TwoLayeredGUI.FileSystem.FileDialogSettings)">
            <summary>
            Displays a dialog box where the user can select one or more filenames.
            </summary>
            <param name="settings">The settings for the dialog box.</param>
            <returns>The selected filenames, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.NamespaceDoc">
            <summary>
            This namespaces contains types for basic file system-related user interface elements.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FileSystem.RegexConverter">
            <summary>
            A filename pattern converter that creates regular expression strings.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FileSystem.RegexConverter.ConvertPart(TwoLayeredGUI.FileSystem.FileNamePatternPart,System.String)">
            <summary>
            Converts a part of a filename pattern into a specialized form.
            </summary>
            <param name="part">The part to convert.
              This will not be <see langword="null"/>.</param>
            <param name="prefix">The conversion result obtained so far, based on the previous filename pattern parts.</param>
            <returns>The conversion result, including the converted current filename pattern part.</returns>
            <exception cref="T:System.Exception"><paramref name="part"/> cannot be converted.</exception>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.FlowAlignment">
            <summary>
            Specifies the alignment of a flow layout.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowAlignment.Start">
            <summary>
            Aligned at the start of the alignment area.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowAlignment.Center">
            <summary>
            Aligned in the middle of the alignment area.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowAlignment.End">
            <summary>
            Aligned at the end of the alignment area.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.FlowItemWithPosition`1">
            <summary>
            Stores a <see cref="T:TwoLayeredGUI.FlowView.IFlowItemInLine`1"/> with a location.
            </summary>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
            <remarks>
            <para>This class represents a flow item that has been assigned to a line in a flow layout.
              In addition to that, it stores some information that indicates the space occupied by the item when positioned according to the layout.
              This information can be used to draw the item, but also to determine whether an item is selected when pointing to a certain location in the flow layout area.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.#ctor(TwoLayeredGUI.FlowView.IFlowItemInLine{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="item">The flow item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.item">
            <summary>
            The flow item as it appears in the line.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.Item"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.x">
            <summary>
            The horizontal position of the item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.X"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.y">
            <summary>
            The vertical position of the item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.Y"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.width">
            <summary>
            The width of the item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.Width"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.height">
            <summary>
            The height of the item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.Height"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.completeX">
            <summary>
            The horizontal position of the rectangle that spans the whole selection area of the flow item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.CompleteX"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.completeY">
            <summary>
            The vertical position of the rectangle that spans the whole selection area of the flow item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.CompleteY"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.completeWidth">
            <summary>
            The width of the rectangle that spans the whole selection area of the flow item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.CompleteWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.completeHeight">
            <summary>
            The height of the rectangle that spans the whole selection area of the flow item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.CompleteHeight"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.beforeX">
            <summary>
            The horizontal position of the rectangle that spans the selection area which is evaluated as <i>before the flow item</i>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.BeforeX"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.beforeY">
            <summary>
            The vertical position of the rectangle that spans the selection area which is evaluated as <i>before the flow item</i>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.BeforeY"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.beforeWidth">
            <summary>
            The width of the rectangle that spans the selection area which is evaluated as <i>before the flow item</i>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.BeforeWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.beforeHeight">
            <summary>
            The height of the rectangle that spans the selection area which is evaluated as <i>before the flow item</i>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.BeforeHeight"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.afterX">
            <summary>
            The horizontal position of the rectangle that spans the selection area which is evaluated as <i>after the flow item</i>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.AfterX"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.afterY">
            <summary>
            The vertical position of the rectangle that spans the selection area which is evaluated as <i>after the flow item</i>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.AfterY"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.afterWidth">
            <summary>
            The width of the rectangle that spans the selection area which is evaluated as <i>after the flow item</i>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.AfterWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.afterHeight">
            <summary>
            The height of the rectangle that spans the selection area which is evaluated as <i>after the flow item</i>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.AfterHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.Item">
            <summary>
            The flow item as it appears in the line.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.X">
            <summary>
            The horizontal position of the item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.Y">
            <summary>
            The vertical position of the item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.Width">
            <summary>
            The width of the item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.Height">
            <summary>
            The height of the item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.CompleteX">
            <summary>
            The horizontal position of the rectangle that spans the whole selection area of the flow item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.CompleteY">
            <summary>
            The vertical position of the rectangle that spans the whole selection area of the flow item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.CompleteWidth">
            <summary>
            The width of the rectangle that spans the whole selection area of the flow item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.CompleteHeight">
            <summary>
            The height of the rectangle that spans the whole selection area of the flow item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.BeforeX">
            <summary>
            The horizontal position of the rectangle that spans the selection area which is evaluated as <i>before the flow item</i>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.BeforeY">
            <summary>
            The vertical position of the rectangle that spans the selection area which is evaluated as <i>before the flow item</i>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.BeforeWidth">
            <summary>
            The width of the rectangle that spans the selection area which is evaluated as <i>before the flow item</i>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.BeforeHeight">
            <summary>
            The height of the rectangle that spans the selection area which is evaluated as <i>before the flow item</i>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.AfterX">
            <summary>
            The horizontal position of the rectangle that spans the selection area which is evaluated as <i>after the flow item</i>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.AfterY">
            <summary>
            The vertical position of the rectangle that spans the selection area which is evaluated as <i>after the flow item</i>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.AfterWidth">
            <summary>
            The width of the rectangle that spans the selection area which is evaluated as <i>after the flow item</i>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowItemWithPosition`1.AfterHeight">
            <summary>
            The height of the rectangle that spans the selection area which is evaluated as <i>after the flow item</i>.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.FlowManager`1">
            <summary>
            This class provides methods that place flow items in lines.
            </summary>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
            <remarks>
            <para>This class can be used to distribute flow items to several lines and compute their positions.
              Use the <see cref="M:TwoLayeredGUI.FlowView.FlowManager`1.MakeLines(System.Double,TwoLayeredGUI.FlowView.IFlowSizeProvider{`0},System.Collections.Generic.IEnumerable{`0})"/> method to sort flow items to lines.
              Subsequently, the <see cref="M:TwoLayeredGUI.FlowView.FlowManager`1.GetLineIndentations(TwoLayeredGUI.FlowView.IFlowLines{`0},System.Double)"/> method can be used to retrieve the indentation for each line based on the <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.Alignment"/>.
              This indentation can be passed to the <see cref="M:TwoLayeredGUI.FlowView.FlowManager`1.PlaceItems(System.Double,TwoLayeredGUI.FlowView.IFlowLines{`0},System.Double[])"/> method.
              Alternatively, the <see cref="M:TwoLayeredGUI.FlowView.FlowManager`1.PlaceItems(System.Double,TwoLayeredGUI.FlowView.IFlowLines{`0})"/> method can be used directly to retrieve the final position and size of each item.
              It will internally compute the indentations of the lines.
              A shortcut overload of that method, <see cref="M:TwoLayeredGUI.FlowView.FlowManager`1.PlaceItems(System.Double,TwoLayeredGUI.FlowView.IFlowSizeProvider{`0},System.Collections.Generic.IEnumerable{`0})"/>, exists for situations where you definitely know the maximum available area beforehand.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.AddItemToLine(TwoLayeredGUI.FlowView.FlowManager{`0}.FlowLine,TwoLayeredGUI.FlowView.FlowManager{`0}.FlowItemInLine,TwoLayeredGUI.FlowView.IFlowSizeProvider{`0})">
            <summary>
            Adds an item to a line in the flow layout view.
            </summary>
            <param name="line">The line.</param>
            <param name="item">The item to add.</param>
            <param name="renderer">The renderer used to determine the item size.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.MakeLines(System.Double,TwoLayeredGUI.FlowView.IFlowSizeProvider{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sorts some items into lines.
            </summary>
            <param name="maxLength">The maximum length of each of the lines.</param>
            <param name="sizeProvider">The object used to determine the sizes of the items.</param>
            <param name="items">The items to sort into lines.</param>
            <returns>An object that describes the positions of the items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sizeProvider"/>, <paramref name="items"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.alignment">
            <summary>
            The alignment of lines in the line direction.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.Alignment"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.GetLineIndentations(TwoLayeredGUI.FlowView.IFlowLines{`0},System.Double)">
            <summary>
            Computes the indentations of each line in the line direction.
            </summary>
            <param name="lines">The lines to indent.</param>
            <param name="availableLength">The space available for the lines in the line direction.</param>
            <returns>An array that contains an indentation for every line in <paramref name="lines"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lines"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method computes the indentations of lines in the line direction, based on the value of the <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.Alignment"/> property.
              The resulting value is an array that contains the indentations.
              The array has one element for each line in <paramref name="lines"/>, or zero entries if <paramref name="lines"/> does not contain any lines.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.Alignment"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.lineSpacing">
            <summary>
            The distance between individual lines of the flow layout view.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.LineSpacing"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.itemSpacing">
            <summary>
            The distance between items in the flow layout view.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.ItemSpacing"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.PlaceItem(TwoLayeredGUI.FlowView.IFlowItemInLine{`0},System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Computes the exact location of a flow item.
            </summary>
            <param name="item">The item to place.
              This must not be <see langword="null"/>.</param>
            <param name="offset">The offset of the item (displacement along the line direction).</param>
            <param name="lineOffset">The offset of the line (displacement perpendicular to the line direction).</param>
            <param name="maxLength">The maximum available line length.</param>
            <param name="lineSize">The maximum available size of the line (perpendicular to the line direction).</param>
            <param name="firstOnLine">Indicates whether <paramref name="item"/> is the first item on the line.</param>
            <param name="lastOnLine">Indicates whether <paramref name="item"/> is the last item on the line.</param>
            <param name="firstLine">Indicates whether <paramref name="item"/> is in the first line.</param>
            <param name="lastLine">Indicates whether <paramref name="item"/> is in the last line.</param>
            <returns>The placed flow item.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.PlaceItemsInLine(System.Collections.Generic.IList{TwoLayeredGUI.FlowView.FlowItemWithPosition{`0}},TwoLayeredGUI.FlowView.IFlowLine{`0},System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Computes the exact locations of flow items on one line.
            </summary>
            <param name="result">The resulting list of flow items with positions.
              This must not be <see langword="null"/>.</param>
            <param name="line">The line that contains the items to place.
              This must not be <see langword="null"/>.</param>
            <param name="lineIndentation">The indentation of the line (displacement along the line direction).</param>
            <param name="lineOffset">The offset of the line (displacement perpendicular to the line direction).</param>
            <param name="maxLength">The maximum available length of the line.</param>
            <param name="firstLine">Indicates whether <paramref name="line"/> is the first line.</param>
            <param name="lastLine">Indicates whether <paramref name="line"/> is the last line.</param>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.PlaceItems(System.Double,TwoLayeredGUI.FlowView.IFlowLines{`0},System.Double[])">
            <summary>
            Computes the exact locations of flow items distributed onto one or more lines with custom indentations.
            </summary>
            <param name="maxLength">The maximum available line length.</param>
            <param name="lines">The lines.</param>
            <param name="lineIndentations">The indentations of the lines.</param>
            <returns>An array that specifies the locations of the flow items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lines"/>, any of the contained lines or items or <paramref name="lineIndentations"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of lines in <paramref name="lines"/> is greater than the number of line indentations in <paramref name="lineIndentations"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.PlaceItems(System.Double,TwoLayeredGUI.FlowView.IFlowSizeProvider{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Computes the exact locations of flow items.
            </summary>
            <param name="maxLength">The maximum available line length.</param>
            <param name="sizeProvider">The object used to determine the sizes of the items.</param>
            <param name="items">The items to place.</param>
            <returns>An array that specifies the locations of the flow items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sizeProvider"/> or <paramref name="items"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.PlaceItems(System.Double,TwoLayeredGUI.FlowView.IFlowLines{`0})">
            <summary>
            Computes the exact locations of flow items distributed onto one or more lines.
            </summary>
            <param name="maxLength">The maximum available line length.</param>
            <param name="lines">The lines.</param>
            <returns>An array that specifies the locations of the flow items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lines"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.orientation">
            <summary>
            The orientation of the flow layout.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.Orientation"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.lineOrder">
            <summary>
            An object that can modify the order of the lines in the flow layout.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.LineOrder"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.ReorderLines(System.Collections.Generic.IEnumerable{TwoLayeredGUI.FlowView.IIndentedFlowLine{`0}})">
            <summary>
            Reorders lines according to the value of the <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.LineOrder"/> property.
            </summary>
            <param name="lines">The enumeration of lines in their original order.</param>
            <returns>The reordered lines.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lines"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.itemOrder">
            <summary>
            An object that can modify the order of the items in each line in the flow layout.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.ItemOrder"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.ReorderItems(System.Collections.Generic.IEnumerable{TwoLayeredGUI.FlowView.IFlowItemInLine{`0}})">
            <summary>
            Reorders items according to the value of the <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.ItemOrder"/> property.
            </summary>
            <param name="items">The enumeration of items in their original order.</param>
            <returns>The reordered items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.Alignment">
            <summary>
            The alignment of lines in the line direction.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is not a valid <see cref="T:TwoLayeredGUI.FlowView.FlowAlignment"/> value.</exception>
            <seealso cref="M:TwoLayeredGUI.FlowView.FlowManager`1.GetLineIndentations(TwoLayeredGUI.FlowView.IFlowLines{`0},System.Double)"/>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.LineSpacing">
            <summary>
            The distance between individual lines of the flow layout view.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.ItemSpacing">
            <summary>
            The distance between items in the flow layout view.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.Orientation">
            <summary>
            The orientation of the flow layout.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is not a valid <see cref="T:TwoLayeredGUI.FlowView.FlowOrientation"/> value.</exception>
            <value>
            <para>This property controls how lines in the flow layout should be aligned.
              When set to <see cref="F:TwoLayeredGUI.FlowView.FlowOrientation.Horizontal"/>, lines will flow horizontally, otherwise, they will flow vertically.
              The default value is <see cref="F:TwoLayeredGUI.FlowView.FlowOrientation.Horizontal"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.LineOrder">
            <summary>
            An object that can modify the order of the lines in the flow layout.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.ItemOrder">
            <summary>
            An object that can modify the order of the items in each line in the flow layout.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine">
            <summary>
            A single flow item (or portion thereof) in a line of a flow view.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.IFlowItemInLine`1">
            <summary>
            A single flow item (or portion thereof) in a line of a flow view.
            </summary>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItemInLine`1.Item">
            <summary>
            The actual flow item object.
            </summary>
            <value>
            <para>This property provides access to the underlying <see cref="T:TwoLayeredGUI.FlowView.IFlowItem"/> instance.
              It must never be <see langword="null"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItemInLine`1.FirstPart">
            <summary>
            The first part of <see cref="P:TwoLayeredGUI.FlowView.IFlowItemInLine`1.Item"/> being considered.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItemInLine`1.LastPart">
            <summary>
            The last part of <see cref="P:TwoLayeredGUI.FlowView.IFlowItemInLine`1.Item"/> being considered.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItemInLine`1.Position">
            <summary>
            The offset in the line direction.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItemInLine`1.Length">
            <summary>
            The length of the item in the line direction.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItemInLine`1.PositionInLine">
            <summary>
            The offset in the direction that is perpendicular to the line direction.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItemInLine`1.SizeInLine">
            <summary>
            The size of the item in the direction that is perpendicular to the line direction.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.#ctor(`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="item">The underlying <see cref="T:TwoLayeredGUI.FlowView.IFlowItem"/> instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.item">
            <summary>
            The actual flow item object.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Item"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.firstPart">
            <summary>
            The first part of <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Item"/> being considered.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.FirstPart"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.lastPart">
            <summary>
            The last part of <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Item"/> being considered.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.LastPart"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.position">
            <summary>
            The offset in the line direction.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Position"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.length">
            <summary>
            The length of the item in the line direction.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Length"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.positionInLine">
            <summary>
            The offset in the direction that is perpendicular to the line direction.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.PositionInLine"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.sizeInLine">
            <summary>
            The size of the item in the direction that is perpendicular to the line direction.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.SizeInLine"/>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Item">
            <summary>
            The actual flow item object.
            </summary>
            <value>
            <para>This property provides access to the underlying <see cref="T:TwoLayeredGUI.FlowView.IFlowItem"/> instance.
              It must never be <see langword="null"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.FirstPart">
            <summary>
            The first part of <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Item"/> being considered.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is not within the range of valid part indices for <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Item"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.LastPart">
            <summary>
            The last part of <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Item"/> being considered.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is not within the range of valid part indices for <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Item"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Position">
            <summary>
            The offset in the line direction.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.Length">
            <summary>
            The length of the item in the line direction.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.PositionInLine">
            <summary>
            The offset in the direction that is perpendicular to the line direction.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowItemInLine.SizeInLine">
            <summary>
            The size of the item in the direction that is perpendicular to the line direction.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine">
            <summary>
            A single line of items in a flow view.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.IFlowLine`1">
            <summary>
            A single line in a flow view.
            </summary>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowLine`1.ItemCount">
            <summary>
            The number of items.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowLine`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FlowView.IFlowLine`1.ItemCount"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowLine`1.Length">
            <summary>
            The length of the line (along the line direction).
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowLine`1.Size">
            <summary>
            The size of the line (perpendicular to the line direction).
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.items">
            <summary>
            The list of items in the line.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.Items"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.GetEnumerator">
            <summary>
            Returns an enumerator over all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.length">
            <summary>
            The length of the line (along the line direction).
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.Length"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.size">
            <summary>
            The size of the line (perpendicular to the line direction).
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.Size"/>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.Items">
            <summary>
            The list of items in the line.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.ItemCount">
            <summary>
            The number of items.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.ItemCount"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.Length">
            <summary>
            The length of the line (along the line direction).
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLine.Size">
            <summary>
            The size of the line (perpendicular to the line direction).
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.FlowManager`1.FlowLines">
            <summary>
            A collection of lines in a flow view.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.IFlowLines`1">
            <summary>
            A collection of lines in a flow view.
            </summary>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowLines`1.LineCount">
            <summary>
            The number of lines.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowLines`1.Item(System.Int32)">
            <summary>
            Gets the line at the specified index.
            </summary>
            <param name="index">The zero-based index of the line.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FlowView.IFlowLines`1.LineCount"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowManager`1.FlowLines.items">
            <summary>
            The list of lines in the collection.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLines.Items"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.FlowLines.GetEnumerator">
            <summary>
            Returns an enumerator over all lines in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowManager`1.FlowLines.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over all lines in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLines.Items">
            <summary>
            The list of lines in the collection.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLines.LineCount">
            <summary>
            The number of lines.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLines.Item(System.Int32)">
            <summary>
            Gets the line at the specified index.
            </summary>
            <param name="index">The zero-based index of the line.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.FlowView.FlowManager`1.FlowLines.LineCount"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.FlowOrientation">
            <summary>
            Defines the orientation of a flow layout.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowOrientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowOrientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.FlowUtilities">
            <summary>
            This class provides some utility methods for flow view-related types.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowUtilities.IsComplete``1(TwoLayeredGUI.FlowView.IFlowItemInLine{``0})">
            <summary>
            Indicates whether an <see cref="T:TwoLayeredGUI.FlowView.IFlowItemInLine`1"/> represents the complete underlying <see cref="T:TwoLayeredGUI.FlowView.IFlowItem"/>.
            </summary>
            <param name="item">The item to examine.</param>
            <returns>A value that indicates whether <paramref name="item"/> contains all parts of the underlying <see cref="T:TwoLayeredGUI.FlowView.IFlowItem"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowUtilities.PartCount``1(TwoLayeredGUI.FlowView.IFlowItemInLine{``0})">
            <summary>
            Retrieves the number of item parts encompassed by an <see cref="T:TwoLayeredGUI.FlowView.IFlowItemInLine`1"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>The number of item parts.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowUtilities.WithIndentations``1(System.Collections.Generic.IEnumerable{TwoLayeredGUI.FlowView.IFlowLine{``0}},System.Double[])">
            <summary>
            Combines flow lines and their indentations.
            </summary>
            <param name="lines">The flow lines.</param>
            <param name="lineIndentations">The indentations.</param>
            <returns>An enumeration of <see cref="T:TwoLayeredGUI.FlowView.IIndentedFlowLine`1"/> objects.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.FlowUtilities.IndentedFlowLine`1">
            <summary>
            A single line of items in a flow view with an indentation.
            </summary>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.IIndentedFlowLine`1">
            <summary>
            A single line in a flow view with an indentation.
            </summary>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IIndentedFlowLine`1.Line">
            <summary>
            The flow line.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IIndentedFlowLine`1.Indentation">
            <summary>
            The indentation of the line.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.FlowUtilities.IndentedFlowLine`1.#ctor(TwoLayeredGUI.FlowView.IFlowLine{`0},System.Double)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="line">The flow line.</param>
            <param name="indentation">The indentation of the flow line.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="line"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowUtilities.IndentedFlowLine`1.line">
            <summary>
            The flow line.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowUtilities.IndentedFlowLine`1.Line"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.FlowUtilities.IndentedFlowLine`1.indentation">
            <summary>
            The indentation of the line.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.FlowUtilities.IndentedFlowLine`1.Indentation"/>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowUtilities.IndentedFlowLine`1.Line">
            <summary>
            The flow line.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.FlowUtilities.IndentedFlowLine`1.Indentation">
            <summary>
            The indentation of the line.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.IFlowItem">
            <summary>
            An item in a flow view.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItem.ForceLineBreakBefore">
            <summary>
            Indicates whether a line break is inserted before the item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItem.ForceLineBreakAfter">
            <summary>
            Indicates whether a line break is inserted after the item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.IFlowItem.PartCount">
            <summary>
            The number of separable parts.
            </summary>
            <value>
            <para>This property indicates the number of parts that the item can be broken up into.
              Its value is always greater than zero.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.IFlowSizeProvider`1">
            <summary>
            A component that measures flow items.
            </summary>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.IFlowSizeProvider`1.BeginMeasuring">
            <summary>
            Initiates a phase in which the sizes of flow items may be required.
            </summary>
            <seealso cref="M:TwoLayeredGUI.FlowView.IFlowSizeProvider`1.EndMeasuring"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.IFlowSizeProvider`1.EndMeasuring">
            <summary>
            Ends a phase in which the sizes of flow items may be required.
            </summary>
            <seealso cref="M:TwoLayeredGUI.FlowView.IFlowSizeProvider`1.BeginMeasuring"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.IFlowSizeProvider`1.GetItemMinLength(`0,System.Int32,System.Int32)">
            <summary>
            Retrieves the minimum length required by an item or a part thereof.
            </summary>
            <param name="item">The item to measure.</param>
            <param name="firstPart">The first part of <paramref name="item"/> to consider.</param>
            <param name="lastPart">The last part of <paramref name="item"/> to consider.</param>
            <returns>The minimum length of the item.</returns>
            <remarks>
            <para>This method computes the minimum length required (in the line direction) to accommodate <paramref name="item"/>.
              If <paramref name="firstPart"/> and <paramref name="lastPart"/> do not specify the very first and last subpart index in <paramref name="item"/>, respectively, only that part of the item will be measured.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.IFlowSizeProvider`1.GetItemMinSizeInLine(`0,System.Int32,System.Int32)">
            <summary>
            Retrieves the minimum size required by an item or a part thereof.
            </summary>
            <param name="item">The item to measure.</param>
            <param name="firstPart">The first part of <paramref name="item"/> to consider.</param>
            <param name="lastPart">The last part of <paramref name="item"/> to consider.</param>
            <returns>The minimum size of the item.</returns>
            <remarks>
            <para>This method computes the minimum size required (perpendicular to the line direction) to accommodate <paramref name="item"/>.
              If <paramref name="firstPart"/> and <paramref name="lastPart"/> do not specify the very first and last subpart index in <paramref name="item"/>, respectively, only that part of the item will be measured.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.LinkedFlowItem`1">
            <summary>
            A default implementation of the <see cref="T:TwoLayeredGUI.FlowView.IFlowItem"/> interface that contains a linked object.
            </summary>
            <typeparam name="T">The type of the linked object.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.LinkedFlowItem`1.#ctor(`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="linkedObject">The linked object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="linkedObject"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.LinkedFlowItem`1.linkedObject">
            <summary>
            The linked object.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.LinkedFlowItem`1.LinkedObject"/>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.LinkedFlowItem`1.LinkedObject">
            <summary>
            The linked object.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.LinkedFlowItem`1.ForceLineBreakBefore">
            <summary>
            Indicates whether a line break is inserted before the item.
            </summary>
            <value>
            <para>The default implementation of this property always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.LinkedFlowItem`1.ForceLineBreakAfter">
            <summary>
            Indicates whether a line break is inserted after the item.
            </summary>
            <value>
            <para>The default implementation of this property always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.LinkedFlowItem`1.PartCount">
            <summary>
            The number of separable parts.
            </summary>
            <value>
            <para>This property indicates the number of parts that the item can be broken up into.
              Its value is always greater than zero.</para>
            <para>The default implementation of this property always returns <c>1</c>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.NamespaceDoc">
            <summary>
            This namespaces contains types that define a flow view, a layout with wrappable lines of items.
            </summary>
            <remarks>
            <para>This namespaces contains types that define a flow view, a layout with wrappable lines of items.
              Wrapping is done automatically when items whose size can be retrieved via interfaces are implemented.</para>
            <para>When using the flow layout types, the <see cref="T:TwoLayeredGUI.FlowView.IFlowItem"/> interface must be implemented by class that represent elements to align in the flow layout.
              The <see cref="T:TwoLayeredGUI.FlowView.IFlowSizeProvider`1"/> interface must be implemented accordingly to retrieve the sizes of flow items or parts thereof.
              An instance of the <see cref="T:TwoLayeredGUI.FlowView.FlowManager`1"/> class can then be used to distribute a collection of flow items to one or more lines in a flow layout with a maximum total line length.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1">
            <summary>
            Provides a flow size provider that always returns the same item size.
            </summary>
            <typeparam name="TItem">The base type of all flow items.</typeparam>
            <remarks>
            <para>This implementation of the <see cref="T:TwoLayeredGUI.FlowView.IFlowSizeProvider`1"/> interface assumes that all items consist of only one part and have the same size.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="length">The length required by each item.</param>
            <param name="sizeInLine">The size (in a perpendicular direction to the line direction) of each item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Any of the arguments was less than zero.</exception>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.length">
            <summary>
            The length required by each item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.Length"/>
        </member>
        <member name="F:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.sizeInLine">
            <summary>
            The size (in a perpendicular direction to the line direction) of each item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.SizeInLine"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.BeginMeasuring">
            <summary>
            Initiates a phase in which the sizes of flow items may be required.
            </summary>
            <seealso cref="M:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.EndMeasuring"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.EndMeasuring">
            <summary>
            Ends a phase in which the sizes of flow items may be required.
            </summary>
            <seealso cref="M:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.BeginMeasuring"/>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.GetItemMinLength(`0,System.Int32,System.Int32)">
            <summary>
            Retrieves the minimum length required by an item or a part thereof.
            </summary>
            <param name="item">The item to measure.</param>
            <param name="firstPart">The first part of <paramref name="item"/> to consider.</param>
            <param name="lastPart">The last part of <paramref name="item"/> to consider.</param>
            <returns>The minimum length of the item.</returns>
            <remarks>
            <para>This method computes the minimum length required (in the line direction) to accommodate <paramref name="item"/>.
              If <paramref name="firstPart"/> and <paramref name="lastPart"/> do not specify the very first and last subpart index in <paramref name="item"/>, respectively, only that part of the item will be measured.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.GetItemMinSizeInLine(`0,System.Int32,System.Int32)">
            <summary>
            Retrieves the minimum size required by an item or a part thereof.
            </summary>
            <param name="item">The item to measure.</param>
            <param name="firstPart">The first part of <paramref name="item"/> to consider.</param>
            <param name="lastPart">The last part of <paramref name="item"/> to consider.</param>
            <returns>The minimum size of the item.</returns>
            <remarks>
            <para>This method computes the minimum size required (perpendicular to the line direction) to accommodate <paramref name="item"/>.
              If <paramref name="firstPart"/> and <paramref name="lastPart"/> do not specify the very first and last subpart index in <paramref name="item"/>, respectively, only that part of the item will be measured.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.Length">
            <summary>
            The length required by each item.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.FlowView.UniformFlowSizeProvider`1.SizeInLine">
            <summary>
            The size (in a perpendicular direction to the line direction) of each item.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Graphics.Orientation">
            <summary>
            Defines an orientation.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.Orientation.Horizontal">
            <summary>
            A horizontal orientation.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.Orientation.Vertical">
            <summary>
            A vertical orientation.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Graphics.Font">
            <summary>
            Defines settings for a font.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor(TwoLayeredGUI.Graphics.GenericFont)">
            <summary>
            Creates a new instance with a given font type.
            </summary>
            <param name="fontType">The font type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fontType"/> is not a valid <see cref="T:TwoLayeredGUI.Graphics.GenericFont"/> constant.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor(TwoLayeredGUI.Graphics.GenericFont,System.Single)">
            <summary>
            Creates a new instance with a given font type and a size.
            </summary>
            <param name="fontType">The font type.</param>
            <param name="size">The font size in points.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fontType"/> is not a valid <see cref="T:TwoLayeredGUI.Graphics.GenericFont"/> constant.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor(TwoLayeredGUI.Graphics.GenericFont,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance with a given font type and a font style.
            </summary>
            <param name="fontType">The font type.</param>
            <param name="bold">The bold flag for the font.</param>
            <param name="italic">The italic flag for the font.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fontType"/> is not a valid <see cref="T:TwoLayeredGUI.Graphics.GenericFont"/> constant.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor(TwoLayeredGUI.Graphics.GenericFont,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance with a given font type, a size and a font style.
            </summary>
            <param name="fontType">The font type.</param>
            <param name="size">The font size in points.</param>
            <param name="bold">The bold flag for the font.</param>
            <param name="italic">The italic flag for the font.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fontType"/> is not a valid <see cref="T:TwoLayeredGUI.Graphics.GenericFont"/> constant.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor(System.String)">
            <summary>
            Creates a new instance with a given font family name.
            </summary>
            <param name="name">The name of the font family.</param>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor(System.String,System.Single)">
            <summary>
            Creates a new instance with a given font family name and a size.
            </summary>
            <param name="name">The name of the font family.</param>
            <param name="size">The font size in points.</param>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance with a given font family name and a font style.
            </summary>
            <param name="name">The name of the font family.</param>
            <param name="bold">The bold flag for the font.</param>
            <param name="italic">The italic flag for the font.</param>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor(System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance with a given font family name, a size and a font style.
            </summary>
            <param name="name">The name of the font family.</param>
            <param name="size">The font size in points.</param>
            <param name="bold">The bold flag for the font.</param>
            <param name="italic">The italic flag for the font.</param>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.#ctor(TwoLayeredGUI.Graphics.Font)">
            <summary>
            Creates a font object with the same settings as another object.
            </summary>
            <param name="template">The template object whose settings will be copied.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.Font.fontType">
            <summary>
            The generic font type.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.Font.FontType"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.Font.name">
            <summary>
            The name of the font family.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.Font.Name"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.Font.size">
            <summary>
            The font size in points.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.Font.Size"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.Font.bold">
            <summary>
            Determines whether text is to be displayed bold.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.Font.Bold"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.Font.italic">
            <summary>
            Determines whether text is to be displayed italic.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.Font.Italic"/>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The newly created copy.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Notifies any listeners about a property that is about to change.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.Font.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Notifies any listeners about a property that has changed.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.Font.FontType">
            <summary>
            The generic font type.
            </summary>
            <value>
            <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is not a valid <see cref="T:TwoLayeredGUI.Graphics.GenericFont"/> constant.</exception>
            <para>This property specifies the generic font type.
              The <see cref="P:TwoLayeredGUI.Graphics.Font.Name"/> property will only be used if this is set to <see cref="F:TwoLayeredGUI.Graphics.GenericFont.Custom"/>.
              The default value is <see cref="F:TwoLayeredGUI.Graphics.GenericFont.Default"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.Font.Name">
            <summary>
            The name of the font family.
            </summary>
            <value>
            <para>This property gets or sets the font name.
              It will only be considered if <see cref="P:TwoLayeredGUI.Graphics.Font.FontType"/> is <see cref="F:TwoLayeredGUI.Graphics.GenericFont.Custom"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.Font.Size">
            <summary>
            The font size in points.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.Font.Bold">
            <summary>
            Determines whether text is to be displayed bold.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.Font.Italic">
            <summary>
            Determines whether text is to be displayed italic.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Graphics.Font.PropertyChanging">
            <summary>
            This event is fired when a property is about to change.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Graphics.Font.PropertyChanged">
            <summary>
            This event is fired when a property has changed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Graphics.GenericFont">
            <summary>
            Specifies a generic font type.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.GenericFont.Custom">
            <summary>
            A custom font.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.GenericFont.Default">
            <summary>
            The system-dependent default font.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.GenericFont.SansSerif">
            <summary>
            A sans-serif font.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.GenericFont.Serif">
            <summary>
            A serif font.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.GenericFont.Monospace">
            <summary>
            A monospace font.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Graphics.IBitmapProvider">
            <summary>
            Provides access to a PNG bitmap graphic.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.IBitmapProvider.GetPngStream">
            <summary>
            Returns the PNG bitmap data in a stream.
            </summary>
            <returns>The stream.</returns>
            <exception cref="T:System.InvalidOperationException">The stream cannot be obtained.</exception>
        </member>
        <member name="T:TwoLayeredGUI.Graphics.BasicSettings">
            <summary>
            Defines measurements used for layout options such as spacing in graphical user interfaces and other general settings.
            </summary>
            <remarks>
            <para>Instances of this class define measurements for graphical user interfaces.
              These measurements determine sizes such as spacings to use in dialog boxes and other user interface components.
              Also, it contains some general settings used by many graphical classes.</para>
            <para>Many of the settings are relative to the value of the <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/> property.
              To obtain the actual value, these values have to be multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>.
              Alternatively, the respective properties with the prefix <c>Adjusted</c> can be used, which have that value already multiplied in.</para>
            <para><see cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowWidth"/> and <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowHeight"/> are supposed to be absolute values and should not be multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>.
              It is adviseable to choose values for these two properties based on environment attributes, such as the display resolution.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.BasicSettings.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Notifies any listeners about a property that is about to change.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.BasicSettings.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Notifies any listeners about a property that has changed.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.lineHeight">
            <summary>
            Defines a basic unit of measurement.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.maxWindowWidth">
            <summary>
            A recommendation for the maximum width of dialog windows.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.maxWindowHeight">
            <summary>
            A recommendation for the maximum height of dialog windows.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowHeight"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.buttonBarOffset">
            <summary>
            Indicates by how much space a button bar is offset from the rest of a dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.ButtonBarOffset"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.minButtonWidth">
            <summary>
            Indicates the minimum width of a button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MinButtonWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.minButtonHeight">
            <summary>
            Indicates the minimum height of a button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MinButtonWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.windowPadding">
            <summary>
            The padding along the frame of a window.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.WindowPadding"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.labelSpacing">
            <summary>
            The spacing between a widget and its label.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.LabelSpacing"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.hControlSpacing">
            <summary>
            The horizontal spacing between two controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.VControlSpacing"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.vControlSpacing">
            <summary>
            The vertical spacing between two controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.VControlSpacing"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.controlListSpacing">
            <summary>
            The spacing between controls in a list.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.ControlListSpacing"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.wideTextBoxWidth">
            <summary>
            The width of wide text boxes.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.WideTextBoxWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.wideTextBoxHeight">
            <summary>
            The height of wide text boxes.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.WideTextBoxHeight"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.tallTextBoxWidth">
            <summary>
            The width of tall text boxes.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.TallTextBoxWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.tallTextBoxHeight">
            <summary>
            The height of tall text boxes.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.TallTextBoxHeight"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.minDialogBoxWidth">
            <summary>
            The minimum width of a dialog box whose size is not determined by its contents.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MinDialogBoxWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.minDialogBoxHeight">
            <summary>
            The minimum height of a dialog box whose size is not determined by its contents.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MinDialogBoxHeight"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.adornerSideBarWidth">
            <summary>
            The width of an adorner side bar.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdornerSideBarWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.headerBarHeight">
            <summary>
            The height of a header bar.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.HeaderBarHeight"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.indentation">
            <summary>
            The amount by which nested elements are indented to form a hierarchy.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.Indentation"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.suppressButtonIcons">
            <summary>
            Indicates whether button icons should be hidden.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.SuppressButtonIcons"/>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.BasicSettings.validationErrorIcon">
            <summary>
            The icon used to indicate failure to validate an input value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.ValidationErrorIcon"/>
        </member>
        <member name="E:TwoLayeredGUI.Graphics.BasicSettings.PropertyChanging">
            <summary>
            This event is fired when a property is about to change.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Graphics.BasicSettings.PropertyChanged">
            <summary>
            This event is fired when a property has changed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight">
            <summary>
            Defines a basic unit of measurement.
            </summary>
            <value>
            <para>This property defines a basic unit of measurement.
              It may match the height of a line of text written with the default user interface font, but can also have any other value.
              The default value is zero.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowWidth">
            <summary>
            A recommendation for the maximum width of dialog windows.
            </summary>
            <value>
            <para>This property gets or sets a recommendation for the maximum width of dialog windows.
              Windows may exceed this value.
              In particular, windows can exceed this value if staying approximately within <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowHeight"/> or vice-versa.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowHeight">
            <summary>
            A recommendation for the maximum height of dialog windows.
            </summary>
            <value>
            <para>This property gets or sets a recommendation for the maximum height of dialog windows.
              Windows may exceed this value.
              In particular, windows can exceed this value if staying approximately within <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowWidth"/> or vice-versa.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.ButtonBarOffset">
            <summary>
            Indicates by how much space a button bar is offset from the rest of a dialog box.
            </summary>
            <value>
            <para>This value, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the space that a button bar is offset from any other content in a dialog box.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedButtonBarOffset"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedButtonBarOffset">
            <summary>
            Indicates by how much space a button bar is offset from the rest of a dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.ButtonBarOffset"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.MinButtonWidth">
            <summary>
            Indicates the minimum width of a button.
            </summary>
            <value>
            <para>This value, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the minimum width of a button.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedMinButtonWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedMinButtonWidth">
            <summary>
            Indicates the minimum width of a button.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MinButtonWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.MinButtonHeight">
            <summary>
            Indicates the minimum height of a button.
            </summary>
            <value>
            <para>This value, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the minimum height of a button.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedMinButtonWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedMinButtonHeight">
            <summary>
            Indicates the minimum height of a button.
            </summary>
            <value>
            <para>This value, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the minimum height of a button.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedMinButtonWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.WindowPadding">
            <summary>
            The padding along the frame of a window.
            </summary>
            <value>
            <para>This value, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the padding at all sides of the inside of a window frame.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedWindowPadding"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedWindowPadding">
            <summary>
            The padding along the frame of a window.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.WindowPadding"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.LabelSpacing">
            <summary>
            The spacing between a widget and its label.
            </summary>
            <value>
            <para>This property, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the spacing between a widget and its label.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedLabelSpacing"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedLabelSpacing">
            <summary>
            The spacing between a widget and its label.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.LabelSpacing"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.HControlSpacing">
            <summary>
            The horizontal spacing between two controls.
            </summary>
            <value>
            <para>This property, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the horizontal spacing between two controls.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedHControlSpacing"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedHControlSpacing">
            <summary>
            The horizontal spacing between two controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.HControlSpacing"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.VControlSpacing">
            <summary>
            The vertical spacing between two controls.
            </summary>
            <value>
            <para>This property, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the vertical spacing between two controls.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedVControlSpacing"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedVControlSpacing">
            <summary>
            The vertical spacing between two controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.VControlSpacing"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.ControlListSpacing">
            <summary>
            The spacing between controls in a list.
            </summary>
            <value>
            <para>This property, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the spacing between two controls that are displayed in a list.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedControlListSpacing"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedControlListSpacing">
            <summary>
            The spacing between controls in a list.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.ControlListSpacing"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.WideTextBoxWidth">
            <summary>
            The width of wide text boxes.
            </summary>
            <value>
            <para>This property, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the width of wide text box controls.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedWideTextBoxWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedWideTextBoxWidth">
            <summary>
            The width of wide text boxes.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.WideTextBoxWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.WideTextBoxHeight">
            <summary>
            The height of wide text boxes.
            </summary>
            <value>
            <para>This property, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the height of wide text box controls.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedWideTextBoxHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedWideTextBoxHeight">
            <summary>
            The height of wide text boxes.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.WideTextBoxHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.TallTextBoxWidth">
            <summary>
            The width of tall text boxes.
            </summary>
            <value>
            <para>This property, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the width of tall text box controls.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedTallTextBoxWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedTallTextBoxWidth">
            <summary>
            The width of tall text boxes.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.TallTextBoxWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.TallTextBoxHeight">
            <summary>
            The height of tall text boxes.
            </summary>
            <value>
            <para>This property, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the height of tall text box controls.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedTallTextBoxHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedTallTextBoxHeight">
            <summary>
            The height of tall text boxes.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.TallTextBoxHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.MinDialogBoxWidth">
            <summary>
            The minimum width of a dialog box whose size is not determined by its contents.
            </summary>
            <value>
            <para>This value, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the minimum width of a dialog box whose size is not determined by its contents.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedMinDialogBoxWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedMinDialogBoxWidth">
            <summary>
            The minimum width of a dialog box whose size is not determined by its contents.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MinDialogBoxWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedRestrictedMinDialogBoxWidth">
            <summary>
            Gets the minimum width of a dialog box whose size is not determined by its contents, limited to <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowWidth"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.MinDialogBoxHeight">
            <summary>
            The minimum height of a dialog box whose size is not determined by its contents.
            </summary>
            <value>
            <para>This value, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the minimum height of a dialog box whose size is not determined by its contents.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedMinDialogBoxHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedMinDialogBoxHeight">
            <summary>
            The minimum height of a dialog box whose size is not determined by its contents.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.MinDialogBoxHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedRestrictedMinDialogBoxHeight">
            <summary>
            Gets the minimum height of a dialog box whose size is not determined by its contents, limited to <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.MaxWindowHeight"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdornerSideBarWidth">
            <summary>
            The width of an adorner side bar.
            </summary>
            <value>
            <para>This value, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the width of an adorning side bar.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedAdornerSideBarWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedAdornerSideBarWidth">
            <summary>
            The width of an adorner side bar.
            </summary>
            <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdornerSideBarWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.HeaderBarHeight">
            <summary>
            The height of a header bar.
            </summary>
            <value>
            <para>This value, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the height of a header bar.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedHeaderBarHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedHeaderBarHeight">
            <summary>
            The height of a header bar.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.HeaderBarHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.Indentation">
            <summary>
            The amount by which nested elements are indented to form a hierarchy.
            </summary>
            <value>
            <para>This property, multiplied with <see cref="P:TwoLayeredGUI.Graphics.BasicSettings.LineHeight"/>, indicates the hierarchical.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedLabelSpacing"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.AdjustedIndentation">
            <summary>
            The amount by which nested elements are indented to form a hierarchy.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Graphics.BasicSettings.Indentation"/>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.SuppressButtonIcons">
            <summary>
            Indicates whether button icons should be hidden.
            </summary>
            <value>
            <para>This property gets or sets a value that controls whether button controls created based on <see cref="T:TwoLayeredGUI.ButtonDef"/> objects will have icons.
              If <see langword="true"/> the icons will be hidden, otherwise they will be shown (if defined in the <see cref="T:TwoLayeredGUI.ButtonDef"/> object).
              The default value is <see langword="true"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Graphics.BasicSettings.ValidationErrorIcon">
            <summary>
            The icon used to indicate failure to validate an input value.
            </summary>
            <value>
            <para>Gets or sets the icon used to indicate that the validation of an input error has failed.
              The default value is an error icon.
              If <see langword="null"/> is assigned, no icon will be shown.
              This is not recommended.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.Graphics.ManifestResourceBitmapProvider">
            <summary>
            Provides access to a PNG bitmap stored in a manifest resource.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.ManifestResourceBitmapProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance for a resource from this assembly.
            </summary>
            <param name="name">The name of the resource.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.ManifestResourceBitmapProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="assembly">The assembly that contains the resource.</param>
            <param name="name">The name of the resource.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.ManifestResourceBitmapProvider.assembly">
            <summary>
            The assembly that contains the resource.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Graphics.ManifestResourceBitmapProvider.name">
            <summary>
            The name of the resource.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.ManifestResourceBitmapProvider.GetPngStream">
            <summary>
            Returns the PNG bitmap data in a stream.
            </summary>
            <returns>The stream.</returns>
            <exception cref="T:System.InvalidOperationException">The stream cannot be obtained.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Graphics.ManifestResourceBitmapProvider.Clone">
            <summary>
            Returns a copy of the object.
            </summary>
            <returns>The newly created copy.</returns>
        </member>
        <member name="T:TwoLayeredGUI.Graphics.NamespaceDoc">
            <summary>
            This namespaces contains types that represent abstract definitions of graphical objects and settings.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.GUIProviderExtension.DialogBoxUtilities">
            <summary>
            Provides extension methods for the <see cref="T:TwoLayeredGUI.IDialogBoxProvider"/> interface.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.DialogBoxUtilities.Show(TwoLayeredGUI.IDialogBoxProvider,System.String,TwoLayeredGUI.SimpleDialogs.DialogElement,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Displays a dialog box whose contents is based on a <see cref="N:TwoLayeredGUI.SimpleDialogs">Simple Dialogs</see> user interface definition with a title and buttons.
            </summary>
            <param name="provider">The GUI provider used for displaying the dialog box.</param>
            <param name="title">The dialog title.</param>
            <param name="root">The root element of the user interface.</param>
            <param name="buttons">The buttons to show in the dialog box.</param>
            <returns>The button that was used to close the dialog box or <see cref="P:TwoLayeredGUI.ButtonDef.CloseButton"/>, if the dialog box was not closed using any of the buttons.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="root"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.GUIProviderExtension.DirectoryDialogUtilities">
            <summary>
            Provides extension methods for the <see cref="T:TwoLayeredGUI.FileSystem.IDirectoryDialogProvider"/> interface.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.DirectoryDialogUtilities.SelectDirectory(TwoLayeredGUI.FileSystem.IDirectoryDialogProvider)">
            <summary>
            Displays a dialog box where the user can select a directory path, based on the default settings.
            </summary>
            <param name="provider">The GUI provider used for displaying the directory dialog.</param>
            <returns>The selected directory path, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities">
            <summary>
            Provides extension methods for the <see cref="T:TwoLayeredGUI.ValueInput.IInputBoxProvider"/> interface.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.Show(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.InputValue},System.Object[]@)">
            <summary>
            Displays an input box for the specified values.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The window title.</param>
            <param name="values">The values to make editable in the input box.</param>
            <param name="resultingValues">The values present in the input widgets when the dialog box is closed will be output to this parameter, no matter what the result of the method.</param>
            <returns>A value indicating whether the input was confirmed by the user.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="values"/>, or any of its elements, is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="values"/> object contains a <see cref="T:TwoLayeredGUI.ValueInput.CustomValue`1"/> instance.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestString(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.String}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.String"/> value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestString(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,System.String,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.String}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.String"/> value and suggests an initially set value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="initialValue">The value initially displayed in the input box.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestBoolean(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Boolean}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestBoolean(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,System.Boolean,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Boolean}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.Boolean"/> value and suggests an initially set value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="initialValue">The value initially displayed in the input box.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestInt32(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Int32}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.Int32"/> value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestInt32(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,System.Int32,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Int32}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.Int32"/> value and suggests an initially set value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="initialValue">The value initially displayed in the input box.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestInt32(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Int32}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.Int32"/> value within a specified range and suggests an initially set value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="initialValue">The value initially displayed in the input box.</param>
            <param name="minimum">An optional lower inclusive bound for the value.</param>
            <param name="maximum">An optional upper inclusive bound for the value.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestSingle(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Single}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.Single"/> value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestSingle(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,System.Single,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Single}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.Single"/> value and suggests an initially set value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="initialValue">The value initially displayed in the input box.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestSingle(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,System.Single,System.Nullable{System.Single},System.Nullable{System.Single},TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Single}[])">
            <summary>
            Displays an input box that allows to enter a single <see cref="T:System.Single"/> value within a specified range and suggests an initially set value.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="initialValue">The value initially displayed in the input box.</param>
            <param name="minimum">An optional lower inclusive bound for the value.</param>
            <param name="maximum">An optional upper inclusive bound for the value.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The entered value, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestValues(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.InputValue})">
            <summary>
            Displays an input box to enter any number of values.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="values">The input value definitions to display in the input box.</param>
            <returns>The entered values, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="values"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.InputBoxUtilities.RequestValues(TwoLayeredGUI.ValueInput.IInputBoxProvider,System.String,TwoLayeredGUI.ValueInput.InputValue,TwoLayeredGUI.ValueInput.InputValue[])">
            <summary>
            Displays an input box to enter any number of values.
            </summary>
            <param name="provider">The GUI provider used for displaying the input box.</param>
            <param name="title">The title of the input box.</param>
            <param name="firstValue">The first input value definition to display in the input box.</param>
            <param name="moreValues">More input value definitions to display in the input box.</param>
            <returns>The entered values, or <see langword="null"/> if the user canceled the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="firstValue"/>, <paramref name="moreValues"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities">
            <summary>
            Provides extension methods for the <see cref="T:TwoLayeredGUI.IMessageBoxProvider"/> interface.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="message">The message to display.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="message"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,System.String,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box with a custom title.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="message">The message to display.</param>
            <param name="title">The title of the message box.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments or any of the elements of <paramref name="buttons"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,TwoLayeredGUI.MessageBoxSettings,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box based on a template.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="template">The settings template.</param>
            <param name="message">The message to display.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments or any of the elements of <paramref name="buttons"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,TwoLayeredGUI.MessageBoxSettings,System.String,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box with a custom title based on a template.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="template">The settings template.</param>
            <param name="message">The message to display.</param>
            <param name="title">The title of the message box.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments or any of the elements of <paramref name="buttons"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,System.String,System.Int32,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box. Permits the specification of a preselected button.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="message">The message to display.</param>
            <param name="preselectedButton">The index of the button that is automatically focused when the message box is displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="message"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,System.String,System.String,System.Int32,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box with a custom title. Permits the specification of a preselected button.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="message">The message to display.</param>
            <param name="title">The title of the message box.</param>
            <param name="preselectedButton">The index of the button that is automatically focused when the message box is displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments or any of the elements of <paramref name="buttons"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,TwoLayeredGUI.MessageBoxSettings,System.String,System.Int32,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box based on a template. Permits the specification of a preselected button.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="template">The settings template.</param>
            <param name="message">The message to display.</param>
            <param name="preselectedButton">The index of the button that is automatically focused when the message box is displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments or any of the elements of <paramref name="buttons"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,TwoLayeredGUI.MessageBoxSettings,System.String,System.String,System.Int32,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box with a custom title based on a template. Permits the specification of a preselected button.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="template">The settings template.</param>
            <param name="message">The message to display.</param>
            <param name="title">The title of the message box.</param>
            <param name="preselectedButton">The index of the button that is automatically focused when the message box is displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments or any of the elements of <paramref name="buttons"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,System.String,TwoLayeredGUI.DefaultButtonKind,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box. Permits the specification of a preselected button.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="message">The message to display.</param>
            <param name="preselectedButton">The <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> value of the button to focus automatically when the message box is displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="message"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="preselectedButton"/> has an invalid value.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,System.String,System.String,TwoLayeredGUI.DefaultButtonKind,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box with a custom title. Permits the specification of a preselected button.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="message">The message to display.</param>
            <param name="title">The title of the message box.</param>
            <param name="preselectedButton">The <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> value of the button to focus automatically when the message box is displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments or any of the elements of <paramref name="buttons"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="preselectedButton"/> has an invalid value.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,TwoLayeredGUI.MessageBoxSettings,System.String,TwoLayeredGUI.DefaultButtonKind,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box based on a template. Permits the specification of a preselected button.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="template">The settings template.</param>
            <param name="message">The message to display.</param>
            <param name="preselectedButton">The <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> value of the button to focus automatically when the message box is displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments or any of the elements of <paramref name="buttons"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="preselectedButton"/> has an invalid value.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.Show(TwoLayeredGUI.IMessageBoxProvider,TwoLayeredGUI.MessageBoxSettings,System.String,System.String,TwoLayeredGUI.DefaultButtonKind,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a message box with a custom title based on a template. Permits the specification of a preselected button.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="template">The settings template.</param>
            <param name="message">The message to display.</param>
            <param name="title">The title of the message box.</param>
            <param name="preselectedButton">The <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> value of the button to focus automatically when the message box is displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <returns>The definition of the button used to close the message box.
              This is guaranteed to never return <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments or any of the elements of <paramref name="buttons"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="preselectedButton"/> has an invalid value.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> is empty, the message box will contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowInformation(TwoLayeredGUI.IMessageBoxProvider,System.String,System.Object[])">
            <summary>
            Displays an information message box with a formatted string.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowInformation(TwoLayeredGUI.IMessageBoxProvider,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Displays an information message box with a formatted string. Culture-specific formatting information can be supplied.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowError(TwoLayeredGUI.IMessageBoxProvider,System.String,System.Object[])">
            <summary>
            Displays an error message box.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowError(TwoLayeredGUI.IMessageBoxProvider,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Displays an error message box. Culture-specific formatting information can be supplied.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowError(TwoLayeredGUI.IMessageBoxProvider,System.Exception)">
            <summary>
            Displays an error message box with some information about an exception.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="exception">The exception to display.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> or <paramref name="exception"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowError(TwoLayeredGUI.IMessageBoxProvider,System.Exception,System.String,System.Object[])">
            <summary>
            Displays an error message box with some information about an exception and a custom message.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="exception">The exception to display in the details area.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowError(TwoLayeredGUI.IMessageBoxProvider,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Displays an error message box with some information about an exception and a custom message. Culture-specific formatting information can be supplied.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="exception">The exception to display in the details area.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="exception"/>, <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowWarning(TwoLayeredGUI.IMessageBoxProvider,System.String,System.Object[])">
            <summary>
            Displays a warning message box.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowWarning(TwoLayeredGUI.IMessageBoxProvider,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Displays a warning message box. Culture-specific formatting information can be supplied.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowWarning(TwoLayeredGUI.IMessageBoxProvider,System.Exception)">
            <summary>
            Displays a warning message box with some information about an exception.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="exception">The exception to display.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> or <paramref name="exception"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowWarning(TwoLayeredGUI.IMessageBoxProvider,System.Exception,System.String,System.Object[])">
            <summary>
            Displays a warning message box with some information about an exception and a custom message.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="exception">The exception to display in the details area.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.MessageBoxUtilities.ShowWarning(TwoLayeredGUI.IMessageBoxProvider,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Displays a warning message box with some information about an exception and a custom message. Culture-specific formatting information can be supplied.
            </summary>
            <param name="provider">The GUI provider used for displaying the message box.</param>
            <param name="exception">The exception to display in the details area.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <param name="format">The format string for the message.</param>
            <param name="args">An array containing objects to format.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="exception"/>, <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid or the number indicating an argument to format is outside of the range of supplied arguments in the <paramref name="args"/> array.</exception>
        </member>
        <member name="T:TwoLayeredGUI.GUIProviderExtension.NamespaceDoc">
            <summary>
            This namespace exists merely to contain extension classes for the <see cref="T:TwoLayeredGUI.IGUIProvider">GUI provider interfaces</see>.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities">
            <summary>
            Provides extension methods for the <see cref="T:TwoLayeredGUI.IProgressDialogProvider"/> interface.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.Create(TwoLayeredGUI.IProgressDialogProvider,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Creates a progress dialog with a title text.
            </summary>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <returns>A controller object for the created dialog.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>This method creates a progress dialog and a controller object that wraps the dialog.
              The dialog is not automatically displayed.
              The methods of the returned controller object have to be used to show the dialog.</para>
            </remarks>
            <seealso cref="T:TwoLayeredGUI.IProgressDialogController"/>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.Create(TwoLayeredGUI.IProgressDialogProvider,System.String,System.Boolean,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Creates a progress dialog with a title text and indicates whether details should be shown.
            </summary>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="showDetails">A value that indicates whether the details area should be shown.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <returns>A controller object for the created dialog.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>This method creates a progress dialog and a controller object that wraps the dialog.
              The dialog is not automatically displayed.
              The methods of the returned controller object have to be used to show the dialog.</para>
            </remarks>
            <seealso cref="T:TwoLayeredGUI.IProgressDialogController"/>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.ShowDialog(TwoLayeredGUI.IProgressDialogProvider,TwoLayeredGUI.ProgressDialogSettings,System.Action{TwoLayeredGUI.IProgressDialogController,System.Object},System.Object)">
            <summary>
            Shows a modal progress dialog.
            </summary>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="settings">The dialog definition.</param>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="settings"/> or <paramref name="doWork"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.ShowDialog(TwoLayeredGUI.IProgressDialogProvider,System.String,System.Action{TwoLayeredGUI.IProgressDialogController,System.Object},System.Object,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a modal progress dialog with a title text.
            </summary>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="doWork"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.ShowDialog(TwoLayeredGUI.IProgressDialogProvider,System.String,System.Boolean,System.Action{TwoLayeredGUI.IProgressDialogController,System.Object},System.Object,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a modal progress dialog with a title text and indicates whether details should be shown.
            </summary>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="showDetails">A value that indicates whether the details area should be shown.</param>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="doWork"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.ShowDialog(TwoLayeredGUI.IProgressDialogProvider,System.String,System.Boolean,System.Int32,System.Int32,System.Action{TwoLayeredGUI.IProgressDialogController,System.Object},System.Object,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a modal progress dialog with a title text as well as a custom minimum and maximum progress value and indicates whether details should be shown.
            </summary>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="showDetails">A value that indicates whether the details area should be shown.</param>
            <param name="min">The minimum progress value.</param>
            <param name="max">The maximum progress value.</param>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="doWork"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.ShowDialog``1(TwoLayeredGUI.IProgressDialogProvider,TwoLayeredGUI.ProgressDialogSettings,System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)">
            <summary>
            Shows a modal progress dialog.
            </summary>
            <typeparam name="T">The type of the custom object <paramref name="info"/> passed to the <paramref name="doWork"/> delegate.</typeparam>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="settings">The dialog definition.</param>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="settings"/> or <paramref name="doWork"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.ShowDialog``1(TwoLayeredGUI.IProgressDialogProvider,System.String,System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a modal progress dialog with a title text.
            </summary>
            <typeparam name="T">The type of the custom object <paramref name="info"/> passed to the <paramref name="doWork"/> delegate.</typeparam>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="doWork"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.ShowDialog``1(TwoLayeredGUI.IProgressDialogProvider,System.String,System.Boolean,System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a modal progress dialog with a title text and indicates whether details should be shown.
            </summary>
            <typeparam name="T">The type of the custom object <paramref name="info"/> passed to the <paramref name="doWork"/> delegate.</typeparam>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="showDetails">A value that indicates whether the details area should be shown.</param>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="doWork"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderExtension.ProgressDialogUtilities.ShowDialog``1(TwoLayeredGUI.IProgressDialogProvider,System.String,System.Boolean,System.Int32,System.Int32,System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Shows a modal progress dialog with a title text as well as a custom minimum and maximum progress value and indicates whether details should be shown.
            </summary>
            <typeparam name="T">The type of the custom object <paramref name="info"/> passed to the <paramref name="doWork"/> delegate.</typeparam>
            <param name="provider">The GUI provider used for displaying the progress dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="showDetails">A value that indicates whether the details area should be shown.</param>
            <param name="min">The minimum progress value.</param>
            <param name="max">The maximum progress value.</param>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>, <paramref name="doWork"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.GUIProviderWrapper">
            <summary>
            An extensible wrapper around an implementation of the <see cref="T:TwoLayeredGUI.IGUIProvider"/> interface.
            </summary>
            <remarks>
            <para>This class implements the <see cref="T:TwoLayeredGUI.IGUIProvider"/> interface and serves as an extensible wrapper around another implementation of that interface.
              That other object implementing the interface is passed to the <see cref="M:TwoLayeredGUI.GUIProviderWrapper.#ctor(TwoLayeredGUI.IGUIProvider)">constructor</see>.</para>
            <para>The properties that return specific GUI providers are declared <see langword="virtual"/> and can hence be overridden in derived classes.
              Therefore, this class can be used in two ways:</para>
            <list type="bullet">
            	<item>A <see cref="T:TwoLayeredGUI.GUIProviderWrapper"/> instance returns objects from another <see cref="T:TwoLayeredGUI.IGUIProvider"/> implementation.
                In this case, the <see cref="T:TwoLayeredGUI.GUIProviderWrapper"/> serves as a wrapper in order to hide any particular implementations of <see cref="T:TwoLayeredGUI.IGUIProvider"/>.</item>
            	<item>A subclass of <see cref="T:TwoLayeredGUI.GUIProviderWrapper"/> overrides some or all of the properties to return specific GIU providers.
                Like this, the wrapped <see cref="T:TwoLayeredGUI.IGUIProvider"/> implementation can be used as a fallback level.</item>
            </list>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.GUIProviderWrapper.#ctor(TwoLayeredGUI.IGUIProvider)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="inner">The wrapped instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.GUIProviderWrapper.inner">
            <summary>
            The wrapped instance.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.MessageBox">
            <summary>
            Returns an object that can be used to show message boxes.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.SupportsMessageBox">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.GUIProviderWrapper.MessageBox"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.GUIProviderWrapper.MessageBox"/>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.InputBox">
            <summary>
            Returns an object that can be used to show input boxes.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.SupportsInputBox">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.GUIProviderWrapper.InputBox"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.GUIProviderWrapper.InputBox"/>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.ProgressDialog">
            <summary>
            Returns an object that can be used to show progress dialogs.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.SupportsProgressDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.GUIProviderWrapper.ProgressDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.GUIProviderWrapper.ProgressDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.FileDialog">
            <summary>
            Returns an object that can be used to show file dialogs.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.SupportsFileDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.GUIProviderWrapper.FileDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.GUIProviderWrapper.FileDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.DirectoryDialog">
            <summary>
            Returns an object that can be used to show directory selection dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.GUIProviderWrapper.SupportsDirectoryDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.SupportsDirectoryDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.GUIProviderWrapper.DirectoryDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.GUIProviderWrapper.DirectoryDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.WizardDialog">
            <summary>
            Returns an object that can be used to show wizard dialogs.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.GUIProviderWrapper.SupportsWizardDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.SupportsWizardDialog">
            <summary>
            Indicates whether the <see cref="P:TwoLayeredGUI.GUIProviderWrapper.WizardDialog"/> property returns a value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.GUIProviderWrapper.WizardDialog"/>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.DialogBox">
            <summary>
            Returns an object that can be used to show dialog boxes.
            </summary>
            <exception cref="T:System.NotSupportedException">The current implementation does not support the requested specific GUI provider.</exception>
            <seealso cref="P:TwoLayeredGUI.GUIProviderWrapper.SupportsDialogBox"/>
        </member>
        <member name="P:TwoLayeredGUI.GUIProviderWrapper.SupportsDialogBox">
            <summary>
            Indicates whether the <see cref="P:DialogBox"/> property returns a value.
            </summary>
            <seealso cref="P:DialogBox"/>
        </member>
        <member name="T:TwoLayeredGUI.IDefinedButton">
            <summary>
            Provides acces to the definition of a button.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.IDefinedButton.Settings">
            <summary>
            Gets the associated <see cref="T:TwoLayeredGUI.ButtonDef"/> object.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.IDetailsButton">
            <summary>
            Provides a uniform way to reflect the state of the details area in various controls.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IDetailsButton.UpdateDetailsState(System.Boolean)">
            <summary>
            Updates the control state according to the visibility of the dialog box's details area.
            </summary>
            <param name="detailsShown">The new visibility of the details area.</param>
        </member>
        <member name="T:TwoLayeredGUI.IDialogBoxProvider">
            <summary>
            An interface for objects that can display a dialog box.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IDialogBoxProvider.Show(TwoLayeredGUI.DialogBoxSettings,TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Displays a dialog box whose contents is based on a <see cref="N:TwoLayeredGUI.SimpleDialogs">Simple Dialogs</see> user interface definition.
            </summary>
            <param name="settings">The settings object that describes the dialog box.</param>
            <param name="root">The root element of the user interface.</param>
            <returns>The button that was used to close the dialog box or <see cref="P:TwoLayeredGUI.ButtonDef.CloseButton"/>, if the dialog box was not closed using any of the buttons.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.IMessageBoxProvider">
            <summary>
            An interface for objects that can display a message box.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IMessageBoxProvider.Show(TwoLayeredGUI.MessageBoxSettings,System.Boolean@)">
            <summary>
            Displays a message box.
            </summary>
            <param name="settings">The message box settings.</param>
            <param name="rememberChoice">Indicates whether the selected option should be stored and chosen right away instead of displaying the message box in the future.</param>
            <returns>The button that was used to close the message box or <see cref="P:TwoLayeredGUI.ButtonDef.CloseButton"/>, if the message box was not closed using any of the buttons.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.ImmutableArrayAccessor">
            <summary>
            A wrapper around an <see cref="T:System.Collections.IList"/> that implements <see cref="T:TwoLayeredGUI.IImmutableArray`1"/> with item type <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ImmutableArrayAccessor.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="source">The wrapped list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ImmutableArrayAccessor.source">
            <summary>
            The wrapped list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ImmutableArrayAccessor.GetEnumerator">
            <summary>
            Returns an enumerator over all elements of the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ImmutableArrayAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over all elements of the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ImmutableArrayAccessor.Item(System.Int32)">
            <summary>
            Gets the element at a given position.
            </summary>
            <param name="index">The position of the element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside of the allowable bounds of the list.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ImmutableArrayAccessor.Count">
            <summary>
            Returns the number of elements in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ImmutableArrayAccessor`1">
            <summary>
            A wrapper around an <see cref="T:System.Collections.Generic.IList`1"/> that implements <see cref="T:TwoLayeredGUI.IImmutableArray`1"/>. 
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ImmutableArrayAccessor`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="source">The wrapped list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ImmutableArrayAccessor`1.source">
            <summary>
            The wrapped list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ImmutableArrayAccessor`1.GetEnumerator">
            <summary>
            Returns an enumerator over all elements of the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ImmutableArrayAccessor`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over all elements of the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ImmutableArrayAccessor`1.Item(System.Int32)">
            <summary>
            Gets the element at a given position.
            </summary>
            <param name="index">The position of the element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside of the allowable bounds of the list.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ImmutableArrayAccessor`1.Count">
            <summary>
            Returns the number of elements in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.IndexedEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> subclass that stores an <see cref="T:System.Int32"/> index.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IndexedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="index">The index to store with the instance.</param>
        </member>
        <member name="F:TwoLayeredGUI.IndexedEventArgs.index">
            <summary>
            The index stored in the instance.
            </summary>
            <seealso cref="P:TwoLayeredGUI.IndexedEventArgs.Index"/>
        </member>
        <member name="P:TwoLayeredGUI.IndexedEventArgs.Index">
            <summary>
            The index stored in the instance.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.INotifyListChanged">
            <summary>
            This interface provides some events that inform about changes made to an ordered list.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.INotifyListChanged.ItemInserted">
            <summary>
            This event is fired when an item has been inserted.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.INotifyListChanged.ItemRemoved">
            <summary>
            This event is fired when an item has been deleted.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.INotifyListChanged.ItemReplaced">
            <summary>
            This event is fired when an item has been replaced without modifying the total length of the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.IO.NamespaceDoc">
            <summary>
            This namespace contains helper types related to I/O tasks.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.IO.StreamProtector">
            <summary>
            A <see cref="T:System.IO.Stream"/> wrapper that prevents the underlying stream from being closed.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamProtector.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="innerStream">The wrapped stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerStream"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.IO.StreamProtector.innerStream">
            <summary>
            The wrapped stream.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamProtector.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="offset">The zero-based offset in <paramref name="buffer"/> at which to begin copying.</param>
            <param name="count">The number of bytes to copy from <paramref name="buffer"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> and <paramref name="count"/> denote an invalid index range for <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">The wrapped stream has been released.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamProtector.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The new length.</param>
            <exception cref="T:System.IO.IOException">An I/O error has occurred.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">The wrapped stream has been released.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamProtector.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position in the stream.
            </summary>
            <param name="offset">The offset by which to move the position.</param>
            <param name="origin"><paramref name="offset"/> will be set relative to this value.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">The wrapped stream has been released.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamProtector.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream.
            </summary>
            <param name="buffer">The destination buffer.</param>
            <param name="offset">The zero-based index in <paramref name="buffer"/> at which to begin writing.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The number of read bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> and <paramref name="count"/> denote an invalid index range for <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">The wrapped stream has been released.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamProtector.Flush">
            <summary>
            Ensures that any buffered changes are written to the underlying stream.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error has occurred.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamProtector.Close">
            <summary>
            Closes the outer stream without closing the wrapped stream.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamProtector.Dispose(System.Boolean)">
            <summary>
            Disposes of the wrapped stream without disposing of the wrapped stream.
            </summary>
            <param name="disposing">A value that indicates whether managed resources should be released.</param>
        </member>
        <member name="P:TwoLayeredGUI.IO.StreamProtector.Position">
            <summary>
            Gets or sets the current position in the stream.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error has occurred.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">The wrapped stream has been released.</exception>
        </member>
        <member name="P:TwoLayeredGUI.IO.StreamProtector.Length">
            <summary>
            Returns the total length of the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">The wrapped stream has been released.</exception>
        </member>
        <member name="P:TwoLayeredGUI.IO.StreamProtector.CanWrite">
            <summary>
            Indicates whether writing to the stream is possible.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.IO.StreamProtector.CanSeek">
            <summary>
            Indicates whether changing the position in the stream is possible.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.IO.StreamProtector.CanRead">
            <summary>
            Indicates whether reading from the stream is possible.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.IO.StreamUtilities">
            <summary>
            This class provides some general utility routines for working with <see cref="T:System.IO.Stream">streams</see> and related classes.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.IO.StreamUtilities.COPY_SIZE">
            <summary>
            The chunk size to copy at a time.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamUtilities.Write7BitEncodedInt32(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes an <see cref="T:System.Int32"/> value using a <see cref="T:System.IO.BinaryWriter"/> in a space-saving manner.
            </summary>
            <param name="writer">The destination writer.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream of <paramref name="writer"/> has been disposed.</exception>
            <remarks>
            <para>Writes an <see cref="T:System.Int32"/> value in a way that groups of seven bits are written, along with one marker bit that indicates whether another byte will follow.
              By using this method, smaller numbers will use less bytes.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.IO.StreamUtilities.Read7BitEncodedInt32(System.IO.BinaryReader)"/>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamUtilities.Read7BitEncodedInt32(System.IO.BinaryReader)">
            <summary>
            Reads an <see cref="T:System.Int32"/> value using a <see cref="T:System.IO.BinaryReader"/> that was written by <see cref="M:TwoLayeredGUI.IO.StreamUtilities.Write7BitEncodedInt32(System.IO.BinaryWriter,System.Int32)"/>.
            </summary>
            <param name="reader">The source reader.</param>
            <returns>The read value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream of <paramref name="reader"/> has been disposed.</exception>
            <seealso cref="M:TwoLayeredGUI.IO.StreamUtilities.Write7BitEncodedInt32(System.IO.BinaryWriter,System.Int32)"/>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamUtilities.WriteStreamChunk(System.IO.BinaryWriter,System.IO.Stream)">
            <summary>
            Embeds the contents of a <see cref="T:System.IO.Stream"/> into another stream using a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The destination writer.</param>
            <param name="stream">The source stream.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> contains more than <see cref="F:System.Int32.MaxValue"/> bytes of data.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="stream"/> does not support reading or seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream of <paramref name="writer"/>, or <paramref name="stream"/>, has been disposed.</exception>
            <remarks>
            <para>This method copies the contents of <paramref name="stream"/> to the destination <paramref name="writer"/>.
              The contents of <paramref name="stream"/> is length-prefixed, so it can be read again by <see cref="M:TwoLayeredGUI.IO.StreamUtilities.ReadStreamChunk(System.IO.BinaryReader)"/> without supplying the size of the written data.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.IO.StreamUtilities.ReadStreamChunk(System.IO.BinaryReader)"/>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamUtilities.ReadStreamChunk(System.IO.BinaryReader)">
            <summary>
            Extracts a chunk of data written with <see cref="M:TwoLayeredGUI.IO.StreamUtilities.WriteStreamChunk(System.IO.BinaryWriter,System.IO.Stream)"/> from a stream using a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The source reader.</param>
            <returns>A <see cref="T:System.IO.MemoryStream"/> that contains the data returned by <paramref name="reader"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream of <paramref name="reader"/> has been disposed.</exception>
            <seealso cref="M:TwoLayeredGUI.IO.StreamUtilities.WriteStreamChunk(System.IO.BinaryWriter,System.IO.Stream)"/>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamUtilities.WriteByteArray(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Writes an array of <see cref="T:System.Byte"/> values using a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The destination writer.</param>
            <param name="bytes">The data to write.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream of <paramref name="writer"/> has been disposed.</exception>
            <remarks>
            <para>This method copies the contents of <paramref name="bytes"/> to the destination <paramref name="writer"/>.
              The contents of <paramref name="bytes"/> is length-prefixed, so it can be read again by <see cref="M:TwoLayeredGUI.IO.StreamUtilities.ReadByteArray(System.IO.BinaryReader)"/> without supplying the size of the written data.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.IO.StreamUtilities.ReadByteArray(System.IO.BinaryReader)"/>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamUtilities.ReadByteArray(System.IO.BinaryReader)">
            <summary>
            Reads an array of <see cref="T:System.Byte"/> values written with <see cref="M:TwoLayeredGUI.IO.StreamUtilities.WriteByteArray(System.IO.BinaryWriter,System.Byte[])"/> from a stream using a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The source reader.</param>
            <returns>The bytes returned by <paramref name="reader"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream of <paramref name="reader"/> has been disposed.</exception>
            <seealso cref="M:TwoLayeredGUI.IO.StreamUtilities.WriteByteArray(System.IO.BinaryWriter,System.Byte[])"/>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamUtilities.WriteGuid(System.IO.BinaryWriter,System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> using a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The destination writer.</param>
            <param name="guid">The <see cref="T:System.Guid"/> value to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream of <paramref name="writer"/> has been disposed.</exception>
            <seealso cref="M:TwoLayeredGUI.IO.StreamUtilities.ReadGuid(System.IO.BinaryReader)"/>
        </member>
        <member name="M:TwoLayeredGUI.IO.StreamUtilities.ReadGuid(System.IO.BinaryReader)">
            <summary>
            Reads a <see cref="T:System.Guid"/> using a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The source reader.</param>
            <returns>The <see cref="T:System.Guid"/> value returned by <paramref name="reader"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream of <paramref name="reader"/> has been disposed.</exception>
            <seealso cref="M:TwoLayeredGUI.IO.StreamUtilities.WriteGuid(System.IO.BinaryWriter,System.Guid)"/>
        </member>
        <member name="T:TwoLayeredGUI.IParametrizedCreatingList`2">
            <summary>
            An interface for lists that create their own items based on a parameter.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
            <typeparam name="TParam">The type of the parameter supplied upon item creation.</typeparam>
            <seealso cref="T:TwoLayeredGUI.ICreatingList`1"/>
        </member>
        <member name="M:TwoLayeredGUI.IParametrizedCreatingList`2.Add(`1)">
            <summary>
            Appends a new item at the end of the list.
            </summary>
            <param name="parameter">A parameter that controls the creation of the item.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:TwoLayeredGUI.IParametrizedCreatingList`2.Insert(System.Int32,`1)">
            <summary>
            Inserts a new item at the given position in the list.
            </summary>
            <param name="index">The position of the new item.</param>
            <param name="parameter">A parameter that controls the creation of the item.</param>
            <returns>The newly created item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IParametrizedCreatingList`2.Remove(`0)">
            <summary>
            Removes the first occurrence of a given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether <paramref name="item"/> was deleted.</returns>
        </member>
        <member name="M:TwoLayeredGUI.IParametrizedCreatingList`2.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position from the list.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IParametrizedCreatingList`2.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IParametrizedCreatingList`2.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from a position to another position in the list.
            </summary>
            <param name="oldIndex">The old index of the item.</param>
            <param name="newIndex">The new index of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> or <paramref name="newIndex"/> are not within the allowable boundaries for indices in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IParametrizedCreatingList`2.Contains(`0)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether the list contains <paramref name="item"/>.</returns>
        </member>
        <member name="M:TwoLayeredGUI.IParametrizedCreatingList`2.IndexOf(`0)">
            <summary>
            Determines the position of a given item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The zero-based index of <paramref name="item"/>, or a negative value if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="T:TwoLayeredGUI.IProgressDialogController">
            <summary>
            Provides access to the properties of a progress dialog.
            </summary>
            <remarks>
            <para>Any objects that implement this interface are ready to display a progress dialog.
              Use the <see cref="M:TwoLayeredGUI.IProgressDialogController.Show"/>, <see cref="M:TwoLayeredGUI.IProgressDialogController.ShowDialog``1(System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)"/> and <see cref="M:TwoLayeredGUI.IProgressDialogController.ShowDialog``1(System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)"/> methods to display the dialog.
              The properties and methods in this interface can then be used to influence the displayed dialog.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.IProgressIndicatorController">
            <summary>
            Provides access to the properties of a progress indicator.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IProgressIndicatorController.AddDetail(System.String)">
            <summary>
            Appends a message in the details area.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method appends a message in the details area of a progress indicator.
              If <see cref="P:TwoLayeredGUI.ProgressDialogSettings.ShowDetails"/> is set to <see langword="false"/>, this will not have any effect.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.IProgressIndicatorController.StatusMessage">
            <summary>
            Gets or sets the current status message.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.IProgressIndicatorController.Progress">
            <summary>
            Gets or sets the current progress displayed in the progress indicator.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.IProgressIndicatorController.Minimum">
            <summary>
            The minimum value for <see cref="P:TwoLayeredGUI.IProgressIndicatorController.Progress"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.IProgressIndicatorController.Maximum">
            <summary>
            The maximum value for <see cref="P:TwoLayeredGUI.IProgressIndicatorController.Progress"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.IProgressIndicatorController.IsCanceled">
            <summary>
            Indicates whether the operation has been canceled by the user.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.IProgressIndicatorController.WorkCompleted">
            <summary>
            This event is fired when the time-consuming operation whose progress is displayed has completed.
            </summary>
            <remarks>
            <para>This event is fired when the time-consuming operation whose progress is displayed has completed.
              Note that this cannot happen when the operation is not executed by the progress indicator.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.IProgressDialogController.Close">
            <summary>
            Closes the progress dialog.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IProgressDialogController.ShowDialog``1(System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)">
            <summary>
            Shows the progress dialog modally and executes an operation.
            </summary>
            <typeparam name="T">The type of the custom object <paramref name="info"/> passed to the <paramref name="doWork"/> delegate.</typeparam>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="doWork"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The dialog is already being displayed.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IProgressDialogController.Show``1(System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)">
            <summary>
            Shows the progress dialog non-modally and executes an operation.
            </summary>
            <typeparam name="T">The type of the custom object <paramref name="info"/> passed to the <paramref name="doWork"/> delegate.</typeparam>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <exception cref="T:System.InvalidOperationException">The dialog is already being displayed.</exception>
        </member>
        <member name="M:TwoLayeredGUI.IProgressDialogController.Show">
            <summary>
            Shows the progress dialog non-modally without executing an operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">The dialog is already being displayed.</exception>
        </member>
        <member name="E:TwoLayeredGUI.IProgressDialogController.ProgressDialogClosed">
            <summary>
            This event is fired when the progress dialog has been closed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.IProgressDialogProvider">
            <summary>
            An interface for objects that can display or prepare a progress dialog.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.IProgressDialogProvider.Create(TwoLayeredGUI.ProgressDialogSettings)">
            <summary>
            Creates a progress dialog based on a <see cref="T:TwoLayeredGUI.ProgressDialogSettings"/> instance.
            </summary>
            <param name="settings">The dialog definition.</param>
            <returns>A controller object for the created dialog.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method creates a progress dialog and a controller object that wraps the dialog.
              The dialog is not automatically displayed.
              The methods of the returned controller object have to be used to show the dialog.</para>
            <para>The returned object might implement the <see cref="T:System.IDisposable"/> interface.
              In this case, make sure to call <see cref="M:System.IDisposable.Dispose"/> on the object when it is not required any more.</para>
            </remarks>
            <seealso cref="T:TwoLayeredGUI.IProgressDialogController"/>
        </member>
        <member name="T:TwoLayeredGUI.ListChangedEventArgs">
            <summary>
            Provides some information about a change in an ordered list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ListChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="index">The changed index.</param>
        </member>
        <member name="F:TwoLayeredGUI.ListChangedEventArgs.index">
            <summary>
            The changed index.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ListChangedEventArgs.Index"/>
        </member>
        <member name="P:TwoLayeredGUI.ListChangedEventArgs.Index">
            <summary>
            The changed index.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ListChangeKind">
            <summary>
            Describes a change operation to a list.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ListChangeKind.ItemInserted">
            <summary>
            An item has been inserted.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ListChangeKind.ItemRemoved">
            <summary>
            An item has been removed.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ListChangeKind.ItemReplaced">
            <summary>
            An item has been replaced.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ListChangeKind.ListChanged">
            <summary>
            The entire list has been changed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ListUtilities">
            <summary>
            This class provides some utility methods for collection types.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.AsList``1(TwoLayeredGUI.ICreatingList{``0})">
            <summary>
            Wraps an <see cref="T:TwoLayeredGUI.ICreatingList`1"/> into a wrapper that implements <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="creatingList">The list to wrap.</param>
            <returns>The wrapper object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="creatingList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.AddSeveral``1(TwoLayeredGUI.ICreatingList{``0},System.Int32)">
            <summary>
            Appends several items to an <see cref="T:TwoLayeredGUI.ICreatingList`1"/>.
            </summary>
            <param name="list">The destination list.</param>
            <param name="count">The number of items to add.</param>
            <returns>The newly added items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.InsertSeveral``1(TwoLayeredGUI.ICreatingList{``0},System.Int32,System.Int32)">
            <summary>
            Inserts several items into an <see cref="T:TwoLayeredGUI.ICreatingList`1"/>.
            </summary>
            <param name="list">The destination list.</param>
            <param name="index">The index of the first new item in <paramref name="list"/>.</param>
            <param name="count">The number of items to insert.</param>
            <returns>The newly inserted items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative, or <paramref name="index"/> is negative or greater than the number of items in <paramref name="list"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.AsList``2(TwoLayeredGUI.IParametrizedCreatingList{``0,``1})">
            <summary>
            Wraps an <see cref="T:TwoLayeredGUI.IParametrizedCreatingList`2"/> into a wrapper that implements <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="creatingList">The list to wrap.</param>
            <returns>The wrapper object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="creatingList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.AddSeveral``2(TwoLayeredGUI.IParametrizedCreatingList{``0,``1},System.Int32,System.Func{System.Int32,``1})">
            <summary>
            Appends several items to an <see cref="T:TwoLayeredGUI.IParametrizedCreatingList`2"/>.
            </summary>
            <param name="list">The destination list.</param>
            <param name="count">The number of items to add.</param>
            <param name="paramFunc">A function that supplies the construction parameter values for the new items, based on the zero-based index in the creation process of <paramref name="count"/> items.</param>
            <returns>The newly added items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="paramFunc"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.InsertSeveral``2(TwoLayeredGUI.IParametrizedCreatingList{``0,``1},System.Int32,System.Int32,System.Func{System.Int32,``1})">
            <summary>
            Inserts several items into an <see cref="T:TwoLayeredGUI.IParametrizedCreatingList`2"/>.
            </summary>
            <param name="list">The destination list.</param>
            <param name="index">The index of the first new item in <paramref name="list"/>.</param>
            <param name="count">The number of items to insert.</param>
            <param name="paramFunc">A function that supplies the construction parameter values for the new items, based on the zero-based index in the creation process of <paramref name="count"/> items.</param>
            <returns>The newly inserted items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="paramFunc"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative, or <paramref name="index"/> is negative or greater than the number of items in <paramref name="list"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1">
            <summary>
            Wraps an <see cref="T:TwoLayeredGUI.ICreatingList`1"/> in an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.#ctor(TwoLayeredGUI.ICreatingList{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="innerList">The wrapped list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.innerList">
            <summary>
            The inner list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.IndexOf(`0)">
            <summary>
            Finds the position of an item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The zero-based position of <paramref name="item"/>, or a negative value if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.Insert(System.Int32,`0)">
            <summary>
            This method is not supported.
            </summary>
            <param name="index">Will be ignored.</param>
            <param name="item">Will be ignored.</param>
            <exception cref="T:System.NotSupportedException">The method is invoked.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.RemoveAt(System.Int32)">
            <summary>
            Remove an item at a specified position in the list.
            </summary>
            <param name="index">The position of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.Add(`0)">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">Will be ignored.</param>
            <exception cref="T:System.NotSupportedException">The method is invoked.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.Contains(`0)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found in the list.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.Remove(`0)">
            <summary>
            Removes a given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether <paramref name="item"/> was successfully removed.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.Item(System.Int32)">
            <summary>
            Gets an item in the list.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.NotSupportedException">A value is assigned to the indexer.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ListUtilities.CreatingListAdapter`1.IsReadOnly">
            <summary>
            Indicates whether the list is protected against modifications.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2">
            <summary>
            Wraps an <see cref="T:TwoLayeredGUI.IParametrizedCreatingList`2"/> in an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.#ctor(TwoLayeredGUI.IParametrizedCreatingList{`0,`1})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="innerList">The wrapped list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.innerList">
            <summary>
            The inner list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.IndexOf(`0)">
            <summary>
            Finds the position of an item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The zero-based position of <paramref name="item"/>, or a negative value if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.Insert(System.Int32,`0)">
            <summary>
            This method is not supported.
            </summary>
            <param name="index">Will be ignored.</param>
            <param name="item">Will be ignored.</param>
            <exception cref="T:System.NotSupportedException">The method is invoked.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.RemoveAt(System.Int32)">
            <summary>
            Remove an item at a specified position in the list.
            </summary>
            <param name="index">The position of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.Add(`0)">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">Will be ignored.</param>
            <exception cref="T:System.NotSupportedException">The method is invoked.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.Contains(`0)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found in the list.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.Remove(`0)">
            <summary>
            Removes a given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether <paramref name="item"/> was successfully removed.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.Item(System.Int32)">
            <summary>
            Gets an item in the list.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.NotSupportedException">A value is assigned to the indexer.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ListUtilities.ParametrizedCreatingListAdapter`2.IsReadOnly">
            <summary>
            Indicates whether the list is protected against modifications.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.MessageBoxSettings">
            <summary>
            Stores settings for a message box.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance with buttons.
            </summary>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance with a message text and buttons.
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a definition for an information message box with a custom message and the specified buttons.
              If <paramref name="buttons"/> is empty, the message box will have a <see cref="P:TwoLayeredGUI.ButtonDef.CloseButton"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(System.String,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance with a title and a message text and buttons.
            </summary>
            <param name="title">The title of the message box.</param>
            <param name="message">The message to be displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a definition for a custom message box with the given message text and the specified buttons.
              If <paramref name="buttons"/> is empty, the message box will have a <see cref="P:TwoLayeredGUI.ButtonDef.CloseButton"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(System.Exception,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">The exception.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a definition for an error message box that shows the message of the specified <paramref name="exception"/>.
              The details area of the message box contains the complete exception information.
              If <paramref name="buttons"/> is empty, the message box has a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> and a <see cref="F:TwoLayeredGUI.DefaultButtonKind.ShowDetails"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(System.String,System.Exception,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on an <see cref="T:System.Exception"/> with a custom message.
            </summary>
            <param name="message">The message to display.</param>
            <param name="exception">The exception.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a definition for an error message box that displays the specified message.
              The details area of the message box contains the complete exception information of the <paramref name="exception"/> object.
              If <paramref name="buttons"/> is empty, the message box has a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> and a <see cref="F:TwoLayeredGUI.DefaultButtonKind.ShowDetails"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(TwoLayeredGUI.MessageBoxSettings,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on another instance with custom buttons.
            </summary>
            <param name="template">The template whose settings are copied.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/>, <paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a definition for a message box based on the supplied template with a custom message.
              If <paramref name="buttons"/> is not empty, the buttons found in <paramref name="buttons"/> will be used instead of those found in <paramref name="template"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(TwoLayeredGUI.MessageBoxSettings,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on another instance with a custom message and buttons.
            </summary>
            <param name="template">The template whose settings are copied.</param>
            <param name="message">The message to be displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a definition for a message box based on the supplied template with a custom message.
              If <paramref name="buttons"/> is not empty, the buttons found in <paramref name="buttons"/> will be used instead of those found in <paramref name="template"/>.
              If neither <paramref name="buttons"/> nor <paramref name="template"/> contain any buttons, the message box has a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(TwoLayeredGUI.MessageBoxSettings,System.String,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on another instance with a custom title and message and buttons.
            </summary>
            <param name="template">The template whose settings are copied.</param>
            <param name="title">The dialog title.</param>
            <param name="message">The message to be displayed.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a definition for a message box based on the supplied template with a custom message.
              If <paramref name="buttons"/> is not empty, the buttons found in <paramref name="buttons"/> will be used instead of those found in <paramref name="template"/>.
              If neither <paramref name="buttons"/> nor <paramref name="template"/> contain any buttons, the message box has a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(TwoLayeredGUI.MessageBoxSettings,System.Exception,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on a template and an <see cref="T:System.Exception"/>.
            </summary>
            <param name="template">The template whose settings are copied.</param>
            <param name="exception">The exception.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a definition for a message box like that described by <paramref name="template"/> that shows the message of the specified <paramref name="exception"/>.
              The details area of the message box contains the complete exception information.
              If <paramref name="buttons"/> is not empty, the buttons found in <paramref name="buttons"/> will be used instead of those found in <paramref name="template"/>.
              If neither <paramref name="buttons"/> nor <paramref name="template"/> contain any buttons, the message box has a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> and a <see cref="F:TwoLayeredGUI.DefaultButtonKind.ShowDetails"/> button.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.#ctor(TwoLayeredGUI.MessageBoxSettings,System.String,System.Exception,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on a template and an <see cref="T:System.Exception"/> with a custom message.
            </summary>
            <param name="template">The template whose settings are copied.</param>
            <param name="message">The message to display.</param>
            <param name="exception">The exception.</param>
            <param name="buttons">The buttons to be shown in the message box.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a definition for a message box like that described by <paramref name="template"/> that displays the specified message.
              The details area of the message box contains the complete exception information of the <paramref name="exception"/> object.
              If <paramref name="buttons"/> is not empty, the buttons found in <paramref name="buttons"/> will be used instead of those found in <paramref name="template"/>.
              If neither <paramref name="buttons"/> nor <paramref name="template"/> contain any buttons, the message box has a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Close"/> and a <see cref="F:TwoLayeredGUI.DefaultButtonKind.ShowDetails"/> button.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.message">
            <summary>
            The message to be displayed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.Message"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.details">
            <summary>
            Some extended information about the message.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.Details"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.detailsFont">
            <summary>
            A font used in the details area of the message box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.DetailsFont"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.canRememberChoice">
            <summary>
            Determines whether the message box contains a check box to suppress further appearances of the message box by storing the user's choice and applying it in the future without asking.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.CanRememberChoice"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.rememberChoice">
            <summary>
            The title of the check box to remember the user's choice and not show the message box again.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.RememberChoice"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.messageIcon">
            <summary>
            The icon displayed in the message box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.MessageIcon"/>
        </member>
        <member name="M:TwoLayeredGUI.MessageBoxSettings.Assign(TwoLayeredGUI.DialogBoxSettings)">
            <summary>
            Copies the settings of another object.
            </summary>
            <param name="other">The other object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.information">
            <summary>
            A template for an information message box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.Information"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.confirmation">
            <summary>
            A template for a confirmation message box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.Confirmation"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.warning">
            <summary>
            A template for a warning message box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.Warning"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageBoxSettings.error">
            <summary>
            A template for an error message box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.Error"/>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.Message">
            <summary>
            The message to be displayed.
            </summary>
            <value>
            <para>This property stores the actual message to be displayed.
              It can never be <see langword="null"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.Details">
            <summary>
            Some extended information about the message.
            </summary>
            <value>
            <para>This property may store extended information about the message which can be displayed in the message box, too.
              If this is not desired, assign <see langword="null"/> to this property.
              The default value is <see langword="null"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.DetailsFont">
            <summary>
            A font used in the details area of the message box.
            </summary>
            <value>
            <para>If an instance is assigned to this property, that instance defines the font settings used for details area of the message box.
              If the property is <see langword="null"/>, the font of the details area is determined by the <see cref="P:TwoLayeredGUI.DialogBoxSettings.DialogFont"/> property.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.CanRememberChoice">
            <summary>
            Determines whether the message box contains a check box to suppress further appearances of the message box by storing the user's choice and applying it in the future without asking.
            </summary>
            <value>
            <para>This property gets or sets whether the message box contains a check box to remember the user's current choice.
              If checked, the button that closed the message box can be stored by the underlying application.
              Should an equivalent message box be displayed in the future, the application can then use the former choice of the user without showing any message box.
              The default value is <see langword="false"/>.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.RememberChoice"/>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.RememberChoice">
            <summary>
            The title of the check box to remember the user's choice and not show the message box again.
            </summary>
            <value>
            <para>Gets or sets the title of the check box to remember the user's choice and not show the message box again.
              This property will never be <see langword="null"/>.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.MessageBoxSettings.CanRememberChoice"/>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.MessageIcon">
            <summary>
            The icon displayed in the message box.
            </summary>
            <value>
            <para>Gets or sets an object that provides access to the icon to display in the message box.
              If set to <see langword="null"/>, no icon will be displayed.
              The default value is <see langword="null"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.Information">
            <summary>
            A template for an information message box.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.Confirmation">
            <summary>
            A template for a confirmation message box.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.Warning">
            <summary>
            A template for a warning message box.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.MessageBoxSettings.Error">
            <summary>
            A template for an error message box.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.MessageResultMemory">
            <summary>
            Stores a user's reactions to message boxes.
            </summary>
            <remarks>
            <para>This class remembers whether a user requested the result of a message box to be remembered every time the message box would otherwise pop up again.</para>
            <para>Every message box is assigned a string identifier.
              This identifier is passed along with the message box definition to the <see cref="M:TwoLayeredGUI.MessageResultMemory.ShowMessageBox(System.String,TwoLayeredGUI.MessageBoxSettings)"/> method.
              If the user opts to always use the same choice in a particular message box, that choice (i.e. the button used to close the message box) will be stored for the respective message box identifier.
              Subsequent calls to <see cref="M:TwoLayeredGUI.MessageResultMemory.ShowMessageBox(System.String,TwoLayeredGUI.MessageBoxSettings)"/> with the same message box identifier will then return the stored result right away, without actually displaying a message box.</para>
            <para>If a message box is displayed, the <see cref="P:TwoLayeredGUI.MessageResultMemory.MessageBoxProvider"/> object is used.
              Any class that implements the <see cref="T:TwoLayeredGUI.IMessageBoxProvider"/> interface can be used, thereby decoupling <see cref="T:TwoLayeredGUI.MessageResultMemory"/> from the GUI toolkit being used.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.MessageResultMemory.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.MessageResultMemory.#ctor(TwoLayeredGUI.IMessageBoxProvider)">
            <summary>
            Initializes a new instance with a message box provider.
            </summary>
            <param name="messageBoxProvider">The initial message box provider.</param>
        </member>
        <member name="F:TwoLayeredGUI.MessageResultMemory.storedResults">
            <summary>
            The stored message box results.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.MessageResultMemory.temporaryResults">
            <summary>
            The temporarily stored message box results.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.MessageResultMemory.ShowMessageBox(System.String,TwoLayeredGUI.MessageBoxSettings)">
            <summary>
            Retrieves the result of a message box with a given ID.
            </summary>
            <param name="id">The message ID.</param>
            <param name="settings">The message box definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">There is no stored message result for <paramref name="id"/> and the <see cref="P:TwoLayeredGUI.MessageResultMemory.MessageBoxProvider"/> property is set to <see langword="null"/>.</exception>
            <remarks>
            <para>This method checks the stored message box results.
              If a result is available for the specified message box identifier <paramref name="id"/>, that result will be returned.
              Otherwise, the message box will be displayed as described by the <paramref name="settings"/> object.
              If the user selected the option to remember his or her choice in the message box, the button used to close the message box will be stored for <paramref name="id"/>.</para>
            <para>If <see cref="P:TwoLayeredGUI.MessageResultMemory.StoreTemporaryResults"/> is set to <see langword="true"/> and an operation has been started using <see cref="M:TwoLayeredGUI.MessageResultMemory.StartOperation"/>, <see cref="F:TwoLayeredGUI.DefaultButtonKind.YesToAll"/> and <see cref="F:TwoLayeredGUI.DefaultButtonKind.NoToAll"/> message box results will automatically handled.</para>
            <para>The message box cannot be displayed if no <see cref="P:TwoLayeredGUI.MessageResultMemory.MessageBoxProvider"/> has been set.
              In that case, an <see cref="T:System.InvalidOperationException"/> will be thrown.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.MessageResultMemory.MessageBoxProvider"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageResultMemory.messageBoxProvider">
            <summary>
            The object that displays the message box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageResultMemory.MessageBoxProvider"/>
        </member>
        <member name="M:TwoLayeredGUI.MessageResultMemory.Contains(System.String)">
            <summary>
            Checks whether the object contains a message box result for a given message box identifier.
            </summary>
            <param name="id">The message box identifier.</param>
            <returns>A value that indicates whether there is a stored result for the given identifier.</returns>
        </member>
        <member name="F:TwoLayeredGUI.MessageResultMemory.storeTemporaryResults">
            <summary>
            Determines whether temporary message box results are stored.
            </summary>
            <seealso cref="P:TwoLayeredGUI.MessageResultMemory.StoreTemporaryResults"/>
        </member>
        <member name="F:TwoLayeredGUI.MessageResultMemory.isInOperation">
            <summary>
            Indicates whether an operation is currently being active.
            </summary>
            <seealso cref="M:TwoLayeredGUI.MessageResultMemory.StartOperation"/>
            <seealso cref="M:TwoLayeredGUI.MessageResultMemory.FinishOperation"/>
        </member>
        <member name="M:TwoLayeredGUI.MessageResultMemory.StartOperation">
            <summary>
            Declares the start of an operation.
            </summary>
            <remarks>
            <para>This method notifies the <see cref="T:TwoLayeredGUI.MessageResultMemory"/> that an operation has started.
              During this operation, <see cref="F:TwoLayeredGUI.DefaultButtonKind.YesToAll"/> and <see cref="F:TwoLayeredGUI.DefaultButtonKind.NoToAll"/> message box results can be automatically evaluated if <see cref="P:TwoLayeredGUI.MessageResultMemory.StoreTemporaryResults"/> is set to <see langword="true"/>.</para>
            <para>Any call to <see cref="M:TwoLayeredGUI.MessageResultMemory.StartOperation"/> should be followed by a call to <see cref="M:TwoLayeredGUI.MessageResultMemory.FinishOperation"/>.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.MessageResultMemory.FinishOperation"/>
            <seealso cref="P:TwoLayeredGUI.MessageResultMemory.StoreTemporaryResults"/>
        </member>
        <member name="M:TwoLayeredGUI.MessageResultMemory.FinishOperation">
            <summary>
            Declares the end of an operation.
            </summary>
            <remarks>
            <para>This method informs the <see cref="T:TwoLayeredGUI.MessageResultMemory"/> that an operation has ended.
              During this operation, <see cref="F:TwoLayeredGUI.DefaultButtonKind.YesToAll"/> and <see cref="F:TwoLayeredGUI.DefaultButtonKind.NoToAll"/> message box results could be automatically evaluated if <see cref="P:TwoLayeredGUI.MessageResultMemory.StoreTemporaryResults"/> is set to <see langword="true"/>.</para>
            <para><see cref="M:TwoLayeredGUI.MessageResultMemory.FinishOperation"/> should only and always be called after <see cref="M:TwoLayeredGUI.MessageResultMemory.StartOperation"/>.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.MessageResultMemory.StartOperation"/>
            <seealso cref="P:TwoLayeredGUI.MessageResultMemory.StoreTemporaryResults"/>
        </member>
        <member name="P:TwoLayeredGUI.MessageResultMemory.MessageBoxProvider">
            <summary>
            The object that displays the message box.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.MessageResultMemory.Item(System.String)">
            <summary>
            Provides access to a stored message box result by the message box identifier.
            </summary>
            <paramref name="id"/>
            <value>
            <para>This property provides access to the stored message box results by their message box identifiers.
              <see langword="null"/> will be returned for unknown identifiers.
              Likewise, assigning <see langword="null"/> will delete the result for the respective <paramref name="id"/>.</para>
            <para>Note that only copies of the <see cref="T:TwoLayeredGUI.ButtonDef"/> instaces are stored and returned.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.MessageResultMemory.AllIDs">
            <summary>
            Returns an enumeration of all message box identifiers for which there are stored results available.
            </summary>
            <returns>The enumeration.</returns>
        </member>
        <member name="P:TwoLayeredGUI.MessageResultMemory.StoreTemporaryResults">
            <summary>
            Determines whether temporary message box results are stored.
            </summary>
            <value>
            <para>If this option is enabled, the message results of any calls to <see cref="M:TwoLayeredGUI.MessageResultMemory.ShowMessageBox(System.String,TwoLayeredGUI.MessageBoxSettings)"/> after <see cref="M:TwoLayeredGUI.MessageResultMemory.StartOperation"/> and before <see cref="M:TwoLayeredGUI.MessageResultMemory.FinishOperation"/> will be especially processed.
              If the resulting button has its <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> property set to <see cref="F:TwoLayeredGUI.DefaultButtonKind.YesToAll"/>, all subsequent message boxes with the same message box identifier that contain a <see cref="F:TwoLayeredGUI.DefaultButtonKind.Yes"/> button will not be displayed and will automatically return that <see cref="F:TwoLayeredGUI.DefaultButtonKind.Yes"/> button.
              Likewise, message boxes with the same identifier will automatically evaluate to a button with <see cref="F:TwoLayeredGUI.DefaultButtonKind.No"/> set for its <see cref="P:TwoLayeredGUI.ButtonDef.Kind"/> property after a message box was closed using a <see cref="F:TwoLayeredGUI.DefaultButtonKind.NoToAll"/> button.</para>
            <para>The default value is <see langword="true"/>.</para>
            </value>
            <seealso cref="M:TwoLayeredGUI.MessageResultMemory.StartOperation"/>
            <seealso cref="M:TwoLayeredGUI.MessageResultMemory.FinishOperation"/>
        </member>
        <member name="T:TwoLayeredGUI.NamedObject`1">
            <summary>
            Stores an object along with a name.
            </summary>
            <typeparam name="T">The type of the object to store.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.NamedObject`1.#ctor(`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:TwoLayeredGUI.NamedObject`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance with a name.
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The title of the object.</param>
        </member>
        <member name="F:TwoLayeredGUI.NamedObject`1.obj">
            <summary>
            The object.
            </summary>
            <seealso cref="P:TwoLayeredGUI.NamedObject`1.Object"/>
        </member>
        <member name="F:TwoLayeredGUI.NamedObject`1.name">
            <summary>
            The title of the object.
            </summary>
            <seealso cref="P:TwoLayeredGUI.NamedObject`1.Name"/>
        </member>
        <member name="M:TwoLayeredGUI.NamedObject`1.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            This method processes a change of a property value that is about to happen.
            </summary>
            <param name="e">An object that contains some information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:TwoLayeredGUI.NamedObject`1.PropertyChanging"/>
        </member>
        <member name="M:TwoLayeredGUI.NamedObject`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This method processes a change of a property value that has just happened.
            </summary>
            <param name="e">An object that contains some information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:TwoLayeredGUI.NamedObject`1.PropertyChanged"/>
        </member>
        <member name="M:TwoLayeredGUI.NamedObject`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string representation of the object.</returns>
            <remarks>
            <para>This implementation returns the value of the <see cref="P:TwoLayeredGUI.NamedObject`1.Name"/> property.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.NamedObject`1.Object">
            <summary>
            The object.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.NamedObject`1.Name">
            <summary>
            The title of the object.
            </summary>
            <value>
            <para>Gets or sets the title of the object.
              This can never be <see langword="null"/>.</para>
            </value>
        </member>
        <member name="E:TwoLayeredGUI.NamedObject`1.PropertyChanging">
            <summary>
            This event is fired when a property value is about to be changed.
            </summary>
            <seealso cref="M:TwoLayeredGUI.NamedObject`1.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)"/>
        </member>
        <member name="E:TwoLayeredGUI.NamedObject`1.PropertyChanged">
            <summary>
            This event is fired when a property value has just been changed.
            </summary>
            <seealso cref="M:TwoLayeredGUI.NamedObject`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
        </member>
        <member name="T:TwoLayeredGUI.NamespaceDoc">
            <summary>
            This is the root namespace of the Two-Layered GUI Toolkit.
            It contains base classes and general utilities for the library.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.OptionEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> subclass that informs about the state of an option.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.OptionEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="index">The index of the option.</param>
            <param name="state">The state of the option.</param>
        </member>
        <member name="F:TwoLayeredGUI.OptionEventArgs.index">
            <summary>
            The index of the option.
            </summary>
            <seealso cref="P:TwoLayeredGUI.OptionEventArgs.Index"/>
        </member>
        <member name="F:TwoLayeredGUI.OptionEventArgs.state">
            <summary>
            The state of the option.
            </summary>
            <seealso cref="P:TwoLayeredGUI.OptionEventArgs.State"/>
        </member>
        <member name="P:TwoLayeredGUI.OptionEventArgs.Index">
            <summary>
            The index of the option.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.OptionEventArgs.State">
            <summary>
            The state of the option.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ParametrizedCreatingListBase`2">
            <summary>
            A basic default implementation of the <see cref="T:TwoLayeredGUI.IParametrizedCreatingList`2"/> interface.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
            <typeparam name="TParam">The type of the parameter supplied upon item creation.</typeparam>
            <remarks>
            <para>This class is a default implementation of the <see cref="T:TwoLayeredGUI.IParametrizedCreatingList`2"/> interface.
              It serves as a base class for implementations of the interface.
              Implementations need to override the <see cref="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.CreateItem(System.Int32,`1)"/> method.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.ParametrizedCreatingListBase`2.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.InsertItem(System.Int32,`0)">
            <summary>
            Inserts a created item into the list.
            </summary>
            <param name="index">The position at which the item should be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.CreateItem(System.Int32,`1)">
            <summary>
            Creates a new item for the list.
            </summary>
            <param name="destinationIndex">The position at which the item will initially be inserted.</param>
            <param name="parameter">The parameter that may influence the creation of the new item.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.Add(`1)">
            <summary>
            Appends a new item at the end of the list.
            </summary>
            <param name="parameter">A parameter that controls the creation of the item.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.Insert(System.Int32,`1)">
            <summary>
            Inserts a new item at the given position in the list.
            </summary>
            <param name="index">The position of the new item.</param>
            <param name="parameter">A parameter that controls the creation of the item.</param>
            <returns>The newly created item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ParametrizedCreatingListBase`2.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.Remove(`0)">
            <summary>
            Removes the first occurrence of a given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether <paramref name="item"/> was deleted.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position from the list.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from a position to another position in the list.
            </summary>
            <param name="oldIndex">The old index of the item.</param>
            <param name="newIndex">The new index of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> or <paramref name="newIndex"/> are not within the allowable boundaries for indices in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.Contains(`0)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether the list contains <paramref name="item"/>.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.IndexOf(`0)">
            <summary>
            Determines the position of a given item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The zero-based index of <paramref name="item"/>, or a negative value if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ParametrizedCreatingListBase`2.Item(System.Int32)">
            <summary>
            Gets an item at a specific position in the list.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside of the allowable index range.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ParametrizedCreatingListBase`2.Count">
            <summary>
            Returns the total number of items in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2">
            <summary>
            A basic implementation of the <see cref="T:TwoLayeredGUI.IParametrizedCreatingList`2"/> interface that invokes virtual methods upon any changes to the list.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
            <typeparam name="TParam">The type of the parameter supplied upon item creation.</typeparam>
            <remarks>
            <para>This class is a default implementation of the <see cref="T:TwoLayeredGUI.IParametrizedCreatingList`2"/> interface.
              It serves as a base class for implementations of the interface.
              Implementations need to override the <see cref="M:TwoLayeredGUI.ParametrizedCreatingListBase`2.CreateItem(System.Int32,`1)"/> method.
              Moreover, implementations may override the <see cref="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.ItemAdded(System.Int32,`0)"/>, <see cref="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.ItemRemoved(System.Int32,`0)"/>, and the <see cref="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.ItemMoved(System.Int32,System.Int32,`0)"/> methods to process any modifications to the list.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.Add(`1)">
            <summary>
            Appends a new item at the end of the list.
            </summary>
            <param name="parameter">A parameter that controls the creation of the item.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.Insert(System.Int32,`1)">
            <summary>
            Inserts a new item at the given position in the list.
            </summary>
            <param name="index">The position of the new item.</param>
            <param name="parameter">A parameter that controls the creation of the item.</param>
            <returns>The newly created item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ParametrizedCreatingListBase`2.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.Remove(`0)">
            <summary>
            Removes the first occurrence of a given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether <paramref name="item"/> was deleted.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position from the list.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.IImmutableArray`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from a position to another position in the list.
            </summary>
            <param name="oldIndex">The old index of the item.</param>
            <param name="newIndex">The new index of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> or <paramref name="newIndex"/> are not within the allowable boundaries for indices in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.ItemAdded(System.Int32,`0)">
            <summary>
            This method is invoked when an item has been inserted.
            </summary>
            <param name="index">The position of the new item.</param>
            <param name="item">The newly inserted item.</param>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.ItemRemoved(System.Int32,`0)">
            <summary>
            This method is invoked when an item has been removed.
            </summary>
            <param name="index">The previous position of the removed item.</param>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:TwoLayeredGUI.ParametrizedCreatingNotifyingListBase`2.ItemMoved(System.Int32,System.Int32,`0)">
            <summary>
            This method is invoked when an item has been moved in the list.
            </summary>
            <param name="oldIndex">The old index of the item.</param>
            <param name="newIndex">The new index of the item.</param>
            <param name="item">The moved item.</param>
        </member>
        <member name="T:TwoLayeredGUI.PartialImmutableArrayAccessor`1">
            <summary>
            An implementation of the <see cref="T:TwoLayeredGUI.IImmutableArray`1"/> interface that provides access to a limited section of a list.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.PartialImmutableArrayAccessor`1.#ctor(TwoLayeredGUI.IImmutableArray{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="source">The wrapped list.</param>
            <param name="startIndex">The first index in <paramref name="source"/> to provide access to.</param>
            <param name="count">The number of items from <paramref name="source"/> to provide access to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The range denoted by <paramref name="startIndex"/> and <paramref name="count"/> exceeds the valid index range of <paramref name="source"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.PartialImmutableArrayAccessor`1.source">
            <summary>
            The wrapped list.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.PartialImmutableArrayAccessor`1.offset">
            <summary>
            The first index in <see cref="F:TwoLayeredGUI.PartialImmutableArrayAccessor`1.source"/> to provide access to.
            </summary>
            <seealso cref="F:TwoLayeredGUI.PartialImmutableArrayAccessor`1.count"/>
        </member>
        <member name="F:TwoLayeredGUI.PartialImmutableArrayAccessor`1.count">
            <summary>
            The number of items from <see cref="F:TwoLayeredGUI.PartialImmutableArrayAccessor`1.count"/> to provide access to.
            </summary>
            <seealso cref="F:TwoLayeredGUI.PartialImmutableArrayAccessor`1.offset"/>
        </member>
        <member name="M:TwoLayeredGUI.PartialImmutableArrayAccessor`1.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.PartialImmutableArrayAccessor`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.PartialImmutableArrayAccessor`1.Item(System.Int32)">
            <summary>
            Gets an item at a specific position in the list.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside of the allowable index range.</exception>
        </member>
        <member name="P:TwoLayeredGUI.PartialImmutableArrayAccessor`1.Count">
            <summary>
            Returns the total number of items in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ProgressCompleteEventArgs">
            <summary>
            This class provides some information about a progress event after a progress operation was finished.
            </summary>
            <seealso cref="T:TwoLayeredGUI.IProgressIndicatorController"/>
            <seealso cref="T:TwoLayeredGUI.IProgressDialogController"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressCompleteEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="completed">Indicates whether the operation was completed (rather than canceled).</param>
        </member>
        <member name="F:TwoLayeredGUI.ProgressCompleteEventArgs.completed">
            <summary>
            Indicates whether the operation was completed (rather than canceled).
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressCompleteEventArgs.Completed"/>
            <seealso cref="P:TwoLayeredGUI.ProgressCompleteEventArgs.Canceled"/>
        </member>
        <member name="P:TwoLayeredGUI.ProgressCompleteEventArgs.Completed">
            <summary>
            Indicates whether the operation was completed (rather than canceled).
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressCompleteEventArgs.Canceled"/>
        </member>
        <member name="P:TwoLayeredGUI.ProgressCompleteEventArgs.Canceled">
            <summary>
            Indicates whether the operation was canceled and hence aborted before completion.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressCompleteEventArgs.Completed"/>
        </member>
        <member name="T:TwoLayeredGUI.ProgressDialogControllerBase">
            <summary>
            A base class for progress dialog controller objects.
            </summary>
            <remarks>
            <para>This class serves as a base class for objects that provide the business logic for a progress dialog box.
              Progress dialog boxes (or the objects managing the dialog boxes) should host an instance of a subclass of this class as a private member.
              The connection to that instance is created by implementing some abstract methods of <see cref="T:TwoLayeredGUI.ProgressDialogControllerBase"/> and by registering handlers for some of its events.</para>
            <para>The <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateProgress"/>, <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateStatusMessage"/> and <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateDetails"/> methods must be overridden in order to indicate the current progress information.
              It can be retrieved from the <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Progress"/>, <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.StatusMessage"/> and <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.GetNextDetail"/> properties and method, respectively.</para>
            <para>To display the window, the <see cref="M:TwoLayeredGUI.ProgressDialogControllerBase.ShowWindow(System.Boolean)"/> method has to be overridden.
              Likewise, <see cref="M:TwoLayeredGUI.ProgressDialogControllerBase.CloseWindow"/> must be overridden to close the window and <see cref="M:TwoLayeredGUI.ProgressDialogControllerBase.FinalizeWindow"/> to dispose it.
              When the window has been closed, <see cref="M:TwoLayeredGUI.ProgressDialogControllerBase.WindowClosed"/> must be invoked.
              While the dialog is displayed, <see cref="M:TwoLayeredGUI.ProgressDialogControllerBase.TryCloseWindow(System.Boolean)"/> must be invoked upon any attempt to close it.
              Only if that method returns <see langword="true"/>, the dialog box may be closed immediately.</para>
            </remarks>
            <seealso cref="T:TwoLayeredGUI.ProgressDialogControllerBase"/>
        </member>
        <member name="T:TwoLayeredGUI.ProgressIndicatorControllerBase">
            <summary>
            A base class for progress indicator controller objects.
            </summary>
            <remarks>
            <para>This class serves as a base class for objects that provide the business logic for a progress indicator control.
              Progress indicator controls should host an instance of a subclass of this class as a private member.
              The connection to that instance is created by implementing some abstract methods of <see cref="T:TwoLayeredGUI.ProgressIndicatorControllerBase"/> and by registering handlers for some of its events.</para>
            <para>The <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateProgress"/>, <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateStatusMessage"/> and <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateDetails"/> methods must be overridden in order to indicate the current progress information.
              It can be retrieved from the <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Progress"/>, <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.StatusMessage"/> and <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.GetNextDetail"/> properties and method, respectively.</para>
            <para>The time-consuming operation whose progress is to be displayed must be executed in the overridden <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.DoWork"/> method.
              Once that operation has been completed, the <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.FinishWork(System.Boolean)"/> method, which must also be overridden, must be called.
              As an alternative, those two methods may be implemented as empty methods, and <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.ExecutesWork"/> may be overridden to return <see langword="false"/>.
              In this case, it is your responsibility to run a worker thread and update the indicated progress from there, while this controller object exclusively manages the progress indicator.</para>
            </remarks>
            <seealso cref="T:TwoLayeredGUI.ProgressDialogControllerBase"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.lockObject">
            <summary>
            The object used for locking during cross-thread communication.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.LockObject"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.worker">
            <summary>
            The background worker object, while there is an operation running.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess">
            <summary>
            Starts a new worker thread.
            </summary>
            <exception cref="T:System.InvalidOperationException">The method is called while there is already an active process.</exception>
            <remarks>
            <para>This method starts a new background thread that executes the <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.DoWork"/> method.
              This is only the case if <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.ExecutesWork"/> returns <see langword="true"/>.
              Otherwise, this method will not do anything.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.ExecutesWork"/>
            <seealso cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.TerminateProcess"/>
            <seealso cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.DoWork"/>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.IsProcessActive"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.DoWork">
            <summary>
            Executes the operation that runs in a worker thread.
            </summary>
            <seealso cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.FinishWork(System.Boolean)">
            <summary>
            Executes actions upon the completion or cancellation of the time-consuming operation.
            </summary>
            <param name="completed">Indicates whether the process was completed.</param>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.TerminateProcess">
            <summary>
            Requests the cancellation of the worker thread.
            </summary>
            <remarks>
            <para>This method requests the cancellation of the worker thread, if there is an active worker thread.
              Otherwise, it will do nothing.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.IsProcessActive"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.CreateNotificationObject">
            <summary>
            Initializes a progress notification object.
            </summary>
            <returns>The newly created progress notification object.</returns>
            <remarks>
            <para>This method creates an object that notifies the progress indicator about a change in progress.
              The default implementation returns an instance of <see cref="T:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification"/>.
              Overridden versions may return an instance of a subclass of <see cref="T:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification"/>, but must never return <see langword="null"/>.</para>
            </remarks>
            <seealso cref="T:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.CreateNotificationObject(TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressChangeKind)">
            <summary>
            Initializes a progress notification object with change flags.
            </summary>
            <param name="change">The flags to set on the newly created object.</param>
            <returns>The newly created progress notification object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateProgress(TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification)">
            <summary>
            Updates the indicated progress according to the <see cref="T:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification"/> object.
            </summary>
            <param name="info">The information object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.ReportProgress(TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification)">
            <summary>
            Reports a change in progress to the user interface thread.
            </summary>
            <param name="info">The information object that describes what progress information has changed.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.IsProcessActive"/> returns <see langword="false"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.statusMessage">
            <summary>
            The current status message.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.StatusMessage"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateStatusMessage">
            <summary>
            Reacts to an update of the <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.StatusMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.progress">
            <summary>
            The current progress displayed in the progress indicator.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Progress"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateProgress">
            <summary>
            Reacts to an update of the <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Progress"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.minimum">
            <summary>
            The minimum value for <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Progress"/>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Minimum"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.maximum">
            <summary>
            The maximum value for <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Progress"/>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Maximum"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.details">
            <summary>
            The queue of detail messages.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.AddDetail(System.String)">
            <summary>
            Appends a message in the details area.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method appends a message in the details area of a progress indicator.
              If <see cref="P:TwoLayeredGUI.ProgressDialogSettings.ShowDetails"/> is set to <see langword="false"/>, this will not have any effect.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.GetNextDetail">
            <summary>
            Returns the next detail message.
            </summary>
            <returns>The next detail message.</returns>
            <exception cref="T:System.InvalidOperationException">There are no more detail messages pending.</exception>
            <remarks>
            <para>This method will return the next pending detail message and remove it from the internal list.
              If there are no more detail messages pending, the method will throw an <see cref="T:System.InvalidOperationException"/>.
              To prevent this, make sure to check <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.HasMoreDetails"/> beforehand.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.HasMoreDetails"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressIndicatorControllerBase.UpdateDetails">
            <summary>
            Reacts to the addition of a detail message.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.LockObject">
            <summary>
            Returns an object that can be used for locking during cross-thread communication.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.IsProcessActive">
            <summary>
            Indicates whether there currently is a process running whose progress can be indicated.
            </summary>
            <seealso cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/>
            <seealso cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.TerminateProcess"/>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.ExecutesWork">
            <summary>
            Indicates whether this progress indicator controller executes a work process itself.
            </summary>
            <value>
            <para>This property indicates whether this progress indicator controller executes a work process itself.
              If <see langword="true"/>, <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/> will start that work operation in a new thread.
              Otherwise, <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/> will not do anything.</para>
            <para>The default implementation always returns <see langword="true"/>.</para>
            </value>
            <seealso cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.StatusMessage">
            <summary>
            Gets or sets the current status message.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Progress">
            <summary>
            Gets or sets the current progress displayed in the progress indicator.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Minimum">
            <summary>
            The minimum value for <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Progress"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Maximum">
            <summary>
            The maximum value for <see cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.Progress"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.IsCanceled">
            <summary>
            Indicates whether the operation has been canceled by the user.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.HasMoreDetails">
            <summary>
            Indicates whether there are any detail messages pending.
            </summary>
            <seealso cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.GetNextDetail"/>
        </member>
        <member name="E:TwoLayeredGUI.ProgressIndicatorControllerBase.WorkCompleted">
            <summary>
            This event is fired when the time-consuming operation whose progress is displayed has completed.
            </summary>
            <remarks>
            <para>This event is fired when the time-consuming operation whose progress is displayed has completed.
              Note that this cannot happen when the operation is not executed by the progress indicator.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressChangeKind">
            <summary>
            This enumeration allows to specify what has changed.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressChangeKind.Progress">
            <summary>
            The progress value has changed.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressChangeKind.StatusMessage">
            <summary>
            The status message has changed.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressChangeKind.AddDetail">
            <summary>
            A detail information has been added.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification">
            <summary>
            This object is used to pass information about a change in progress information to the controller.
            </summary>
            <remarks>
            <para>This class can be used to communicate progress changes between the working thread and the controller.
              Classes derived from <see cref="T:TwoLayeredGUI.ProgressIndicatorControllerBase"/> may derive it to transport some additional information.</para>
            </remarks>
            <seealso cref="M:CreateNotificationObject"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification.flags">
            <summary>
            The flags that specify what parts of the progress have changed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification.Flags"/>
        </member>
        <member name="P:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification.Flags">
            <summary>
            The flags that specify what parts of the progress have changed.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.CreateNotificationObject">
            <summary>
            Initializes a progress notification object.
            </summary>
            <returns>The newly created progress notification object.</returns>
            <seealso cref="T:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.CreateNotificationObject(TwoLayeredGUI.ProgressDialogControllerBase.ProgressDialogFlags)">
            <summary>
            Initializes a progress notification object with change flags.
            </summary>
            <param name="flags">The flags to set on the newly created object.</param>
            <returns>The newly created progress notification object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.UpdateProgress(TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification)">
            <summary>
            Updates the indicated progress according to the <see cref="T:TwoLayeredGUI.ProgressIndicatorControllerBase.ProgressNotification"/> object.
            </summary>
            <param name="info">The information object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogControllerBase.workAction">
            <summary>
            The action to execute during <see cref="M:TwoLayeredGUI.ProgressDialogControllerBase.DoWork"/>.
            </summary>
            <seealso cref="M:TwoLayeredGUI.ProgressDialogControllerBase.SetTypedWorkAction``1(System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)"/>
            <seealso cref="M:TwoLayeredGUI.ProgressDialogControllerBase.ClearWorkAction"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.SetTypedWorkAction``1(System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)">
            <summary>
            Sets the action to execute during <see cref="M:TwoLayeredGUI.ProgressDialogControllerBase.DoWork"/> method along with an information object.
            </summary>
            <param name="doWork">The action to execute.</param>
            <param name="info">An object that contains some additional information.</param>
            <seealso cref="M:TwoLayeredGUI.ProgressDialogControllerBase.ClearWorkAction"/>
            <seealso cref="F:TwoLayeredGUI.ProgressDialogControllerBase.workAction"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.ClearWorkAction">
            <summary>
            Erases the action to execute during <see cref="M:TwoLayeredGUI.ProgressDialogControllerBase.DoWork"/>.
            </summary>
            <seealso cref="M:TwoLayeredGUI.ProgressDialogControllerBase.SetTypedWorkAction``1(System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)"/>
            <seealso cref="F:TwoLayeredGUI.ProgressDialogControllerBase.workAction"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.DoWork">
            <summary>
            Executes the operation that runs in a worker thread.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogControllerBase.lastWorkCompleted">
            <summary>
            Stores whether the last working process was completed rather than canceled.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.FinishWork(System.Boolean)">
            <summary>
            Executes actions upon the completion or cancellation of the time-consuming operation.
            </summary>
            <param name="completed">Indicates whether the process was completed.</param>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.Show">
            <summary>
            Shows the progress dialog non-modally without executing an operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">The dialog is already being displayed.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.ShowDialog``1(System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)">
            <summary>
            Shows the progress dialog modally and executes an operation.
            </summary>
            <typeparam name="T">The type of the custom object <paramref name="info"/> passed to the <paramref name="doWork"/> delegate.</typeparam>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="doWork"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The dialog is already being displayed.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.Show``1(System.Action{TwoLayeredGUI.IProgressDialogController,``0},``0)">
            <summary>
            Shows the progress dialog non-modally and executes an operation.
            </summary>
            <typeparam name="T">The type of the custom object <paramref name="info"/> passed to the <paramref name="doWork"/> delegate.</typeparam>
            <param name="doWork">This routine will be called once the dialog is displayed.</param>
            <param name="info">A custom object that is passed to the <paramref name="doWork"/> delegate.</param>
            <exception cref="T:System.InvalidOperationException">The dialog is already being displayed.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.ShowWindow(System.Boolean)">
            <summary>
            Displays the progress dialog.
            </summary>
            <param name="modally">Indicates whether the window is displayed modally.</param>
            <remarks>
            <para>This method creates and display the progress dialog window.
              It will not be called while the dialog is already being displayed.</para>
            <para>Derived classes must implement this method to create and display the dialog box.
              Once the window is displayed, the <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/> method must be invoked.</para>
            <para>Any closing of the window must be prevented and may be interpreted as a request to abort the process.
              Only if the process has been terminated or has finished, the window may be closed.</para>
            <para>Once the window has been closed, the <see cref="M:TwoLayeredGUI.ProgressDialogControllerBase.WindowClosed"/> method must be invoked.
              It will free any resources occupied by the window and perform other finalizing implementation-dependent activities.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.ProgressDialogControllerBase.FinalizeWindow"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.Close">
            <summary>
            Closes the progress dialog.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.CloseWindow">
            <summary>
            Closes the progress dialog window.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.TryCloseWindow(System.Boolean)">
            <summary>
            Attempts to close the dialog box.
            </summary>
            <param name="canCancel">A value that indicates whether the operation may be canceled.</param>
            <returns>A value that indicates whether the dialog box can be closed right away.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.WindowClosed">
            <summary>
            This method must be called when the window has been closed.
            </summary>
            <remarks>
            <para>This method must be called when the dialog box has been closed.</para>
            <para>The default implementation fires the <see cref="E:TwoLayeredGUI.ProgressDialogControllerBase.ProgressDialogClosed"/> event.
              Derived classes must call the inherited version of the method.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogControllerBase.FinalizeWindow">
            <summary>
            This method frees any resources associated with the window.
            </summary>
            <remarks>
            <para>This method frees any resources associated with the window after it has been closed.
              Derived classes must implement it in a way to take care of any disposable resources.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.ProgressDialogControllerBase.ShowWindow(System.Boolean)"/>
        </member>
        <member name="P:TwoLayeredGUI.ProgressDialogControllerBase.ExecutesWork">
            <summary>
            Indicates whether this progress indicator controller executes a work process itself.
            </summary>
            <value>
            <para>This property indicates whether this progress indicator controller executes a work process itself.
              If <see langword="true"/>, <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/> will start that work operation in a new thread.
              Otherwise, <see cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/> will not do anything.</para>
            <para>The default implementation always returns <see langword="true"/>.</para>
            </value>
            <seealso cref="M:TwoLayeredGUI.ProgressIndicatorControllerBase.StartProcess"/>
        </member>
        <member name="E:TwoLayeredGUI.ProgressDialogControllerBase.ProgressDialogClosed">
            <summary>
            This event is fired when the progress dialog is closed by the user.
            </summary>
            <value>
            <para>This event is fired when the user closes the progress dialog, usually aborting the current operation.
              This can only happen if the progress dialog has any buttons that allow prematurely closing the dialog.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ProgressDialogControllerBase.ProgressDialogFlags">
            <summary>
            Indicates what should happen in the progress indicator GUI.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogControllerBase.ProgressDialogFlags.Close">
            <summary>
            Indicates that the dialog should be closed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ProgressDialogControllerBase.ProgressDialogNotification">
            <summary>
            This object is used to pass information about a change in progress information to the controller.
            </summary>
            <seealso cref="M:CreateNotificationObject"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogControllerBase.ProgressDialogNotification.flags">
            <summary>
            The flags that specify what parts of the progress have changed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressDialogControllerBase.ProgressDialogNotification.Flags"/>
        </member>
        <member name="P:TwoLayeredGUI.ProgressDialogControllerBase.ProgressDialogNotification.Flags">
            <summary>
            The flags that specify what parts of the progress have changed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ProgressDialogSettings">
            <summary>
            Stores settings for a progress indicator dialog.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogSettings.#ctor(TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance with buttons.
            </summary>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogSettings.#ctor(System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance with a title text and buttons.
            </summary>
            <param name="title">The dialog title.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogSettings.#ctor(System.Boolean,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance with buttons and indicates whether details should be shown.
            </summary>
            <param name="showDetails">A value that indicates whether the details area should be shown.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogSettings.#ctor(System.String,System.Boolean,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance with a title text and buttons and indicates whether details should be shown.
            </summary>
            <param name="title">The dialog title.</param>
            <param name="showDetails">A value that indicates whether the details area should be shown.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttons"/> or any of its elements was <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogSettings.#ctor(TwoLayeredGUI.ProgressDialogSettings,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on another instance.
            </summary>
            <param name="template">The other instance.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> contains at least one button, any buttons from <paramref name="template"/> will be ignored and only the buttons found in <paramref name="buttons"/> will be used.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogSettings.#ctor(TwoLayeredGUI.ProgressDialogSettings,System.String,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on another instance with a custom title.
            </summary>
            <param name="template">The other instance.</param>
            <param name="title">The dialog title.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> contains at least one button, any buttons from <paramref name="template"/> will be ignored and only the buttons found in <paramref name="buttons"/> will be used.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogSettings.#ctor(TwoLayeredGUI.ProgressDialogSettings,System.Boolean,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on another instance and indicates whether details should be shown.
            </summary>
            <param name="template">The other instance.</param>
            <param name="showDetails">A value that indicates whether the details area should be shown.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> contains at least one button, any buttons from <paramref name="template"/> will be ignored and only the buttons found in <paramref name="buttons"/> will be used.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogSettings.#ctor(TwoLayeredGUI.ProgressDialogSettings,System.String,System.Boolean,TwoLayeredGUI.ButtonDef[])">
            <summary>
            Initializes a new instance based on another instance with a custom title and indicates whether details should be shown.
            </summary>
            <param name="template">The other instance.</param>
            <param name="title">The dialog title.</param>
            <param name="showDetails">A value that indicates whether the details area should be shown.</param>
            <param name="buttons">The buttons to show in the progress dialog.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/>, <paramref name="buttons"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>If <paramref name="buttons"/> contains at least one button, any buttons from <paramref name="template"/> will be ignored and only the buttons found in <paramref name="buttons"/> will be used.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogSettings.minimum">
            <summary>
            The minimum value that can be displayed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressDialogSettings.Minimum"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogSettings.maximum">
            <summary>
            The maximum value that can be displayed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressDialogSettings.Maximum"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogSettings.showDetails">
            <summary>
            Indicates whether the details area is to be displayed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressDialogSettings.ShowDetails"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogSettings.showProgressLabel">
            <summary>
            Indicates whether a label displaying the current progress as text should be shown next to the progress bar.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressDialogSettings.ShowProgressLabel"/>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogSettings.DefaultProgressFormattingFunc">
            <summary>
            Provides a default function for the <see cref="P:TwoLayeredGUI.ProgressDialogSettings.ProgressFormattingFunc"/> property.
            </summary>
            <remarks>
            <para>The current implementation stores a function that interprets the first argument as the minimum progress, the second argument as the maximum progress and the third argument as the current progress.
              The return value contains the progress as a percentage without decimals.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.ProgressDialogSettings.progressFormattingFunc">
            <summary>
            The function used to format the progress indicator text.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ProgressDialogSettings.ProgressFormattingFunc"/>
        </member>
        <member name="M:TwoLayeredGUI.ProgressDialogSettings.Assign(TwoLayeredGUI.DialogBoxSettings)">
            <summary>
            Copies the settings of another object.
            </summary>
            <param name="other">The other object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ProgressDialogSettings.Minimum">
            <summary>
            The minimum value that can be displayed.
            </summary>
            <value>
            <para>Gets or sets the minimum value that can be displayed by the progress indicator.
              The default value is zero.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ProgressDialogSettings.Maximum">
            <summary>
            The maximum value that can be displayed.
            </summary>
            <value>
            <para>Gets or sets the maximum value that can be displayed by the progress indicator.
              The default value is <c>100</c>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ProgressDialogSettings.ShowDetails">
            <summary>
            Indicates whether the details area is to be displayed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ProgressDialogSettings.ShowProgressLabel">
            <summary>
            Indicates whether a label displaying the current progress as text should be shown next to the progress bar.
            </summary>
            <value>
            <para>This property determines whether a textual progress indicator is to be shown next to the progress bar.
              The format of the displayed string is determined by the <see cref="P:TwoLayeredGUI.ProgressDialogSettings.ProgressFormattingFunc"/> property.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ProgressDialogSettings.ProgressFormattingFunc"/>
        </member>
        <member name="P:TwoLayeredGUI.ProgressDialogSettings.ProgressFormattingFunc">
            <summary>
            The function used to format the progress indicator text.
            </summary>
            <value>
            <para>If <see cref="P:TwoLayeredGUI.ProgressDialogSettings.ShowProgressLabel"/> is <see langword="true"/>, the current progress will be displayed as a text next to the progress bar.
              This function determines how that text is formatted.</para>
            <para>The first argument of the function indicates the minimum progress, the second one the maximum progress.
              The third argument indicates the current progress.
              The return value should be a string that indicates the progress as a human-readable text.</para>
            <para>The default value of the property matches <see cref="F:TwoLayeredGUI.ProgressDialogSettings.DefaultProgressFormattingFunc"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.ActionElement">
            <summary>
            A dialog element that executes an action.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.DialogElement">
            <summary>
            The base class for dialog element definitions.
            </summary>
            <remarks>
            <para>This is the base class for any dialog element definitions.
              A <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1"/> will attempt to create a UI-toolkit-specific representation of the dialog element by means of a suitable <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElement.id">
            <summary>
            The unique ID of the element.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.Id"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElement.listeners">
            <summary>
            The list of listeners.
            </summary>
            <remarks>
            <para>This list stores weak references to objects that get notified upon change notifications for the element.
              These objects are usually bound to UI-toolkit-specific representations of the dialog element that need to reflect changes to the abstract definition of the element.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Register(TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Notify(TwoLayeredGUI.SimpleDialogs.NotificationInfo)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Notify(TwoLayeredGUI.SimpleDialogs.NotificationInfo)">
            <summary>
            Notifies UI-toolkit-specific representations of the element about a change.
            </summary>
            <param name="info">An object that provides some information about the change.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method notifies any UI-toolkit-specific representations of the dialog element about any change to the abstract dialog element definition.
              It gets automatically invoked by <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.OnPropertyChanged(System.String,System.Object)"/>, but other custom change notifications may require them direct invocation of this method by subclasses of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/>.</para>
            </remarks>
            <seealso cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Register(TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager)">
            <summary>
            Registers a change listener with the element.
            </summary>
            <param name="listener">The listener to register.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listener"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method registers a change listener with the dialog element.
              The change listener is usually bound to a UI-toolkit-specific representation of the dialog element that needs to reflect changes made to the abstract definition of the element.</para>
            <para>As the reference to the listener is stored as a weak reference, there is no according method for unregistering the listener.
              Once the UI-toolkit-specific representation has ceased to exist, the assumption is that there will be no more strong references to the listener.
              At that point, the listener will automatically be removed from the internal list.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Notify(TwoLayeredGUI.SimpleDialogs.NotificationInfo)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Unregister(TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Unregister(TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager)">
            <summary>
            Removes a change listener from the element.
            </summary>
            <param name="listener">The listener to unregister.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listener"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>Removes a change listener from the element that was added with <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Register(TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager)"/>.
              A change listener should be removed if the linked dialog element representation definitely will not be updated any more.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Register(TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.OnPropertyChanged(System.String,System.Object)">
            <summary>
            Issues notifications about a change of a property value.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method issues notifications about a changed property value.
              It invokes <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Notify(TwoLayeredGUI.SimpleDialogs.NotificationInfo)"/> to propagate the change to UI-toolkit-specific representations of the dialog element.
              Subsequently, it invokes <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>, which in turn fires the <see cref="E:TwoLayeredGUI.SimpleDialogs.DialogElement.PropertyChanged"/> event.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Fires the <see cref="E:TwoLayeredGUI.SimpleDialogs.DialogElement.PropertyChanged"/> event.
            </summary>
            <param name="e">An object that contains some information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method fires the <see cref="E:TwoLayeredGUI.SimpleDialogs.DialogElement.PropertyChanged"/> event with the provided object <paramref name="e"/>.
              The default implementation will not invoke <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Notify(TwoLayeredGUI.SimpleDialogs.NotificationInfo)"/>, and UI-toolkit-specific representations of the dialog element will not be notified about the change by default.
              For this purpose, use the <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.OnPropertyChanged(System.String,System.Object)"/> overload instead.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.ProvideChildElements">
            <summary>
            This method provides the list of nested dialog elements as returned by the <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.ChildElements"/> property.
            </summary>
            <returns>An enumeration of all child elements.</returns>
            <remarks>
            <para>This method provides the list of nested dialog elements as returned by the <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.ChildElements"/> property.
              The default implementation returns an empty enumeration.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.ChildAdded(TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Processes a dialog element that has just been or is just being added as a child.  
            </summary>
            <param name="element">The dialog element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>Subclasses of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> that can contain any nested dialog elements must invoke this method for each nested element.
              It ensures that the nested element is properly updated so its enabled state matches that of the parent element.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.ChildRemoved(TwoLayeredGUI.SimpleDialogs.DialogElement)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.ChildRemoved(TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Processes a dialog element that has just been or is just being removed as a child.
            </summary>
            <param name="element">The dialog element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>Subclasses of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> that can contain any nested dialog elements must invoke this method for each nested element that gets removed while the dialog definition is in use.
              It ensures that theenabled state of the nested element is properly reset to its default state.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.ChildAdded(TwoLayeredGUI.SimpleDialogs.DialogElement)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.CheckType(System.Type)">
            <summary>
            Checks whether a given <see cref="T:System.Type"/> instance denotes a dialog element type and throws an exception if it does not.
            </summary>
            <param name="dialogElementType">The type to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dialogElementType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The type specified by <paramref name="dialogElementType"/> is not a subclass of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElement.label">
            <summary>
            An optional label for the dialog element.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.Label"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElement.isDisabled">
            <summary>
            Indicates whether the dialog element and any child elements is blocked from receiving any input.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabled"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElement.disablesChildren">
            <summary>
            Indicates whether the child elements of the dialog element are blocked from receiving any input independently of the dialog element's own state.
            </summary>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.EnableChildren"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.DisableChildren"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.DisableChildren">
            <summary>
            Disables any child elements of the dialog element.
            </summary>
            <remarks>
            <para>This method disables any child elements nested within the dialog element.
              This happens independently of the state of the current dialog element.
              In other words, if <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabled"/> is set to <see langword="true"/>, all child elements will be automatically disabled.
              If it is, however, set to <see langword="false"/>, this method can be used to disable the child elements nonetheless, for instance, based on a setting in the dialog element.</para>
            <para>If the child elements have been disabled with this method, they can be enabled again with <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.EnableChildren"/>.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsEffectivelyDisabled"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.EnableChildren"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.EnableChildren">
            <summary>
            Enables any child elements of the dialog element.
            </summary>
            <remarks>
            <para>This method enables any child elements nested within the dialog element that were disabled by <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.DisableChildren"/>.
              If <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabled"/> is set to <see langword="true"/> for the current dialog element, these child elements will still not be enabled.
              However, as soon as <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabled"/> is set to <see langword="false"/> again, the <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsEffectivelyDisabled"/> property value of the child elements will switch back to <see langword="false"/>, as well.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsEffectivelyDisabled"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.DisableChildren"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElement.isDisabledByParent">
            <summary>
            Indicates whether the dialog element is disabled by its parent dialog element.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabledByParent"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElement.UpdateEnabledState">
            <summary>
            Propagates the enabled state through the subtree of the dialog element.
            </summary>
            <remarks>
            <para>This method propagates the enabled state through the subtree of the dialog element.
              Based on the values of <see cref="F:TwoLayeredGUI.SimpleDialogs.DialogElement.isDisabled"/>, <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabledByParent"/>, and <see cref="F:TwoLayeredGUI.SimpleDialogs.DialogElement.disablesChildren"/>, the <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabledByParent"/> property of any child elements nested in the dialog element receives a new value.
              That value change will in turn be propagated recursively through the entire dialog subtree.</para>
            <para>This method also issues the change notification for the <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsEffectivelyDisabled"/> property.
              As this method is invoked every time the <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsEffectivelyDisabled"/> property might have changed, this ensures the change notification is issued whenever necessary.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogElement.Id">
            <summary>
            The unique ID of the element.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.SimpleDialogs.DialogElement.PropertyChanged">
            <summary>
            This event is fired when the value of a property has changed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogElement.ChildElements">
            <summary>
            Returns all dialog elements nested into the current dialog element.
            </summary>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.ProvideChildElements"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogElement.Label">
            <summary>
            An optional label for the dialog element.
            </summary>
            <value>
            <para>Gets or sets an optional label object associated with the dialog element.
              A representation for the label object will be created by a suitable <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1"/>.
              Any representations will automatically be replaced when the a new value is assigned.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabled">
            <summary>
            Indicates whether the dialog element and any child elements is blocked from receiving any input.
            </summary>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.EnableChildren"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.DisableChildren"/>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsEffectivelyDisabled"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabledByParent">
            <summary>
            Indicates whether the dialog element is disabled by its parent dialog element.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsEffectivelyDisabled">
            <summary>
            Indicates whether the dialog element is blocked from receiving any input. 
            </summary>
            <value>
            <para>This property indicates whether the dialog element is currently blocked from receiving any input.
              A dialog element can be disabled either because its <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabled"/> property is set to <see langword="false"/>, or because its parent element has invoked <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.DisableChildren"/>.</para>
            <para>Change notifications for this property are issued and must be processed by <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager"/> subclasses.
              Moreover, the value of this property must be respected for initializing the enabled state of a representation of the dialog element.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsDisabled"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.EnableChildren"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.DisableChildren"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ActionElement.ExecuteAction">
            <summary>
            Invokes the action associated with the dialog element.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ActionElement.OnActionInvoked(System.EventArgs)">
            <summary>
            Fires the <see cref="E:TwoLayeredGUI.SimpleDialogs.ActionElement.ActionInvoked"/> event.
            </summary>
            <param name="e">An object that contains some information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:TwoLayeredGUI.SimpleDialogs.ActionElement.ActionInvoked">
            <summary>
            An event that is fired when the dialog element is triggered.
            </summary>
            <remarks>
            <para>This event is fired when the dialog element is triggered.
              Event handlers should execute the action that is associated with the dialog element.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.ContainerElement">
            <summary>
            The base class for <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> types that can contain any number of other elements.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ContainerElement.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.ContainerElement.children">
            <summary>
            The list of nested elements.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ContainerElement.ProvideChildElements">
            <summary>
            This method provides the list of nested dialog elements as returned by the <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.ChildElements"/> property.
            </summary>
            <returns>An enumeration of all child elements.</returns>
            <remarks>
            <para>Returns an enumeration of all nested dialog elements in the current dialog element.
              This implementation will returns the content of the <see cref="P:TwoLayeredGUI.SimpleDialogs.ContainerElement.ChildElements"/> list.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.ContainerElement.ChildElements">
            <summary>
            Provides access to the list of nested dialog elements.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.ContainerElement.ChildList">
            <summary>
            The variable-length list of child elements.
            </summary>
            <remarks>
            <para>This class stores the nested dialog elements.
              It will not accept <see langword="null"/> for an item.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ContainerElement.ChildList.#ctor(TwoLayeredGUI.SimpleDialogs.ContainerElement)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="owner">The owner of the list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.ContainerElement.ChildList.owner">
            <summary>
            The owner of the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ContainerElement.ChildList.InsertItem(System.Int32,TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Inserts an item into the list.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the number of elements in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ContainerElement.ChildList.SetItem(System.Int32,TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Replaces an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <param name="item">The item to store in the list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the number of elements in the list.</exception>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.FormContainerElement">
            <summary>
            A <see cref="T:TwoLayeredGUI.SimpleDialogs.ContainerElement"/> that displays its child elements in a structured, tidy way.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.ElementGroup">
            <summary>
            Links various dialog elements together.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.ElementGroup.toggleElements">
            <summary>
            The set of contained toggle elements.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ElementGroup.Add(TwoLayeredGUI.SimpleDialogs.GroupedToggleElement)">
            <summary>
            Adds a grouped toggle element to the group.
            </summary>
            <param name="element">The element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.ElementGroup.Remove(TwoLayeredGUI.SimpleDialogs.GroupedToggleElement)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ElementGroup.Remove(TwoLayeredGUI.SimpleDialogs.GroupedToggleElement)">
            <summary>
            Removes a grouped toggle element from the group.
            </summary>
            <param name="element">The element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.ElementGroup.Add(TwoLayeredGUI.SimpleDialogs.GroupedToggleElement)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ElementGroup.ProcessToggling(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Processes change notifications related to the <see cref="P:TwoLayeredGUI.SimpleDialogs.ToggleElement.IsActivated"/> property of an object.
            </summary>
            <param name="sender">The object that issued the notification.
              This must be a <see cref="T:TwoLayeredGUI.SimpleDialogs.GroupedToggleElement"/> instance.</param>
            <param name="e">An object that contains some information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.GroupContainerElement">
            <summary>
            A container type that uses the labels of its direct children as headlines of groups containing these child elements.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.GroupedToggleElement">
            <summary>
            A <see cref="T:TwoLayeredGUI.SimpleDialogs.ToggleElement"/> whose instances can be linked with an <see cref="T:TwoLayeredGUI.SimpleDialogs.ElementGroup"/> to form a mutually exclusive group.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.ToggleElement">
            <summary>
            A dialog element that allows toggling between two activation states.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ToggleElement.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.ToggleElement.isActivated">
            <summary>
            Indicates the current activation state.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.ToggleElement.IsActivated"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.ToggleElement.child">
            <summary>
            An optional nested dialog element.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.ToggleElement.Child"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ToggleElement.ProvideChildElements">
            <summary>
            This method provides the list of nested dialog elements as returned by the <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.ChildElements"/> property.
            </summary>
            <returns>An enumeration of all child elements.</returns>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ToggleElement.UpdateChildState">
            <summary>
            Updates the state of the child element, if any.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.ToggleElement.Child"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.ToggleElement.IsActivated">
            <summary>
            Indicates the current activation state.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.ToggleElement.Child">
            <summary>
            An optional nested dialog element.
            </summary>
            <value>
            <para>Gets or sets an optional nested dialog element.
              The dialog element will be visually indicated to be subordinate to the toggle element.
              The <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.IsEffectivelyDisabled"/> property will be set so the child element tree is only enabled if this property is <see langword="true"/>.</para>
            </value>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.GroupedToggleElement.elGroup">
            <summary>
            The current group of the element.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.GroupedToggleElement.Group"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.GroupedToggleElement.Group">
            <summary>
            The current group of the element.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.Int32InputElement">
            <summary>
            A dialog element that allows the input of arbitrary <see cref="T:System.Int32"/> values.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.Int32InputElement.number">
            <summary>
            The currently set <see cref="T:System.Int32"/> value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Number"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.Int32InputElement.minimum">
            <summary>
            The lowest allowable number that can be selected in the dialog element.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Minimum"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.Int32InputElement.maximum">
            <summary>
            The highest allowable number that can be selected in the dialog element.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Maximum"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Number">
            <summary>
            The currently set <see cref="T:System.Int32"/> value.
            </summary>
            <value>
            <para>Gets or sets the currently set number.
              Values outside of the range indicated by the <see cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Minimum"/> and <see cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Maximum"/> properties will be limited accordingly.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Minimum">
            <summary>
            The lowest allowable number that can be selected in the dialog element.
            </summary>
            <value>
            <para>Gets or sets the lowest allowable number that can be selected in the dialog element.
              If required, the <see cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Maximum"/> and the <see cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Number"/> properties will be automatically updated upon setting this property.
              The default value of this property is <see cref="F:System.Int32.MinValue"/>.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Maximum"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Maximum">
            <summary>
            The highest allowable number that can be selected in the dialog element.
            </summary>
            <value>
            <para>Gets or sets the highest allowable number that can be selected in the dialog element.
              If required, the <see cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Minimum"/> and the <see cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Number"/> properties will be automatically updated upon setting this property.
              The default value of this property is <see cref="F:System.Int32.MaxValue"/>.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.Int32InputElement.Minimum"/>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.LabeledElement`1">
            <summary>
            Stores a representation of a dialog element along with an optional label.
            </summary>
            <typeparam name="TElement">The base class of the widget hierarchy for which the dialog element representation is generated.</typeparam>
            <remarks>
            <para>The <see cref="N:TwoLayeredGUI.SimpleDialogs"/> framework allows for any dialog element to possess a label.
              Depending on the UI-toolkit-specific representation of the dialog element, the representation of the label can sometimes be integrated into the dialog element representation, while in other cases, the label representation remains a separate widget.
              This class is meant to distinguish the two cases and store a dialog element representation along with an optional label representation, where the label representation is only present if a label cannot be integrated into the representation of the dialog element.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.LabeledElement`1.#ctor(`0)">
            <summary>
            Initializes an instance without a separate label.
            </summary>
            <param name="element">The dialog element representation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.LabeledElement`1.#ctor(`0,`0)">
            <summary>
            Initializes an instance that can have a separate label.
            </summary>
            <param name="element">The dialog element representation.</param>
            <param name="label">The representation of the label, or <see langword="null"/> if <paramref name="element"/> does not have a separate label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.LabeledElement`1.element">
            <summary>
            The dialog element representation.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.LabeledElement`1.Element"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.LabeledElement`1.label">
            <summary>
            The label representation, or <see langword="null"/> if the dialog element does not have a separate label.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.LabeledElement`1.Label"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.LabeledElement`1.Element">
            <summary>
            The dialog element representation.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.LabeledElement`1.HasSeparateLabel">
            <summary>
            Indicates whether the object stores a separate label.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.LabeledElement`1.Label">
            <summary>
            The label representation, or <see langword="null"/> if the dialog element does not have a separate label.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1">
            <summary>
            The base class for types that generate UI-toolkit-specific representations of label objects.
            </summary>
            <typeparam name="TElement">The base class of the widget hierarchy for which the label representation is generated.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1.#ctor(TwoLayeredGUI.SimpleDialogs.DialogGenerator{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="dialogGenerator">The dialog generator object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dialogGenerator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1.dialogGenerator">
            <summary>
            The dialog generator that manages this instance.
            </summary>
            <seealso cref="P:DialogGenerator"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1.Generate(System.Object,`0)">
            <summary>
            Invokes the creation of a UI-toolkit-specific representation of a label object.
            </summary>
            <param name="labelInfo">The label object.</param>
            <param name="dialogElementRepresentation">The dialog element representation the label belongs to.</param>
            <returns>The newly created representation of <paramref name="labelInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1.CreateLabel(System.Object,`0)"/> returns <see langword="null"/>.</exception>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1.CreateLabel(System.Object,`0)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1.CreateLabel(System.Object,`0)">
            <summary>
            Creates a UI-toolkit-specific representation of a label object.
            </summary>
            <param name="labelInfo">The label object.
              This must not be <see langword="null"/>.
              It must be an instance of a type the generator was registered for.</param>
            <param name="dialogElementRepresentation">The dialog element representation the label belongs to.
              This must not be <see langword="null"/>.</param>
            <returns>The newly created representation of <paramref name="labelInfo"/>.</returns>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1.DialogGenerator">
            <summary>
            The dialog generator that manages this instance.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.LabelGeneratorAttribute">
            <summary>
            Marks a class as a <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1">label generator</see> for a given label type.
            </summary>
            <remarks>
            <para>Use this attribute to indicate that a class is a <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1">dialog element generator</see> for a given label type.
              The method <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllLabelGenerators(System.Reflection.Assembly)"/> will only detect label generator classes marked with this attribute.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.LabelGeneratorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="labelType">The dialog element definition type for which the generator marked with the attribute can generate a UI-toolkit-specific representation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="labelType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.LabelGeneratorAttribute.labelType">
            <summary>
            The label object type for which the generator marked with the attribute can generate a UI-toolkit-specific representation. 
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.LabelGeneratorAttribute.LabelType"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.LabelGeneratorAttribute.LabelType">
            <summary>
            The label object type for which the generator marked with the attribute can generate a UI-toolkit-specific representation. 
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.LayoutedContainerElement`1">
            <summary>
            A <see cref="T:TwoLayeredGUI.SimpleDialogs.ContainerElement"/>-based base class that can store layouting information for each contained control.
            </summary>
            <typeparam name="TLayoutInfo">The base type of the layouting information.</typeparam>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.LayoutedContainerElement`1.layoutInfos">
            <summary>
            The internal map between dialog elements and layout infos.
            </summary>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.LayoutedContainerElement`1.SetLayoutInfo(TwoLayeredGUI.SimpleDialogs.DialogElement,`0)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.LayoutedContainerElement`1.TryGetLayoutInfo(TwoLayeredGUI.SimpleDialogs.DialogElement,`0@)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.LayoutedContainerElement`1.SetLayoutInfo(TwoLayeredGUI.SimpleDialogs.DialogElement,`0)">
            <summary>
            Stores a layout info object for a given dialog element.
            </summary>
            <param name="element">The element that layout info applies to.</param>
            <param name="info">The layout info object.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.LayoutedContainerElement`1.TryGetLayoutInfo(TwoLayeredGUI.SimpleDialogs.DialogElement,`0@)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.LayoutedContainerElement`1.TryGetLayoutInfo(TwoLayeredGUI.SimpleDialogs.DialogElement,`0@)">
            <summary>
            Retrieves a layout info object for a given dialog element.
            </summary>
            <param name="element">The dialog element whose layout info object should be retrieved.</param>
            <param name="info">A variable that receives the retrieved layout info object, or the default value of <typeparamref name="TLayoutInfo"/> if no layout info object was found for <paramref name="element"/>.</param>
            <returns>A value that indicates whether a layout info object was found for <paramref name="element"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.LayoutedContainerElement`1.SetLayoutInfo(TwoLayeredGUI.SimpleDialogs.DialogElement,`0)"/>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.ListChangeNotificationInfo">
            <summary>
            A notification object for changes in a list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.NotificationInfo">
            <summary>
            The base class for notification objects.
            </summary>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElement.Notify(TwoLayeredGUI.SimpleDialogs.NotificationInfo)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.NotificationInfo.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sender">The dialog element that issues the notification.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sender"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.NotificationInfo.sender">
            <summary>
            The dialog element that issues the notification.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.NotificationInfo.Sender"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.NotificationInfo.Sender">
            <summary>
            The dialog element that issues the notification.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ListChangeNotificationInfo.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElement,TwoLayeredGUI.ListChangeKind)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sender">The object that issues the change notification.</param>
            <param name="change">The kind of the change operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sender"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="change"/> has an invalid value.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.ListChangeNotificationInfo.change">
            <summary>
            The kind of the change operation.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.ListChangeNotificationInfo.Change"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.ListChangeNotificationInfo.Change">
            <summary>
            The kind of the change operation.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.ListItemChangeNotificationInfo">
            <summary>
            A list change notification that refers to a single item.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.ListItemChangeNotificationInfo.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElement,TwoLayeredGUI.ListChangeKind,System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sender">The object that issues the change notification.</param>
            <param name="change">The kind of the change operation.</param>
            <param name="index">The index of the affected item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sender"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="change"/> has an invalid value.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="change"/> specifies a value that does not refer to a single item.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.ListItemChangeNotificationInfo.index">
            <summary>
            The index of the affected item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.ListItemChangeNotificationInfo.Index"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.ListItemChangeNotificationInfo.Index">
            <summary>
            The index of the affected item.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.NamespaceDoc">
            <summary>
            This namespace provides types for defining complete simple dialog boxes or other user interfaces.
            </summary>
            <remarks>
            <para>The <see cref="N:TwoLayeredGUI.SimpleDialogs"/> namespace provides the base types of the Simple Dialogs framework.
              With the Simple Dialogs framework, (at least simple) arbitrary interactive user interfaces can be defined in a UI-toolkit-agnostic manner.
              Like this, modules that directly generate or communicate with parts of the user interface can still be written in a UI-toolkit-independent way.
              In particular, plugins of an application can provide user interfaces without being restricted to being used together with frontends based upon a single UI toolkit.</para>
            <para>The user interfaces are composed of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> instances.
              A frontend that uses a particular UI toolkit will generate a representation for each <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> by means of an appropriate <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1"/>.
              The object that manages this process and assembles all representations to a user interface is an instance of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1"/>.</para>
            <para>A number of standard controls have been defined as <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> subclasses, and appropriate representation generators are provided in the respective UI-toolkit-specific libraries of the Two-Layered GUI Toolkit.
              Applications that use the Simple Dialogs framework are free to add their own domain-specific custom controls.
              To achieve this, they have to provide an appropriate <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> subclass, as well as suitable <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1"/> subclasses for the UI toolkits they wish to support.</para>
            <para><see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> is the base class for elements in a Simple Dialogs user interface.
              Each dialog element can be associated with a label, whose representation is generated by a <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1"/>.
              <see cref="T:TwoLayeredGUI.SimpleDialogs.ContainerElement"/> is a special type of dialog element that is prepared to serve as a parent element to any number of other dialog elements, and <see cref="T:TwoLayeredGUI.SimpleDialogs.LayoutedContainerElement`1"/> can have any number of child elements and associates each of them with a layout information object.
              Basically, however, any dialog element subclass can be designed to hold child elements.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.PictureElement">
            <summary>
            A dialog element that displays a raster graphic.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.PictureElement.pixelWidth">
            <summary>
            Indicates the width in pixels to which the displayed graphic should be scaled.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelWidth"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.PictureElement.pixelHeight">
            <summary>
            Indicates the height in pixels to which the displayed graphic should be scaled.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelHeight"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.PictureElement.bitmap">
            <summary>
            An object that provides the graphic to display.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.Bitmap"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.PictureElement.OnPointingDeviceButtonPressed(TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs)">
            <summary>
            Fires the <see cref="E:TwoLayeredGUI.SimpleDialogs.PictureElement.PointingDeviceButtonPressed"/> event.
            </summary>
            <param name="e">An object that contains some information on the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.PictureElement.OnPointingDeviceButtonReleased(TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs)">
            <summary>
            Fires the <see cref="E:TwoLayeredGUI.SimpleDialogs.PictureElement.PointingDeviceButtonReleased"/> event.
            </summary>
            <param name="e">An object that contains some information on the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.PictureElement.ExecutePointingDeviceButtonChanged(TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs)">
            <summary>
            Notifies the dialog element about a state change of a pointing device button.
            </summary>
            <param name="e">An object that contains some information on the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method notifies the dialog element about a state change of a pointing device button.
              UI toolkit-specific representations must invoke this method in order for the respective events to get fired.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.PictureElement.OnPointingDeviceMoved(TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs)">
            <summary>
            Fires the <see cref="E:TwoLayeredGUI.SimpleDialogs.PictureElement.PointingDeviceMoved"/> event.
            </summary>
            <param name="e">An object that contains some information on the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.PictureElement.ExecutePointingDeviceMoved(TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs)">
            <summary>
            Notifies the dialog element about a movement of a pointing device pointer.
            </summary>
            <param name="e">An object that contains some information on the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method notifies the dialog element about a movement of a pointing device pointer.
              UI toolkit-specific representations must invoke this method in order for the respective events to get fired.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelWidth">
            <summary>
            Indicates the width in pixels to which the displayed graphic should be scaled.
            </summary>
            <value>
            <para>Gets or sets the width in pixels to which the displayed graphic should be scaled.
              If this property has the value <see langword="null"/> (the default value), the aspect-ratio will be maintained while scaling the graphic based on the value of the <see cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelHeight"/> property.
              If <see cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelHeight"/> is <see langword="null"/>, too, the original pixel size of the graphic will be used.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelHeight"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelHeight">
            <summary>
            Indicates the height in pixels to which the displayed graphic should be scaled.
            </summary>
            <value>
            <para>Gets or sets the height in pixels to which the displayed graphic should be scaled.
              If this property has the value <see langword="null"/> (the default value), the aspect-ratio will be maintained while scaling the graphic based on the value of the <see cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelWidth"/> property.
              If <see cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelWidth"/> is <see langword="null"/>, too, the original pixel size of the graphic will be used.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelWidth"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.PictureElement.Bitmap">
            <summary>
            An object that provides the graphic to display.
            </summary>
            <value>
            <para>Gets or sets an object that provides the graphic to display.</para>
            <para>The displayed graphic can be scaled with the <see cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelWidth"/> and <see cref="P:TwoLayeredGUI.SimpleDialogs.PictureElement.PixelHeight"/> properties.
              If both properties are <see langword="null"/>, the graphic will be displayed at its original pixel resolution.
              If only one of the properties is <see langword="null"/>, the graphic will be scaled by the width or height, respectively, while maintaining the original aspect-ratio.
              Otherwise, the graphic will be scaled horizontally and vertically according to these size values (and possibly distorted).</para>
            </value>
        </member>
        <member name="E:TwoLayeredGUI.SimpleDialogs.PictureElement.PointingDeviceButtonPressed">
            <summary>
            This event is fired when a button on a pointing device is pressed.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.SimpleDialogs.PictureElement.PointingDeviceButtonReleased">
            <summary>
            This event is fired when a button on a pointing device is released.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.SimpleDialogs.PictureElement.PointingDeviceMoved">
            <summary>
            This event is fired when the pointer of a pointing device is moved.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs">
            <summary>
            Describes an event related to a button of a pointing device.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs">
            <summary>
            Describes an event related to a pointing device.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="x">The X coordinate of the pointer.</param>
            <param name="y">The Y coordinate of the pointer.</param>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs.x">
            <summary>
            The X coordinate of the pointer.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs.X"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs.y">
            <summary>
            The Y coordinate of the pointer.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs.Y"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs.X">
            <summary>
            The X coordinate of the pointer.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceEventArgs.Y">
            <summary>
            The Y coordinate of the pointer.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="x">The X coordinate of the pointer.</param>
            <param name="y">The Y coordinate of the pointer.</param>
            <param name="buttonIndex">The zero-based index of the button whose state was changed.</param>
            <param name="isPressed">Indicates whether the button identified by <paramref name="buttonIndex"/> is pressed.</param>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs.buttonIndex">
            <summary>
            The zero-based index of the button whose state was changed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs.ButtonIndex"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs.isPressed">
            <summary>
            Indicates whether the button identified by <see cref="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs.ButtonIndex"/> is pressed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs.IsPressed"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs.ButtonIndex">
            <summary>
            The zero-based index of the button whose state was changed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs.IsPressed">
            <summary>
            Indicates whether the button identified by <see cref="P:TwoLayeredGUI.SimpleDialogs.PointingDeviceButtonEventArgs.ButtonIndex"/> is pressed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.PropertyChangedNotificationInfo">
            <summary>
            A notification object that reports the change of a property value.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.PropertyChangedNotificationInfo.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElement,System.String,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sender">The dialog element that issues the notification.</param>
            <param name="propertyName">The name of the changed property.</param>
            <param name="newValue">The new value of the property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sender"/> or <paramref name="propertyName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.PropertyChangedNotificationInfo.propertyName">
            <summary>
            The name of the changed property.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PropertyChangedNotificationInfo.PropertyName"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.PropertyChangedNotificationInfo.newValue">
            <summary>
            The new value of the property.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.PropertyChangedNotificationInfo.NewValue"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.PropertyChangedNotificationInfo.PropertyName">
            <summary>
            The name of the changed property.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.PropertyChangedNotificationInfo.NewValue">
            <summary>
            The new value of the property.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.RefreshListNotificationInfo">
            <summary>
            Indicates that a list needs to be completely reloaded.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.RefreshListNotificationInfo.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sender">The object that issues the change notification.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sender"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.SelectorElement">
            <summary>
            A dialog element that displays a list of values and allows the selection of one of them.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.SelectorElementBase">
            <summary>
            The base class for dialog elements that display a list in which an element can be selected.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ProvideItems">
            <summary>
            Provides access to the list of eligible items.
            </summary>
            <returns>An <see cref="T:TwoLayeredGUI.IImmutableArray`1"/> implementation that provides access to the list of eligible items.</returns>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.Items"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemInserted(System.Int32)">
            <summary>
            Processes the insertion of an item.
            </summary>
            <param name="index">The index at which the item was inserted.</param>
            <remarks>
            <para>This method processes the insertion of an item.
              It needs to be invoked by subclasses after an item has been inserted into the list of eligible items.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemRemoved(System.Int32)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemReplaced(System.Int32)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.RefreshItems"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemRemoved(System.Int32)">
            <summary>
            Processes the removal of an item.
            </summary>
            <param name="index">The former index of the item that was removed.</param>
            <remarks>
            <para>This method processes the removal of an item.
              It needs to be invoked by subclasses after an item has been removed from the list of eligible items.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemInserted(System.Int32)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemReplaced(System.Int32)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.RefreshItems"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemReplaced(System.Int32)">
            <summary>
            Processes the substitution of an item.
            </summary>
            <param name="index">The index at which an item was substituted.</param>
            <remarks>
            <para>This method processes the substitution of an item.
              It needs to be invoked by subclasses after an item has been replaced in the list of eligible items.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemInserted(System.Int32)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemRemoved(System.Int32)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.RefreshItems"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.RefreshItems">
            <summary>
            Processes the complete change of the list of eligible items.
            </summary>
            <remarks>
            <para>This method processes the complete change of the list of eligible items.
              It needs to be invoked by subclasses if representations of the dialog element should rebuild their item list from scratch.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemInserted(System.Int32)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemRemoved(System.Int32)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ItemReplaced(System.Int32)"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ignoreSelectionChanges">
            <summary>
            Indicates whether changes to the <see cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.SelectedIndex"/> property should currently be ignored.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.selectedIndex">
            <summary>
            The index of the selected item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.SelectedIndex"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.Items">
            <summary>
            The list of eligible items.
            </summary>
            <value>
            <para>This property provides a read-only view on the eligible items found in the dialog element.
              Subclasses must implement the <see cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ProvideItems"/> method to supply data for this property.</para>
            </value>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.ProvideItems"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.SelectedIndex">
            <summary>
            The index of the selected item.
            </summary>
            <value>
            <para>Gets or sets the index of the selected item.
              The default value of <c>-1</c> indicates that no item is currently selected.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.IsItemSelected"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.IsItemSelected">
            <summary>
            Indicates whether an item is currently selected.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.SelectedIndex"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.SelectedItem">
            <summary>
            Gets the selected item.
            </summary>
            <value>
            <para>This property gets the selected item.
              If no item is currently selected, the property will return <see langword="null"/>.
              If <see langword="null"/> is also an eligible item in the list <see cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.Items"/>, the <see cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.IsItemSelected"/> property must be used to distinguish whether an item has been selected.</para>
            </value>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElement.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElement.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance with an enumeration of eligible items.
            </summary>
            <param name="items">The enumeration of named items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElement.#ctor(System.Object,System.Object[])">
            <summary>
            Initializes a new instance with eligible items.
            </summary>
            <param name="firstItem">The first eligible item.</param>
            <param name="moreItems">More eligible items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstItem"/>, <paramref name="moreItems"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.SelectorElement.items">
            <summary>
            The list of eligible items.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElement.Items"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElement.ProvideItems">
            <summary>
            Provides access to the list of eligible items.
            </summary>
            <returns>An <see cref="T:TwoLayeredGUI.IImmutableArray`1"/> implementation that provides access to the list of eligible items.</returns>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.SelectorElement.Items">
            <summary>
            The list of eligible items.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.SelectorElement.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>
            <para>This property gets or sets the selected item.</para>
            <para>Assigning a value that is not in the list causes the selection to be cleared.
              This includes <see langword="null"/>.
              If no value is selected, <see langword="null"/> will be returned.
              If <see langword="null"/> is also an eligible item in the <see cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElement.Items"/> property, the <see cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.IsItemSelected"/> property needs to be used to determine whether anything is selected.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.SelectorElement.ItemList">
            <summary>
            The list of values in the dialog element.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElement.ItemList.#ctor(TwoLayeredGUI.SimpleDialogs.SelectorElement)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="owner">The dialog element that contains the new list instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.SelectorElement.ItemList.owner">
            <summary>
            The dialog element that contains the list instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElement.ItemList.InsertItem(System.Int32,System.Object)">
            <summary>
            Processes the insertion of an item.
            </summary>
            <param name="index">The index at which the item was inserted.</param>
            <param name="item">The newly inserted item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElement.ItemList.RemoveItem(System.Int32)">
            <summary>
            Processes the removal of an item.
            </summary>
            <param name="index">The index at which the item was removed.</param>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElement.ItemList.SetItem(System.Int32,System.Object)">
            <summary>
            Processes the substitution of an item.
            </summary>
            <param name="index">The position in the list at which an item was substituted.</param>
            <param name="item">The new item at the position specified in the <paramref name="index"/> parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.SelectorElement.ItemList.ClearItems">
            <summary>
            Processes the removal of all items in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.TextElement">
            <summary>
            A dialog element that displays a short text.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.TextElement.text">
            <summary>
            The displayed text.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.TextElement.Text"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.TextElement.Text">
            <summary>
            The displayed text.
            </summary>
            <value>
            <para>Gets or sets the displayed text.
              The default value is an empty string.
              This property cannot become <see langword="null"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.TextInputElement">
            <summary>
            A dialog element that allows the input of arbitrary <see cref="T:System.String"/> values.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.TextInputElement.text">
            <summary>
            The currently set <see cref="T:System.String"/> value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.TextInputElement.Text"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.TextInputElement.Text">
            <summary>
            The currently set <see cref="T:System.String"/> value.
            </summary>
            <value>
            <para>Gets or sets the currently set text.
              This property cannot assume <see langword="null"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1">
            <summary>
            The base class for types that generate UI-toolkit-specific representations of dialog elements.
            </summary>
            <typeparam name="TElement">The base class of the widget hierarchy for which the dialog element representation is generated.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1.#ctor(TwoLayeredGUI.SimpleDialogs.DialogGenerator{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="dialogGenerator">The dialog generator object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dialogGenerator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1.dialogGenerator">
            <summary>
            The dialog generator that manages this instance.
            </summary>
            <seealso cref="P:DialogGenerator"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1.Generate(TwoLayeredGUI.SimpleDialogs.DialogElement,`0,System.Collections.Generic.IEnumerable{TwoLayeredGUI.SimpleDialogs.LabeledElement{`0}})">
            <summary>
            Invokes the creation of a UI-toolkit-specific representation of a given dialog element.
            </summary>
            <param name="element">The abstract definition of the dialog element.</param>
            <param name="labelElement">A widget that represents the label of the dialog element.
              This may be a widget that occupies no space at all.</param>
            <param name="childElements">An enumeration of any representations of dialog elements that are nested in <paramref name="element"/>.</param>
            <returns>The newly created dialog element representation, optionally with a separate label.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>, or <paramref name="childElements"/> contains <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1.CreateElement(TwoLayeredGUI.Graphics.BasicSettings,TwoLayeredGUI.SimpleDialogs.DialogElement,`0,TwoLayeredGUI.SimpleDialogs.LabeledElement{`0}[])"/> returns <see langword="null"/>, or no suitable <see cref="T:TwoLayeredGUI.Graphics.BasicSettings">basic settings object</see> could be retrieved.</exception>
            <remarks>
            <para>This method invokes the creation of a UI-toolkit-specific representation of a given dialog element.</para>
            <para>The generated representation will be returned as a <see cref="T:TwoLayeredGUI.SimpleDialogs.LabeledElement`1"/> instance.
              If <paramref name="labelElement"/> can be directly integrated into the resulting representation, it should not be returned as a separate label.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1.CreateElement(TwoLayeredGUI.Graphics.BasicSettings,TwoLayeredGUI.SimpleDialogs.DialogElement,`0,TwoLayeredGUI.SimpleDialogs.LabeledElement{`0}[])"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1.CreateElement(TwoLayeredGUI.Graphics.BasicSettings,TwoLayeredGUI.SimpleDialogs.DialogElement,`0,TwoLayeredGUI.SimpleDialogs.LabeledElement{`0}[])">
            <summary>
            Generates a UI-toolkit-specific representation of a given dialog element.
            </summary>
            <param name="basicSettings">The <see cref="T:TwoLayeredGUI.Graphics.BasicSettings"/> object to use for the dialog element representation.
              This must not be <see langword="null"/>.</param>
            <param name="element">The abstract definition of the dialog element.
              This must not be <see langword="null"/>.
              It must be an instance of a type the generator was registered for.</param>
            <param name="labelElement">A widget that represents the label of the dialog element.
              This may be a widget that occupies no space at all.</param>
            <param name="childElements">An enumeration of any representations of dialog elements that are nested in <paramref name="element"/>.</param>
            <returns>The newly created dialog element representation with a <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager"/> instance.
              Optionally, a separate label may be supplied.</returns>
            <remarks>
            <para>This method generates a UI-toolkit-specific representation of a given dialog element.</para>
            <para>The generated representation must be returned as a <see cref="T:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1"/> instance.
              That object contains a <see cref="T:TwoLayeredGUI.SimpleDialogs.LabeledElement`1"/> instance.
              If <paramref name="labelElement"/> can be directly integrated into the resulting representation, it should not be returned as a separate label.</para>
            <para>The generated widget also needs to be accompanied with an instance of the <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager"/> class or one of its subclasses.
              This object will be notified about any changes to the dialog element definition that need to be reflected by the UI-toolkit-specific representation.
              Implementors of this method must make sure these update notifications are processed appropriately, where applicable.</para>
            <para>The update manager will be anchored in the abstract dialog definition only with a weak reference.
              Conversely, the update manager is required for exactly as long as the dialog element representation remains alive.
              Therefore, implementors must make sure the udpate manager is coupled with a strong reference to the created dialog element representation.
              This happens automatically if one or more of the update manager's methods are registered with events of the dialog element representation.
              If the dialog element representation does not provide any elements that need to be handled by the update manager, however, subclassing the dialog element representation type to add a member variable to reference the update manager may be required.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1.DialogGenerator">
            <summary>
            The dialog generator that manages this instance.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.DialogElementGeneratorAttribute">
            <summary>
            Marks a class as a <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1">dialog element generator</see> for a given <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement">dialog element type</see>.
            </summary>
            <remarks>
            <para>Use this attribute to indicate that a class is a <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1">dialog element generator</see> for a given <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement">dialog element type</see>.
              The method <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllDialogElementGenerators(System.Reflection.Assembly)"/> will only detect dialog element generator classes marked with this attribute.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementGeneratorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="dialogElementType">The dialog element definition type for which the generator marked with the attribute can generate a UI-toolkit-specific representation.
              This must be a subclass of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dialogElementType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The type specified by <paramref name="dialogElementType"/> is not a subclass of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElementGeneratorAttribute.dialogElementType">
            <summary>
            The dialog element definition type for which the generator marked with the attribute can generate a UI-toolkit-specific representation. 
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElementGeneratorAttribute.DialogElementType"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogElementGeneratorAttribute.DialogElementType">
            <summary>
            The dialog element definition type for which the generator marked with the attribute can generate a UI-toolkit-specific representation. 
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.DialogElementIdentityComparer">
            <summary>
            Compares two <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> instances for identity.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementIdentityComparer.Equals(TwoLayeredGUI.SimpleDialogs.DialogElement,TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Compares two objects.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> are the same object, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementIdentityComparer.GetHashCode(TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Returns a hash code for a <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/>.
            </summary>
            <param name="obj">The dialog element.</param>
            <returns>The generated hash code.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager">
            <summary>
            A class for objects that process update notifications for dialog element representations.
            </summary>
            <remarks>
            <para>This is the base class for objects that process update notifications for dialog elements and dialog element representations.
              Most <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1">dialog element generator implementations</see> will have to derive subclasses from this class.
              Subclasses should override the <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.ProcessUpdate(TwoLayeredGUI.SimpleDialogs.NotificationInfo)"/> method to do custom processing of the type-dependent update notifications.</para>
            </remarks>
            <seealso cref="M:DialogElement.Notify"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="dialogElement">The dialog element the new instance will be linked to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dialogElement"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.dialogElement">
            <summary>
            The dialog element this instance is linked to.
            </summary>
            <seealso cref="P:DialogElement"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.DisconnectFromDialogElement">
            <summary>
            Disconnects the <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager"/> from the <see cref="P:DialogElement"/> object.
            </summary>
            <remarks>
            <para>This method disconnects the <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager"/> from the <see cref="P:DialogElement"/> object.
              It should be invoked when the dialog element representation definitely will not need to be updated any more, for instance, when it has been irrevocably destroyed or released.
              It is, however, not mandatory to invoke this method.
              Normally, a <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager"/> will be garbage-collected along with the dialog element representation that keeps it alive with a strong reference.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.Update(TwoLayeredGUI.SimpleDialogs.NotificationInfo)">
            <summary>
            Notifies the update manager about an update.
            </summary>
            <param name="info">An object that stores some information about the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.ProcessUpdate(TwoLayeredGUI.SimpleDialogs.NotificationInfo)">
            <summary>
            Processes an update nofication.
            </summary>
            <param name="info">An object that provides some information about the update.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.labelWrapper">
            <summary>
            The label wrapper set for the dialog element.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.dialogElementRepresentation">
            <summary>
            The dialog element representation.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.updateLabelProc">
            <summary>
            An action that replaces the label shown for the dialog element.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.SetUpdateLabelHandling(System.Object,System.Object,System.Action{System.Object,System.Object,System.Object})">
            <summary>
            Stores a reference to a label wrapper and a label update event handler for the dialog element.
            </summary>
            <param name="labelWrapper">The label wrapper.</param>
            <param name="dialogElementRepresentation">The dialog element representation.</param>
            <param name="updateLabelProc">The label update event handler.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.DialogElement">
            <summary>
            The dialog element this instance is linked to.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1">
            <summary>
            The base class for objects that generate UI-toolkit-specific representations of dialog element hierarchies based on a directory of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1"/> and <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1"/> instances. 
            </summary>
            <typeparam name="TElement">The base class of the widget hierarchy for which the dialog element representation is generated.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateUserInterface(TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Generates a UI-toolkit-specific representation of a dialog element hierarchy.
            </summary>
            <param name="root">The definition of the root element of the dialog element hierarchy.</param>
            <returns>The UI-toolkit-specific root widget.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The dialog element hierarchy contains a dialog element or a label for which no suitable generator can be found, or no <see cref="T:TwoLayeredGUI.Graphics.BasicSettings">basic settings object</see> could be retrieved.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateElement(TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Creates a UI-toolkit-specific representation for a given abstract dialog element definition. 
            </summary>
            <param name="element">The dialog element definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>, or a dialog element in the hierarchy returns <see langword="null"/> as a child element.</exception>
            <exception cref="T:System.InvalidOperationException">No suitable generator was found for the type of <paramref name="element"/> or <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.Label">its label</see>, or the dialog element generator found did not create a representation, or no <see cref="T:TwoLayeredGUI.Graphics.BasicSettings">basic settings object</see> could be retrieved, or <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateLabelWrapper"/> returns <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateLabel(System.Object,`0)">
            <summary>
            Creates a representation for a given label object.
            </summary>
            <param name="label">The label object, or <see langword="null"/> if no label is set.</param>
            <param name="dialogElementRepresentation">The dialog element representation that the label is created for.</param>
            <returns>The newly created label representation, or <see langword="null"/> if <paramref name="dialogElementRepresentation"/> is <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dialogElementRepresentation"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">No suitable generator for the type of <paramref name="label"/> was found.</exception>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.Label"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.elementGenerators">
            <summary>
            This dictionary maps dialog element types to the appropriate <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1"/> instances.
            </summary>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterDialogElementGenerator(System.Type,TwoLayeredGUI.SimpleDialogs.DialogElementGenerator{`0})"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllDialogElementGenerators(System.Reflection.Assembly)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.FindElementGenerator(TwoLayeredGUI.SimpleDialogs.DialogElement)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterDialogElementGenerator(System.Type,TwoLayeredGUI.SimpleDialogs.DialogElementGenerator{`0})">
            <summary>
            Registers a <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1"/> for a specific <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> subclass.
            </summary>
            <param name="dialogElementType">The <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> subclass <paramref name="generator"/> can create representations for.</param>
            <param name="generator">An object that can generate UI-toolkit-specific representations for dialog elements of the specified type.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The type specified by <paramref name="dialogElementType"/> is not a subclass of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/>, or <paramref name="generator"/> was not instantiated for the current <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1"/> instance.</exception>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllDialogElementGenerators(System.Reflection.Assembly)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllDialogElementGenerators(System.Reflection.Assembly)">
            <summary>
            Registers all <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1">dialog element generators</see> found in a given assembly.
            </summary>
            <param name="a">The assembly to scan.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.TypeLoadException">Some types in the assembly could not be loaded.</exception>
            <exception cref="T:System.MethodAccessException">The code does not have sufficient permissions to instantiate a found dialog element generator.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">One of the detected dialog element generators throws an exception upon instantiation.</exception>
            <exception cref="T:System.Security.SecurityException">The code does not have sufficient permissions to instantiate a found dialog element generator.</exception>
            <remarks>
            <para>This method registers all <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1">dialog element generators</see> that can be found in the assembly <paramref name="a"/>.
              The dialog element generators must satisfy the following conditions:</para>
            <list type="bullet">
            <item>They must inherit from <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGenerator`1"/>.</item>
            <item>Their type parameter must match <typeparamref name="TElement"/> of the current <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1"/> instance.</item>
            <item>They must be marked with at least one <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementGeneratorAttribute"/>.</item>
            <item>They must have a public or non-public constructor that accepts exactly one <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1"/> instance, which will be forwarded to the <see cref="M:DialogElementGenerator{TElement}.#ctor">inherited constructor</see>.</item>
            <item>They must be instantiatable (that is, not abstract, and not featuring any open generic parameters).</item>
            </list>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterDialogElementGenerator(System.Type,TwoLayeredGUI.SimpleDialogs.DialogElementGenerator{`0})"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.FindElementGenerator(TwoLayeredGUI.SimpleDialogs.DialogElement)">
            <summary>
            Retrieves the appropriate dialog element generator for a given dialog element definition.
            </summary>
            <param name="element">The dialog element definition.</param>
            <returns>The appropriate dialog element generator, or <see langword="null"/> if no such generator was found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method retrieves the appropriate dialog element generator for a given dialog element definition.
              The appropriate generator is identified based on the type of the dialog element.
              If no exact generator can be found, generators for the base types of <paramref name="element"/> will be searched, as long as these types are subclasses of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/>.</para>
            </remarks>
            <seealso cref="F:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.elementGenerators"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterDialogElementGenerator(System.Type,TwoLayeredGUI.SimpleDialogs.DialogElementGenerator{`0})"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllDialogElementGenerators(System.Reflection.Assembly)"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.labelGenerators">
            <summary>
            This dictionary maps label types to the appropriate <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1"/> instances.
            </summary>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterLabelGenerator(System.Type,TwoLayeredGUI.SimpleDialogs.LabelGenerator{`0})"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllLabelGenerators(System.Reflection.Assembly)"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.FindLabelGenerator(System.Object)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterLabelGenerator(System.Type,TwoLayeredGUI.SimpleDialogs.LabelGenerator{`0})">
            <summary>
            Registers a <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1"/> for a specific label type.
            </summary>
            <param name="labelType">The label type <paramref name="generator"/> can create representations for.</param>
            <param name="generator">An object that can generate UI-toolkit-specific representations for labels of the specified type.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="generator"/> was not instantiated for the current <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1"/> instance.</exception>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllLabelGenerators(System.Reflection.Assembly)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllLabelGenerators(System.Reflection.Assembly)">
            <summary>
            Registers all <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1">label generators</see> found in a given assembly.
            </summary>
            <param name="a">The assembly to scan.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.TypeLoadException">Some types in the assembly could not be loaded.</exception>
            <exception cref="T:System.MethodAccessException">The code does not have sufficient permissions to instantiate a found label generator.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">One of the detected label generators throws an exception upon instantiation.</exception>
            <exception cref="T:System.Security.SecurityException">The code does not have sufficient permissions to instantiate a label element generator.</exception>
            <remarks>
            <para>This method registers all <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1">label generators</see> that can be found in the assembly <paramref name="a"/>.
              The label generators must satisfy the following conditions:</para>
            <list type="bullet">
            <item>They must inherit from <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGenerator`1"/>.</item>
            <item>Their type parameter must match <typeparamref name="TElement"/> of the current <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1"/> instance.</item>
            <item>They must be marked with at least one <see cref="T:TwoLayeredGUI.SimpleDialogs.LabelGeneratorAttribute"/>.</item>
            <item>They must have a public or non-public constructor that accepts exactly one <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1"/> instance, which will be forwarded to the <see cref="M:LabelGenerator{TElement}.#ctor">inherited constructor</see>.</item>
            <item>They must be instantiatable (that is, not abstract, and not featuring any open generic parameters).</item>
            </list>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterLabelGenerator(System.Type,TwoLayeredGUI.SimpleDialogs.LabelGenerator{`0})"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.FindLabelGenerator(System.Object)">
            <summary>
            Retrieves the appropriate label generator for a given label object that is not <see langword="null"/>.
            </summary>
            <param name="label">The label object.</param>
            <returns>The appropriate label generator, or <see langword="null"/> if no such generator was found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="label"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method retrieves the appropriate label generator for a given label object that is not <see langword="null"/>.
              The appropriate generator is identified based on the type of the label.
              If no exact generator can be found, generators for the base types of <paramref name="label"/> will be searched.</para>
            </remarks>
            <seealso cref="F:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.labelGenerators"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterLabelGenerator(System.Type,TwoLayeredGUI.SimpleDialogs.LabelGenerator{`0})"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.RegisterAllLabelGenerators(System.Reflection.Assembly)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateLabelWrapper">
            <summary>
            Creates an empty label wrapper.
            </summary>
            <returns>The newly created label wrapper.</returns>
            <remarks>
            <para>The UI-toolkit-specific representation of a <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.Label">dialog element label</see> is wrapped in a widget that will remain in the dialog representation even when the label representation is exchanged.
              This method creates such a wrapper widget.
              The wrapper widget needs to be initialized without a label representation, and it needs to be able to hold any type of label representation that may be created for the UI toolkit at hand.
              If the <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogElement.Label"/> property of a <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElement"/> is not <see langword="null"/>, a label representation will be inserted at a later time.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.UpdateLabel(`0,`0)"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.UpdateLabel(`0,`0)">
            <summary>
            Replaces a label representation in an existing wrapper widget.
            </summary>
            <param name="labelElementWrapper">The label wrapper widget.
              This must not be <see langword="null"/>.</param>
            <param name="newLabelElement">The new label representation, or <see langword="null"/> if any previous label representation should be removed.</param>
            <remarks>
            <para>This method places the label representation passed to the <paramref name="newLabelElement"/> parameter in the <paramref name="labelElementWrapper"/> widget.
              <paramref name="labelElementWrapper"/> is guaranteed to be a widget created by <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateLabelWrapper"/> and not <see langword="null"/>.</para>
            <para>If the label is getting removed, <paramref name="newLabelElement"/> will be <see langword="null"/>.
              In that case, <paramref name="labelElementWrapper"/> must be emptied until another possible future call to <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.UpdateLabel(`0,`0)"/>.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateLabelWrapper"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.UpdateLabelObject(System.Object,System.Object,System.Object)">
            <summary>
            Updates the label of a dialog element for which representations have already been generated.
            </summary>
            <param name="labelElementWrapper">A label wrapper widget, as returned by <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateLabelWrapper"/>.</param>
            <param name="newLabel">The new label object.</param>
            <param name="dialogElement">The dialog element representation that the label refers to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="labelElementWrapper"/> or <paramref name="dialogElement"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="labelElementWrapper"/> or <paramref name="dialogElement"/> cannot be cast into <typeparamref name="TElement"/>.</exception>
            <remarks>
            <para>This method updates the label of a dialog element for which representations have already been generated.</para>
            <para><paramref name="labelElementWrapper"/> must be an element created by the <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateLabelWrapper"/> method.
              It will be passed on to <see cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.UpdateLabel(`0,`0)"/>, where it will be processed by code supplied by a subclass.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.CreateLabelWrapper"/>
            <seealso cref="M:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.UpdateLabel(`0,`0)"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.basicSettings">
            <summary>
            The basic settings used by the generator.
            </summary>
            <seealso cref="P:BasicSettings"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.BasicSettings">
            <summary>
            The basic settings used by the generator.
            </summary>
            <value>
            <para>Gets or sets the <see cref="T:TwoLayeredGUI.Graphics.BasicSettings"/> object used by the generator.
              If this property has its default value (<see langword="null"/>), the instance returned by <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.DefaultBasicSettings"/> is used.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.DefaultBasicSettings">
            <summary>
            Retrieves the default <see cref="T:TwoLayeredGUI.Graphics.BasicSettings"/> object to be used if <see cref="P:BasicSettings"/> is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.EffectiveBasicSettings">
            <summary>
            Returns the effectively used <see cref="T:TwoLayeredGUI.Graphics.BasicSettings"/> object.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:BasicSettings"/> is <see langword="null"/> and <see cref="P:TwoLayeredGUI.SimpleDialogs.DialogGenerator`1.DefaultBasicSettings"/> returned <see langword="null"/>, too.</exception>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.TypedDialogElementUpdateManager`1">
            <summary>
            A subclass of <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager"/> that ensures a specific type for the dialog element.
            </summary>
            <typeparam name="T">The base type of the dialog element that instances of the class can be linked to.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedDialogElementUpdateManager`1.#ctor(`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="dialogElement">The dialog element the new instance will be linked to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dialogElement"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.TypedDialogElementUpdateManager`1.DialogElement">
            <summary>
            The dialog element this instance is linked to.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager.DialogElement"/>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1">
            <summary>
            A dialog element that allows the selection of one out of several values that are supplied as <see cref="T:TwoLayeredGUI.NamedObject`1"/> instances.
            </summary>
            <typeparam name="T">The type of the values shown in the dialog element.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.#ctor(System.Collections.Generic.IEnumerable{TwoLayeredGUI.NamedObject{`0}})">
            <summary>
            Initializes a new instance with an enumeration of eligible items.
            </summary>
            <param name="items">The enumeration of named items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.#ctor(TwoLayeredGUI.NamedObject{`0},TwoLayeredGUI.NamedObject{`0}[])">
            <summary>
            Initializes a new instance with eligible items.
            </summary>
            <param name="firstItem">The first eligible item.</param>
            <param name="moreItems">More eligible items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstItem"/>, <paramref name="moreItems"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.items">
            <summary>
            The list of eligible items.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.Items"/>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.ProvideItems">
            <summary>
            Provides access to the list of eligible items.
            </summary>
            <returns>An <see cref="T:TwoLayeredGUI.IImmutableArray`1"/> implementation that provides access to the list of eligible items.</returns>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.Items">
            <summary>
            The list of eligible items.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>
            <para>This property gets or sets the selected item.
              Note that this property represents the actual item value rather than the <see cref="T:TwoLayeredGUI.NamedObject`1"/> instance.</para>
            <para>Assigning a value that is not in the list causes the selection to be cleared.
              This includes <see langword="null"/>.
              If no value is selected, the default value of type <typeparamref name="T"/> will be returned.
              If that value is also an eligible item in the <see cref="P:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.Items"/> property, the <see cref="P:TwoLayeredGUI.SimpleDialogs.SelectorElementBase.IsItemSelected"/> property needs to be used to determine whether anything is selected.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.ItemList">
            <summary>
            The list of values in the dialog element.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.ItemList.#ctor(TwoLayeredGUI.SimpleDialogs.TypedSelectorElement{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="owner">The dialog element that contains the new list instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.ItemList.owner">
            <summary>
            The dialog element that contains the list instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.ItemList.InsertItem(System.Int32,TwoLayeredGUI.NamedObject{`0})">
            <summary>
            Processes the insertion of an item.
            </summary>
            <param name="index">The index at which the item was inserted.</param>
            <param name="item">The newly inserted item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.ItemList.RemoveItem(System.Int32)">
            <summary>
            Processes the removal of an item.
            </summary>
            <param name="index">The index at which the item was removed.</param>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.ItemList.SetItem(System.Int32,TwoLayeredGUI.NamedObject{`0})">
            <summary>
            Processes the substitution of an item.
            </summary>
            <param name="index">The position in the list at which an item was substituted.</param>
            <param name="item">The new item at the position specified in the <paramref name="index"/> parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.ItemList.ClearItems">
            <summary>
            Processes the removal of all items in the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.TypedSelectorElement`1.ItemList.IndexOfValue(`0)">
            <summary>
            Finds an item in the list based on the value of type <typeparamref name="T"/> stored in the <see cref="T:TwoLayeredGUI.NamedObject`1"/> instance.
            </summary>
            <param name="value">The value to find.</param>
            <returns>The zero-based index in the list, or <c>-1</c> if <paramref name="value"/> was not found.</returns>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1">
            <summary>
            Stores a <see cref="T:TwoLayeredGUI.SimpleDialogs.LabeledElement`1"/> along with a <see cref="T:TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager"/>.
            </summary>
            <typeparam name="TElement">The base class of the widget hierarchy for which a dialog element representation is generated.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager,TwoLayeredGUI.SimpleDialogs.LabeledElement{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="updateManager">The update manager.</param>
            <param name="element">The optionally labeled dialog element representation.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager,`0)">
            <summary>
            Initializes a new instance for a dialog element representation without a separate label.
            </summary>
            <param name="updateManager">The update manager.</param>
            <param name="element">The dialog element representation.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElementUpdateManager,`0,`0)">
            <summary>
            Initializes a new instance for a dialog element representation that can have a separate label.
            </summary>
            <param name="updateManager">The update manager.</param>
            <param name="element">The dialog element representation.</param>
            <param name="labelElement">The label representation, or <see langword="null"/> if <paramref name="element"/> does not have a separate label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="updateManager"/> or <paramref name="element"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1.updateManager">
            <summary>
            The update manager.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1.UpdateManager"/>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1.element">
            <summary>
            The optionally labeled dialog element representation.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1.Element"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1.UpdateManager">
            <summary>
            The update manager.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.UpdateableLabeledElement`1.Element">
            <summary>
            The optionally labeled dialog element representation.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.SimpleDialogs.UpdateLabelNotificationInfo">
            <summary>
            A notification object that reports the change of a dialog element label.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.SimpleDialogs.UpdateLabelNotificationInfo.#ctor(TwoLayeredGUI.SimpleDialogs.DialogElement,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sender">The dialog element that issues the notification.</param>
            <param name="newLabel">The new label object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sender"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.SimpleDialogs.UpdateLabelNotificationInfo.newLabel">
            <summary>
            The new label object.
            </summary>
            <seealso cref="P:TwoLayeredGUI.SimpleDialogs.UpdateLabelNotificationInfo.NewLabel"/>
        </member>
        <member name="P:TwoLayeredGUI.SimpleDialogs.UpdateLabelNotificationInfo.NewLabel">
            <summary>
            The new label object.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.BooleanValue">
            <summary>
            The definition of a boolean input value.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.TypedInputValue`1">
            <summary>
            The parent class for typed input value definitions.
            </summary>
            <typeparam name="TValue">The data type of the value.</typeparam>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.InputValue">
            <summary>
            The base class for input value definitions.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValue.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>
            <para>This constructor is marked as <see langword="internal"/> to make it invisible outside of its assembly.
              Third parties must derive their custom value classes from <see cref="T:TwoLayeredGUI.ValueInput.CustomValue`1"/>.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputValue.text">
            <summary>
            The title of the input element.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputValue.Text"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputValue.textFont">
            <summary>
            The font used for the title of the input element.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputValue.TextFont"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputValue.valueFont">
            <summary>
            The font used for the input value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputValue.ValueFont"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputValue.enabled">
            <summary>
            Indicates whether the control is enabled.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputValue.Enabled"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValue.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Notifies any listeners about a property that is about to change.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValue.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Notifies any listeners about a property that has changed.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValue.Kind">
            <summary>
            Gets the value kind of the input value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValue.ValueType">
            <summary>
            The data type of the value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValue.Text">
            <summary>
            The title of the input element.
            </summary>
            <value>
            <para>This property gets or sets the title text of the input control for the value.
              It can never be <see langword="null"/>.
              The default value is an empty string.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValue.TextFont">
            <summary>
            The font used for the title of the input element.
            </summary>
            <value>
            <para>Gets or sets the font used to display the title of the input element that was specified using the <see cref="P:TwoLayeredGUI.ValueInput.InputValue.Text"/> property.
              If this property has its default value, <see langword="null"/>, the default font for the GUI will be used.
              Only if it is not <see langword="null"/>, the default font will be overridden by the specified font.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputValue.ValueFont"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValue.ValueFont">
            <summary>
            The font used for the input value.
            </summary>
            <value>
            <para>Gets or sets the font used to display the value in the input element.
              If this property has its default value, <see langword="null"/>, the default font for the GUI will be used.
              Only if it is not <see langword="null"/>, the default font will be overridden by the specified font.</para>
            <para>Depending on the input control, this font might not be used.
              Input controls for some value types, such as <see cref="F:TwoLayeredGUI.ValueInput.ValueKind.Boolean"/>, might not display any text to represent the current or any eligible values, hence the setting has no effect for these controls.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputValue.TextFont"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValue.Validators">
            <summary>
            An object that contains validators for the value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValue.UntypedValidators">
            <summary>
            Returns an object that provides untyped access to the validators for this value.
            </summary>
            <value>
            <para>This property returns an object that provides untyped access to the validators stored for this input value.
              Derived classes must override it so it returns their respective (usually internally typed) list of validators.</para>
            </value>
            <remarks>
            <para>The <see cref="P:TwoLayeredGUI.ValueInput.InputValue.Validators"/> property cannot directly be overridden.
              Instead, it retrieves its value from this property.
              This is because derived classes introduce their own strongly-typed <see cref="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.Validators"/> property.
              The <see cref="P:TwoLayeredGUI.ValueInput.InputValue.Validators"/> property of this class can either be overridden or shadowed in a derived class, but not both at a time.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValue.Enabled">
            <summary>
            Indicates whether the control is enabled.
            </summary>
            <value>
            <para>Gets or sets a value that determines whether the control is enabled.</para>
            <para>The settings in a disabled control cannot be changed.
              However, in some situations it is adviseable to display the control nonetheless, for example to preserve the usual window layout or to indicate what options are sometimes available, though not now.</para>
            </value>
        </member>
        <member name="E:TwoLayeredGUI.ValueInput.InputValue.PropertyChanging">
            <summary>
            This event is fired when a property is about to change.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.ValueInput.InputValue.PropertyChanged">
            <summary>
            This event is fired when a property has changed.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.#ctor(TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor is marked as <see langword="internal"/> to make it invisible outside of its assembly.
              Third parties must derive their custom value classes from <see cref="T:TwoLayeredGUI.ValueInput.CustomValue`1"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.#ctor(TwoLayeredGUI.AccessString,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor is marked as <see langword="internal"/> to make it invisible outside of its assembly.
              Third parties must derive their custom value classes from <see cref="T:TwoLayeredGUI.ValueInput.CustomValue`1"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.#ctor(TwoLayeredGUI.AccessString,`0,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="initialValue">The initial value.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor is marked as <see langword="internal"/> to make it invisible outside of its assembly.
              Third parties must derive their custom value classes from <see cref="T:TwoLayeredGUI.ValueInput.CustomValue`1"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.#ctor(TwoLayeredGUI.ValueInput.Validators.IValueValidatorList{`0})">
            <summary>
            Initializes a new instance with a given instance of a value validator list.
            </summary>
            <param name="validatorList">The validator list instance to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validatorList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.TypedInputValue`1.initialValue">
            <summary>
            The initial value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.InitialValue"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.TypedInputValue`1.validators">
            <summary>
            The list of validators for the value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.Validators"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.TypedInputValue`1.editCommands">
            <summary>
            The list of edit commands.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommands"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.ValueType">
            <summary>
            The data type of the value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.InitialValue">
            <summary>
            The initial value.
            </summary>
            <value>
            <para>Gets or sets the initial value for the input control.</para>
            <para>To exert more control about allowable initial values, derived classes may override this and modify the setter.
              As the setter is invoked in a constructor, do not use any instance members introduced in subclasses of <see cref="T:TwoLayeredGUI.ValueInput.TypedInputValue`1"/> there.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.Validators">
            <summary>
            The list of validators for the value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.UntypedValidators">
            <summary>
            Returns an object that provides untyped access to the validators for this value.
            </summary>
            <value>
            <para>This property returns an object that provides untyped access to the validators stored for this input value.
              It provides access to the data stored in the <see cref="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.Validators"/> property.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommands">
            <summary>
            A list of commands that can be invoked with respect to the value.
            </summary>
            <value>
            <para>This property provides access to a list of <see cref="T:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1"/> instances.
              If the list contains one or more such instances, the user interface will offer a way to invoke these commands.</para>
            <para>This list will not accept any elements that are <see langword="null"/>.</para>
            </value>
            <seealso cref="T:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1"/>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList">
            <summary>
            Stores a list of <see cref="T:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1"/> instances and implements the <see cref="T:System.Collections.Generic.IList`1"/> interface, but does not allow elements that are <see langword="null"/>.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.IndexOf(TwoLayeredGUI.ValueInput.Commands.EditValueCommand{`0})">
            <summary>
            Retrieves the position of a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The position of the item, or a negative value if the item was not found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Insert(System.Int32,TwoLayeredGUI.ValueInput.Commands.EditValueCommand{`0})">
            <summary>
            Inserts an item at a given position in the list.
            </summary>
            <param name="index">The position of the item.</param>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a given position from the list.
            </summary>
            <param name="index">The position of the item to delete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Add(TwoLayeredGUI.ValueInput.Commands.EditValueCommand{`0})">
            <summary>
            Appends an item at the end of the list.
            </summary>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Contains(TwoLayeredGUI.ValueInput.Commands.EditValueCommand{`0})">
            <summary>
            Checks whether a given item is in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> is in the list.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.CopyTo(TwoLayeredGUI.ValueInput.Commands.EditValueCommand{`0}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a given index.
            </summary>
            <param name="array">The one-dimensional array that serves as the destination of the elements.
              This array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the list is greater than the available space from <paramref name="arrayIndex"/> in <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The type of the list elements cannot be cast automatically to the type of <paramref name="array"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Remove(TwoLayeredGUI.ValueInput.Commands.EditValueCommand{`0})">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the removal was successful.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
            <seealso cref="M:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.GetEnumerator"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Item(System.Int32)">
            <summary>
            Gets or sets an item at a given position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.TypedInputValue`1.EditCommandList.System#Collections#Generic#ICollection{TwoLayeredGUI#ValueInput#Commands#EditValueCommand{TValue}}#IsReadOnly">
            <summary>
            Indicates whether the list is read-only.
            </summary>
            <value>
            <para>This implementation always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.BooleanValue.#ctor(TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Boolean}[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.BooleanValue.#ctor(TwoLayeredGUI.AccessString,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Boolean}[])">
            <summary>
            Initializes a new instance with a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.BooleanValue.#ctor(TwoLayeredGUI.AccessString,System.Boolean,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Boolean}[])">
            <summary>
            Initializes a new instance with a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="initialValue">The initial value.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.BooleanValue.Kind">
            <summary>
            Gets the value kind of the input value.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Commands.DelegateEditValueCommand`1">
            <summary>
            A command that invokes an editor for an input value that is defined by a delegate.
            </summary>
            <typeparam name="T">The value type to edit in the editor.</typeparam>
            <remarks>
            <para>Instances of this class represent a command for editing a value of type <typeparamref name="T"/> (for example, that of an <see cref="T:TwoLayeredGUI.ValueInput.InputValue"/> instance).
              Such a command will usually be executed upon activating an input element such as a button.
              Once that happens, the action defined by the <see cref="P:TwoLayeredGUI.ValueInput.Commands.DelegateEditValueCommand`1.InvokeEditorFunc"/> delegate is executed.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Commands.DelegateEditValueCommand`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Commands.DelegateEditValueCommand`1.#ctor(TwoLayeredGUI.ValueInput.Commands.EditValueFunc{`0})">
            <summary>
            Initializes a new instance with an editor function.
            </summary>
            <param name="invokeEditor">The editor function that will be executed when the command is invoked.</param>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Commands.DelegateEditValueCommand`1.#ctor(TwoLayeredGUI.ValueInput.Commands.EditValueFunc{`0},TwoLayeredGUI.AccessString,System.String,TwoLayeredGUI.Graphics.IBitmapProvider)">
            <summary>
            Initializes a new instance with an editor function, as well as an icon and a text that represent the command.
            </summary>
            <param name="displayName">A text that represents the editor action.</param>
            <param name="invokeEditor">The editor function that will be executed when the command is invoked.</param>
            <param name="infoText">A text that can be shown related to the element that triggers the editor action.</param>
            <param name="icon">An image that can be shown related to the element that triggers the editor action.</param>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Commands.DelegateEditValueCommand`1.InvokeEditor(`0@)">
            <summary>
            Invokes the editor function for a given value.
            </summary>
            <param name="value">The value to edit.
              If the changes in the editor are confirmed, the value will be replaced with the new value.</param>
            <returns>A value that indicates whether the editing operation was completed successfully.</returns>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Commands.DelegateEditValueCommand`1.invokeEditorFunc">
            <summary>
            A method that is invoked when the editor action is triggered.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Commands.DelegateEditValueCommand`1.InvokeEditorFunc"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Commands.DelegateEditValueCommand`1.InvokeEditorFunc">
            <summary>
            Gets or sets a method that is invoked when the editor action is triggered.
            </summary>
            <value>
            <para>This property gets or sets a method that is invoked when the editor action is triggered.
              If this property is <see langword="null"/> (the default value), it will be supposed that no editor is available.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Commands.EditValueFunc`1">
            <summary>
            A delegate that represents a function that displays an editor for a value.
            </summary>
            <typeparam name="T">The type of the value to edit.</typeparam>
            <param name="value">The value to edit.
              If the changes are confirmed, the new value will be assigned.</param>
            <returns>A value that indicates whether the changes were confirmed.</returns>
            <seealso cref="T:TwoLayeredGUI.ValueInput.Commands.EditValueCommand`1"/>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Commands.NamespaceDoc">
            <summary>
            This namespaces contains classes that represent commands to apply to input values, as well as some helper types.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2">
            <summary>
            The definition of a custom input value with a settings object.
            </summary>
            <typeparam name="TValue">The data type of the value.</typeparam>
            <typeparam name="TSettings">The type of the settings object.</typeparam>
            <remarks>
            <para>This class defines a custom input value of type <typeparamref name="TValue"/>.
              Settings for the editor are stored in an object of type <typeparamref name="TSettings"/>.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.CustomValue`1">
            <summary>
            The definition of a custom input value.
            </summary>
            <typeparam name="TValue">The data type of the value.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.CustomValue`1.#ctor(TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.CustomValue`1.#ctor(TwoLayeredGUI.AccessString,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.CustomValue`1.#ctor(TwoLayeredGUI.AccessString,`0,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="initialValue">The initial value.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.CustomValue`1.#ctor(TwoLayeredGUI.ValueInput.Validators.IValueValidatorList{`0})">
            <summary>
            Initializes a new instance with a given instance of a value validator list.
            </summary>
            <param name="validatorList">The validator list instance to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validatorList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.CustomValue`1.Kind">
            <summary>
            Gets the value kind of the input value.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2.#ctor(`1,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="settings">An object that stores the settings for the editor.
              If <typeparamref name="TSettings"/> is a reference type, the instance passed to the constructor will be stored directly in the new <see cref="T:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2"/> instance.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2.#ctor(TwoLayeredGUI.AccessString,`1,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="settings">An object that stores the settings for the editor.
              If <typeparamref name="TSettings"/> is a reference type, the instance passed to the constructor will be stored directly in the new <see cref="T:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2"/> instance.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2.#ctor(TwoLayeredGUI.AccessString,`0,`1,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="initialValue">The initial value.</param>
            <param name="settings">An object that stores the settings for the editor.
              If <typeparamref name="TSettings"/> is a reference type, the instance passed to the constructor will be stored directly in the new <see cref="T:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2"/> instance.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2.#ctor(`1,TwoLayeredGUI.ValueInput.Validators.IValueValidatorList{`0})">
            <summary>
            Initializes a new instance with a given instance of a value validator list.
            </summary>
            <param name="settings">An object that stores the settings for the editor.
              If <typeparamref name="TSettings"/> is a reference type, the instance passed to the constructor will be stored directly in the new <see cref="T:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2"/> instance.</param>
            <param name="validatorList">The validator list instance to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/>, <paramref name="validatorList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2.settings">
            <summary>
            The settings for the editor.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2.Settings"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.ConfigurableCustomValue`2.Settings">
            <summary>
            Gets or sets the settings for the editor.
            </summary>
            <exception cref="T:System.ArgumentNullException">The assigned value is <see langword="null"/>.</exception>
            <value>
            <para>This property gets or sets the settings for the editor.</para>
            <para>If a new instance is assigned, the events of the <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interfaces will be fired.
              If you want the events to be fired for changes within the settings object, make sure that your code invokes the <see cref="M:TwoLayeredGUI.ValueInput.InputValue.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)"/> and <see cref="M:TwoLayeredGUI.ValueInput.InputValue.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/> methods.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.EnumValue`1">
            <summary>
            The definition of a value that is restricted to a list of pre-defined values.
            </summary>
            <typeparam name="T">The actual value type.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.#ctor(TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.#ctor(TwoLayeredGUI.AccessString,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.#ctor(TwoLayeredGUI.AccessString,`0,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="initialValue">The initial value.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.#ctor(System.Collections.Generic.IEnumerable{`0},TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a list of eligible values.
            </summary>
            <param name="values">The eligible values to show in the list.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.#ctor(TwoLayeredGUI.AccessString,System.Collections.Generic.IEnumerable{`0},TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a list of eligible values and a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="values">The eligible values to show in the list.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.#ctor(TwoLayeredGUI.AccessString,System.Collections.Generic.IEnumerable{`0},`0,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance with a list of eligible values, a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="values">The eligible values to show in the list.</param>
            <param name="initialValue">The initial value.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>, <paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.FromEnumType(TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwoLayeredGUI.ValueInput.EnumValue`1"/> class based on a CLI <see langword="enum"/> type.
            </summary>
            <param name="validators">The validators for the new value.</param>
            <returns>The newly created instance.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="T"/> is not an enumeration type.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.FromEnumType(TwoLayeredGUI.AccessString,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwoLayeredGUI.ValueInput.EnumValue`1"/> class based on a CLI <see langword="enum"/> type with a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The newly created instance.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="T"/> is not an enumeration type.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.FromEnumType(TwoLayeredGUI.AccessString,`0,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwoLayeredGUI.ValueInput.EnumValue`1"/> class based on a CLI <see langword="enum"/> type with a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="initialValue">The initial value.</param>
            <param name="validators">The validators for the new value.</param>
            <returns>The newly created instance.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="T"/> is not an enumeration type.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.EnumValue`1.values">
            <summary>
            The internal list of values and their display names.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.GetDisplayNameByValue(`0)">
            <summary>
            Retrieves the custom display name of a given value.
            </summary>
            <param name="value">The value whose display name to find.</param>
            <returns>The custom display name of the value.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> was not found.</exception>
            <seealso cref="M:TwoLayeredGUI.ValueInput.EnumValue`1.SetDisplayNameByValue(`0,System.String)"/>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.DisplayNames"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.SetDisplayNameByValue(`0,System.String)">
            <summary>
            Sets the custom display name of a given value.
            </summary>
            <param name="value">The value whose display name to change.</param>
            <param name="displayName">The new custom display name of the value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> was not found.</exception>
            <seealso cref="M:TwoLayeredGUI.ValueInput.EnumValue`1.GetDisplayNameByValue(`0)"/>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.DisplayNames"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.AddValueWithDisplayName(`0,System.String)">
            <summary>
            Adds a value along with a custom display name.
            </summary>
            <param name="value">The new value.</param>
            <param name="displayName">The custom display name.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is already in the list.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.EnumValue`1.retrieveDisplayNameFunc">
            <summary>
            A function that will be used to retrieve a display name if no custom display name is set for a given value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.RetrieveDisplayNameFunc"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueOfListItem(System.Object)">
            <summary>
            Retrieves the value of a given list item.
            </summary>
            <param name="listItem">The list item.</param>
            <returns>The value of <paramref name="listItem"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listItem"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="listItem"/> is of a type that is not supported by the method.</exception>
            <remarks>
            <para>The <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListItems"/> method returns objects that can be inserted into GUI lists.
              This method returns the value represented by one such object.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListItems"/>
            <seealso cref="M:TwoLayeredGUI.ValueInput.EnumValue`1.IndexOfListItem(System.Collections.IEnumerable,`0)"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.IndexOfListItem(System.Collections.IEnumerable,`0)">
            <summary>
            Finds the position of an item value in an enumeration of list item representations.
            </summary>
            <param name="listItems">The enumeration of list items.</param>
            <param name="item">The item value to find.</param>
            <returns>The index of <paramref name="item"/>, or a negative value if <paramref name="item"/> was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listItems"/> or one of its elements is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">One of the items of <paramref name="listItems"/> was of an unsupported type.</exception>
            <remarks>
            <para>The <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListItems"/> method returns objects that can be inserted into GUI lists.
              This method takes an enumeration of such objects and retrieves the index of the object that represents a given item.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListItems"/>
            <seealso cref="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueOfListItem(System.Object)"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.Kind">
            <summary>
            Gets the value kind of the input value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.Values">
            <summary>
            The list of eligible values.
            </summary>
            <value>
            <para>This property provides access to the list of eligible values.
              It will not allow the addition of duplicates.</para>
            <para>Note that changes will not be propagated to GUIs that are already displayed.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.DisplayNames">
            <summary>
            Provides access to the custom display names of the values.
            </summary>
            <value>
            <para>Gets an object that provides access to the custom display names of the eligible values.</para>
            <para>For each value, a custom display name can be provided.
              This can be done by using this property and the index of the value.
              If a custom display name is set to <see langword="null"/>, a fallback value will be used.
              This fallback value will be retrieved by invoking the <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.RetrieveDisplayNameFunc"/> method.
              If no such method has been specified, the <see cref="M:System.Object.ToString"/> method of the item will be called.</para>
            <para>Note that changes will not be propagated to GUIs that are already displayed.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.RetrieveDisplayNameFunc">
            <summary>
            A function that will be used to retrieve a display name if no custom display name is set for a given value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.DisplayNames"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListItems">
            <summary>
            Provides objects that can represent the values and that can be added to a selection list.
            </summary>
            <seealso cref="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueOfListItem(System.Object)"/>
            <seealso cref="M:TwoLayeredGUI.ValueInput.EnumValue`1.IndexOfListItem(System.Collections.IEnumerable,`0)"/>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue">
            <summary>
            Represents a single value in the list and stores some additional information about it.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.#ctor(TwoLayeredGUI.ValueInput.EnumValue{`0},`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="owner">The owner of the instance.</param>
            <param name="item">The value represented by the instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.owner">
            <summary>
            The owner of the instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.item">
            <summary>
            The value represented by the instance.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.Item"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.customDisplayName">
            <summary>
            The custom display name used to represent the item.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.CustomDisplayName"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.ItemEquals(`0)">
            <summary>
            Checks whether the value stored in the object equals another value.
            </summary>
            <param name="other">The other value.</param>
            <returns>A value that indicates whether the values are equal.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.ToString">
            <summary>
            Returns a string representation of the item.
            </summary>
            <returns>The string representation.</returns>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.CustomDisplayName"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.Item">
            <summary>
            The value represented by the instance.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ListValue.CustomDisplayName">
            <summary>
            The custom display name used to represent the item.
            </summary>
            <value>
            <para>Gets or sets a custom display name that represents the item.
              If this property is set to <see langword="null"/>, the return value of the owner object's <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.RetrieveDisplayNameFunc"/> function will be used.
              If no such function has been configured, the result of the <see cref="M:System.Object.ToString"/> of the value will be used.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList">
            <summary>
            Manages the internal list of values and their display names.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.#ctor(TwoLayeredGUI.ValueInput.EnumValue{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="owner">The owner of the instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.owner">
            <summary>
            The owner of the instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.displayNames">
            <summary>
            An object that implements <see cref="T:TwoLayeredGUI.IArray`1"/> and provides direct access to the custom display names of the values in the list.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.DisplayNames"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.CheckContainsItem(`0,System.Int32)">
            <summary>
            Checks whether the list already contains an item and if so, throws an exception.
            </summary>
            <param name="item">The item to find.</param>
            <param name="excludeIndex">An index in the list that should be ignored when checking.
              Set this argument to a negative value if no index should be ignored.</param>
            <exception cref="T:System.ArgumentException"><paramref name="item"/> is in the list, at another index than <paramref name="excludeIndex"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Add(TwoLayeredGUI.ValueInput.EnumValue{`0}.ListValue)">
            <summary>
            Appends an item at the end of the list.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An item with the value stored in <paramref name="item"/> is already in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Insert(System.Int32,TwoLayeredGUI.ValueInput.EnumValue{`0}.ListValue)">
            <summary>
            Inserts an item at a given position in the list.
            </summary>
            <param name="index">The position where the item should be added.</param>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An item with the value stored in <paramref name="item"/> is already in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.GetEnumerator">
            <summary>
            Returns an object that enumerates all elements in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.IndexOf(`0)">
            <summary>
            Retrieves the position of a given item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The position of the item, or a negative value if the item was not found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Appends an item to the end of the list.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentException"><paramref name="item"/> is already in the list.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a given position in the list.
            </summary>
            <param name="index"></param>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentException"><paramref name="item"/> is already in the list.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a given position from the list.
            </summary>
            <param name="index">The position of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Remove(`0)">
            <summary>
            Removes a given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the item was successfully removed.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Contains(`0)">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the list to an array, starting at a particular index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The destination index of the first element to copy.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in this list is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> cannot be cast to the item type of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.RawValues">
            <summary>
            Returns the raw list items.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.DisplayNames">
            <summary>
            An object that implements <see cref="T:TwoLayeredGUI.IArray`1"/> and provides direct access to the custom display names of the values in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Item(System.Int32)">
            <summary>
            Gets or sets an item at a given position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">An item with the same value as that of the assigned object is already in the list.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Gets or sets a value at a given position.
            </summary>
            <param name="index">The position of the value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">The assigned value is already in the list.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Indicates whether the list is read-only.
            </summary>
            <value>
            <para>This implementation will always return <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.ValueDisplayNameAccessor">
            <summary>
            An object that implements the <see cref="T:TwoLayeredGUI.IArray`1"/> interface and provides access to the custom display names of the items in the <see cref="T:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList"/>.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.ValueDisplayNameAccessor.#ctor(TwoLayeredGUI.ValueInput.EnumValue{`0}.ValueList)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="owner">The owner of the instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.ValueDisplayNameAccessor.owner">
            <summary>
            The owner of the instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.ValueDisplayNameAccessor.GetEnumerator">
            <summary>
            Returns an object that enumerates all elements of the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.ValueDisplayNameAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all elements of the list.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.ValueDisplayNameAccessor.Item(System.Int32)">
            <summary>
            Gets or sets an item at a given position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.ValueDisplayNameAccessor.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.EnumValue`1.ValueList.ValueDisplayNameAccessor.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.IInputBoxProvider">
            <summary>
            An interface for objects that can display an input box.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.IInputBoxProvider.Show(TwoLayeredGUI.ValueInput.InputBoxSettings,System.Object[]@)">
            <summary>
            Displays an input box.
            </summary>
            <param name="settings">The settings for the dialog box.</param>
            <param name="resultingValues">The values present in the input widgets when the dialog box is closed will be output to this parameter, no matter what the result of the method.</param>
            <returns>A value indicating whether the input was confirmed by the user.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:TwoLayeredGUI.ValueInput.InputBoxSettings.Values"/> property of the <paramref name="settings"/> object contains a <see cref="T:TwoLayeredGUI.ValueInput.CustomValue`1"/> instance that is not understood by the underlying input box provider.</exception>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.IInputControlLink">
            <summary>
            Provides a link to a value input control that can get or set the current value.
            </summary>
            <remarks>
            <para>This interface provides a link to a value input control.
              Basically, it provides minimalist access to get and set the current value and to capture any changes of the value.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.IInputControlLink.Value">
            <summary>
            Gets or sets the current value.
            </summary>
            <exception cref="T:System.ArgumentException">An incompatible value is assigned.</exception>
            <value>
            <para>This property gets or sets the current value.
              If an incompatible value is assigned, an <see cref="T:System.ArgumentException"/> will be thrown.</para>
            </value>
        </member>
        <member name="E:TwoLayeredGUI.ValueInput.IInputControlLink.Changed">
            <summary>
            This event is fired when the value was changed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.InputBoxSettings">
            <summary>
            Stores settings for an input dialog box.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputBoxSettings.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>
            <para>The new instance will have an <see cref="P:TwoLayeredGUI.ButtonDef.OkButton"/> and a <see cref="P:TwoLayeredGUI.ButtonDef.CancelButton"/>.
              Note that the <see cref="P:TwoLayeredGUI.DialogBoxSettings.PreselectedControlButton"/> property will initially be set to <c>-1</c>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputBoxSettings.#ctor(TwoLayeredGUI.ValueInput.InputBoxSettings)">
            <summary>
            Initializes a new instance using settings of another instance.
            </summary>
            <param name="template">The other instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputBoxSettings.values">
            <summary>
            The list of input values to show in the input box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputBoxSettings.Values"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputBoxSettings.topDesc">
            <summary>
            A description text to show above the input controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputBoxSettings.TopDesc"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputBoxSettings.bottomDesc">
            <summary>
            A description text to show below the input controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputBoxSettings.BottomDesc"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputBoxSettings.Assign(TwoLayeredGUI.DialogBoxSettings)">
            <summary>
            Copies the settings of another object.
            </summary>
            <param name="other">The other object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputBoxSettings.Values">
            <summary>
            The list of input values to show in the input box.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputBoxSettings.TopDesc">
            <summary>
            A description text to show above the input controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputBoxSettings.BottomDesc"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputBoxSettings.BottomDesc">
            <summary>
            A description text to show below the input controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputBoxSettings.TopDesc"/>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.InputControlDescriptor`1">
            <summary>
            Stores information about an input control based upon an <see cref="T:TwoLayeredGUI.ValueInput.InputValue"/> instance.
            </summary>
            <typeparam name="TControl">The base type for all controls in the widget set being used.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.#ctor(TwoLayeredGUI.ValueInput.InputValue,`0,TwoLayeredGUI.ValueInput.IInputControlLink)">
            <summary>
            Initializes a new instance without a label.
            </summary>
            <param name="valueDef">The definition of the input value.</param>
            <param name="editorControl">The editor control.</param>
            <param name="link">The link to the editor control.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.#ctor(TwoLayeredGUI.ValueInput.InputValue,`0,`0,TwoLayeredGUI.ValueInput.IInputControlLink)">
            <summary>
            Initializes a new instance with a label.
            </summary>
            <param name="valueDef">The definition of the input value.</param>
            <param name="labelControl">The label control.</param>
            <param name="editorControl">The editor control.</param>
            <param name="link">The link to the editor control.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueDef"/>, <paramref name="editorControl"/> or <paramref name="link"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.labelControl">
            <summary>
            The label control.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.LabelControl"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.editorControl">
            <summary>
            The editor control.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.EditorControl"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.valueDef">
            <summary>
            The definition of the input value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.ValueDef"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.link">
            <summary>
            A link that provides real-time access to the value in the editor control.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.Link"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.isSingleLineControl">
            <summary>
            Indicates whether the editor control occupies only a single line.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.IsSingleLineControl"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.ValueUpdated(System.Object,System.EventArgs)">
            <summary>
            This method is called when the value has been updated.
            </summary>
            <param name="sender">The object that caused the event.</param>
            <param name="e">Some additional information about the event.</param>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.AutoValidationOnChange"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.Validate">
            <summary>
            Validates the current value.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.Validate(System.Int32,TwoLayeredGUI.IImmutableArray{System.Object})">
            <summary>
            Validates the current value in the context of a list of values.
            </summary>
            <param name="valueIndex">The index of the current value in the list.</param>
            <param name="values">The list of values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="valueIndex"/> is less than zero or greater than or equal to the number of items in <paramref name="values"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.DoValidate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.Object})">
            <summary>
            Executes the validation process.
            </summary>
            <param name="validationInfo">An object that contains some information about the value to validate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validationInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.autoValidationOnChange">
            <summary>
            Determines whether the value is automatically revalidated when it has changed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.AutoValidationOnChange"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.LabelControl">
            <summary>
            The label control.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.EditorControl">
            <summary>
            Gets or sets the editor control.
            </summary>
            <exception cref="T:System.ArgumentNullException">The assigned value is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.ValueDef">
            <summary>
            The definition of the input value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.Link">
            <summary>
            A link that provides real-time access to the value in the editor control.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.HasLabel">
            <summary>
            Indicates whether a label was assigned.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.IsSingleLineControl">
            <summary>
            Indicates whether the editor control occupies only a single line.
            </summary>
            <value>
            <para>This property gets or sets whether the <see cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.EditorControl"/> occupies only a single line.
              This may influence the alignment of the <see cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.LabelControl"/>, if any.</para>
            <para>The default value is <see langword="true"/>.
              Set the property to <see langword="false"/> if <see cref="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.EditorControl"/> is a tall control such as a multiline text input field or a list box.</para>
            </value>
        </member>
        <member name="E:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.Validated">
            <summary>
            Gets fired when the current value was revalidated.
            </summary>
            <remarks>
            <para>This event is fired when the validation of the current value has finished.
              It can be used to process any changes in the validation results.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.AutoValidationOnChange">
            <summary>
            Determines whether the value is automatically revalidated when it has changed.
            </summary>
            <value>
            <para>Gets or sets whether <see cref="M:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.Validate"/> is automatically invoked when the value has changed.
              The default value is <see langword="true"/>, as this is usually the desired behavior.
              However, there are scenarios in which the value gets revalidated upon each change anyway (for example, when it is part of a list of input values where the whole list gets revalidated upon each change to any of the values).
              In those cases, the automatic call to <see cref="M:TwoLayeredGUI.ValueInput.InputControlDescriptor`1.Validate"/> is not necessary and can be suppressed by assigning <see langword="false"/> to this property.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.InputControlFactoryArgs">
            <summary>
            Provides values used to create a custom input control.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.#ctor(TwoLayeredGUI.ValueInput.InputValue,TwoLayeredGUI.IDisposalManager)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="inputValue">The input value definition.</param>
            <param name="disposalManager">An optional disposal manager object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputValue"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.inputValue">
            <summary>
            The input value definition.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.InputValue"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.disposalManager">
            <summary>
            An object that removes any remaining references to the created control(s).
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.DisposalManager"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.InputValue">
            <summary>
            The input value definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.DisposalManager">
            <summary>
            An object that removes any remaining references to the created control(s).
            </summary>
            <value>
            <para>Some user interface toolkits do not provide any means to determine when a created control is no longer needed.
              In that situation, links between the control definition and the control itself might remain existing.
              In order to clean up these links, delegates may be registered with this object that will be called when the controls, and thus the respective links, have become obsolete.
              If there is no such cleanup desired (for example, if the control definitions are purged along with the controls, anyway), this property may be <see langword="null"/>.
              For user interface toolkits that do provide events that notify about disposal of the control, those events may be relied upon, despite a disposal manager object being supplied here.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.HasDisposalManager"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.HasDisposalManager">
            <summary>
            Indicates whether this instance has been equipped with a <see cref="P:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.DisposalManager"/>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.InputControlFactoryArgs.DisposalManager"/>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.InputControlFactoryFunc`1">
            <summary>
            A delegate for factory methods that create custom input controls.
            </summary>
            <typeparam name="TControl">The base type for controls in the widget set being used.</typeparam>
            <param name="e">An object that contains some information on how to create the control.</param>
            <returns>A descriptor of the created control.</returns>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.InputLinkValueAccessor">
            <summary>
            Provides access to input control link values.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputLinkValueAccessor.#ctor(TwoLayeredGUI.ValueInput.IInputControlLink[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="links">The links array to be used.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="links"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputLinkValueAccessor.links">
            <summary>
            The links array to be used.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputLinkValueAccessor.GetEnumerator">
            <summary>
            Returns an enumerator over all values.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputLinkValueAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over all values.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputLinkValueAccessor.Item(System.Int32)">
            <summary>
            Gets or sets a value at a specified position in the list.
            </summary>
            <param name="index">The position of the value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.InputLinkValueAccessor.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputLinkValueAccessor.Count">
            <summary>
            Returns the number of elements in the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.InputValueList">
            <summary>
            A list of <see cref="T:TwoLayeredGUI.ValueInput.InputValue"/> objects.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.InputValueList.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.IndexOf(TwoLayeredGUI.ValueInput.InputValue)">
            <summary>
            Searches for an item.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>The zero-based position of the item in the list, or a negative value if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.Insert(System.Int32,TwoLayeredGUI.ValueInput.InputValue)">
            <summary>
            Inserts an item at a given position into the list.
            </summary>
            <param name="index">The position where to insert the item.</param>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ValueInput.InputValueList.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.InputValueList.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.Add(TwoLayeredGUI.ValueInput.InputValue)">
            <summary>
            Appends an item to the end of the list.
            </summary>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.Contains(TwoLayeredGUI.ValueInput.InputValue)">
            <summary>
            Checks whether an item is in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.CopyTo(TwoLayeredGUI.ValueInput.InputValue[],System.Int32)">
            <summary>
            Copies the items in the collection to an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in <paramref name="array"/> at which to start copying the items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space in <paramref name="array"/>, starting at <paramref name="arrayIndex"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.ValueInput.InputValue"/> cannot be cast automatically to the item type of <paramref name="array"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.Remove(TwoLayeredGUI.ValueInput.InputValue)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the operation was successful.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.InputValueList.Clone">
            <summary>
            Creates a shallow copy of the object.
            </summary>
            <returns>The newly created copy.</returns>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValueList.Item(System.Int32)">
            <summary>
            Gets or sets the value of an item by its position in the list.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentNullException"><see langword="null"/> is assigned.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.InputValueList.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValueList.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.InputValueList.System#Collections#Generic#ICollection{TwoLayeredGUI#ValueInput#InputValue}#IsReadOnly">
            <summary>
            Indicates whether the list is read-only.
            </summary>
            <value>
            <para>This implementation always returns <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Int32Value">
            <summary>
            The definition of a 32 bit signed integer input value.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Int32Value.#ctor(TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Int32}[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Int32Value.#ctor(TwoLayeredGUI.AccessString,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Int32}[])">
            <summary>
            Initializes a new instance with a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Int32Value.#ctor(TwoLayeredGUI.AccessString,System.Int32,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Int32}[])">
            <summary>
            Initializes a new instance with a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="initialValue">The initial value.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Int32Value.minValue">
            <summary>
            The minimum value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Int32Value.MinValue"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Int32Value.maxValue">
            <summary>
            The maximum value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Int32Value.MaxValue"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Int32Value.Kind">
            <summary>
            Gets the value kind of the input value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Int32Value.MinValue">
            <summary>
            The minimum value.
            </summary>
            <value>
            <para>Gets or sets the minimum <see cref="T:System.Int32"/> value allowed.
              This constraint will be evaluated in the generated user interface.
              The default value is <see cref="F:System.Int32.MinValue"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Int32Value.MaxValue">
            <summary>
            The maximum value.
            </summary>
            <value>
            <para>Gets or sets the maximum <see cref="T:System.Int32"/> value allowed.
              This constraint will be evaluated in the generated user interface.
              The default value is <see cref="F:System.Int32.MaxValue"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.ListValidatedEventArgs">
            <summary>
            An object that stores information about validation results of a list of values.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="errorMessages">An enumeration of enumerations of error messages.
              Each item contains all validation error messages for the input value at that index.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="errorMessages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.errorMessages">
            <summary>
            The validation error messages for the various values.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.ValueCount"/>
            <seealso cref="M:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.GetErrorMessages(System.Int32)"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.GetErrorMessages(System.Int32)">
            <summary>
            Retrieves the error messages for a given value.
            </summary>
            <param name="valueIndex">The index of the value.</param>
            <returns>An enumeration of error messages.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="valueIndex"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.ValueCount"/>.</exception>
            <seealso cref="P:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.ValueCount"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.isValid">
            <summary>
            Indicates whether all the values are valid.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.IsValid"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.ValueCount">
            <summary>
            The number of values for which error message lists are stored in the object.
            </summary>
            <seealso cref="M:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.GetErrorMessages(System.Int32)"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.ListValidatedEventArgs.IsValid">
            <summary>
            Indicates whether all the values are valid.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.NamespaceDoc">
            <summary>
            This namespaces contains types for defining dialog boxes with simple titled input elements.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.SingleValue">
            <summary>
            The definition of a single-precision floating point input value.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.SingleValue.#ctor(TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Single}[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.SingleValue.#ctor(TwoLayeredGUI.AccessString,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Single}[])">
            <summary>
            Initializes a new instance with a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.SingleValue.#ctor(TwoLayeredGUI.AccessString,System.Single,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.Single}[])">
            <summary>
            Initializes a new instance with a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="initialValue">The initial value.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.SingleValue.significantDecimalPlaces">
            <summary>
            Specifies the number of significant decimal places.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.SingleValue.SignificantDecimalPlaces"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.SingleValue.minValue">
            <summary>
            The minimum value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.SingleValue.MinValue"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.SingleValue.maxValue">
            <summary>
            The maximum value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.SingleValue.MaxValue"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.SingleValue.Kind">
            <summary>
            Gets the value kind of the input value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.SingleValue.SignificantDecimalPlaces">
            <summary>
            Specifies the number of significant decimal places.
            </summary>
            <value>
            <para>This property gets or sets the number of significant decimal places to display in the input control for the value.
              The default value is 2.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.SingleValue.MinValue">
            <summary>
            The minimum value.
            </summary>
            <value>
            <para>Gets or sets the minimum <see cref="T:System.Single"/> value allowed.
              This constraint will be evaluated in the generated user interface.
              The default value is <c>0</c>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.SingleValue.MaxValue">
            <summary>
            The maximum value.
            </summary>
            <value>
            <para>Gets or sets the maximum <see cref="T:System.Int32"/> value allowed.
              This constraint will be evaluated in the generated user interface.
              The default value is <c>100</c>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.StringValue">
            <summary>
            The definition of a string input value.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.StringValue.#ctor(TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.String}[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.StringValue.#ctor(TwoLayeredGUI.AccessString,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.String}[])">
            <summary>
            Initializes a new instance with a caption.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.StringValue.#ctor(TwoLayeredGUI.AccessString,System.String,TwoLayeredGUI.ValueInput.Validators.ValueValidator{System.String}[])">
            <summary>
            Initializes a new instance with a caption and a custom initial value.
            </summary>
            <param name="text">The caption of the input control.</param>
            <param name="initialValue">The initial value.</param>
            <param name="validators">The validators for the new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="validators"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.StringValue.Kind">
            <summary>
            Gets the value kind of the input value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.StringValue.InitialValue">
            <summary>
            The initial value.
            </summary>
            <value>
            <para>This property gets or sets the initial value.
              It can never be <see langword="null"/>.
              <see langword="null"/> is always replaced with an empty string.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.ValidatedEventArgs">
            <summary>
            An object that stores information about validation results of a value.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.ValidatedEventArgs.#ctor(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="currentValue">The validated value.</param>
            <param name="errorMessages">The error messages generated during the validation.
              If no error messages were generated, an enumerable that returns no items must be passed here.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="currentValue"/>, <paramref name="errorMessages"/>, or any of its arguments is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ValidatedEventArgs.currentValue">
            <summary>
            The validated value.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.ValidatedEventArgs.CurrentValue"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ValidatedEventArgs.errorMessages">
            <summary>
            The error messages generated during the validation.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.ValidatedEventArgs.IsValid"/>
            <seealso cref="P:TwoLayeredGUI.ValueInput.ValidatedEventArgs.ErrorMessages"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.ValidatedEventArgs.CurrentValue">
            <summary>
            The validated value.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.ValidatedEventArgs.ErrorMessages">
            <summary>
            An enumerable that returns all the error messages generated during the validation.
            </summary>
            <value>
            <para>This property returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that returns all error messages generated during the validation.
              If no errors were found, this will be an object that returns no items.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ValueInput.ValidatedEventArgs.IsValid"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.ValidatedEventArgs.IsValid">
            <summary>
            Indicates whether the value was successfully validated.
            </summary>
            <value>
            <para>Gets a value that indicates whether the validation was successful.</para>
            <para>If <see langword="true"/>, none of the validators applied reported any error.
              If <see langword="false"/>, at least one validator reported an error.
              The messages can be retrieved from the <see cref="P:TwoLayeredGUI.ValueInput.ValidatedEventArgs.ErrorMessages"/> property.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.ValueInput.ValidatedEventArgs.ErrorMessages"/>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.IValueValidatorContainer">
            <summary>
            An object that may contain value validators and allows a non-typesafe access to them.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.IValueValidatorContainer.ValidateAll(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.Object})">
            <summary>
            Validates a given value with all validators.
            </summary>
            <param name="info">An object that contains some information about the value to validate.</param>
            <returns>An array with all error messages that have occurred during the validation process.
              If no errors were found, the resulting array will be empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The value in <paramref name="info"/> could not be cast to the required type.</exception>
            <seealso cref="M:TwoLayeredGUI.ValueInput.Validators.IValueValidatorContainer.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.Object})"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.IValueValidatorContainer.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.Object})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.</param>
            <returns>A value that indicates whether the value was valid.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The value in <paramref name="info"/> could not be cast to the required type.</exception>
            <remarks>
            <para>This method validates the given value by passing it to the <see cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/> method of the items in the list.
              It does not always call all validators.
              As soon as it is discovered that the value is invalid, the validation process will be aborted and <see langword="false"/> will be returned.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.ValueInput.Validators.IValueValidatorContainer.ValidateAll(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.Object})"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.IValueValidatorContainer.HasValidators">
            <summary>
            Indicates whether there are any validators in the object.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.IValueValidatorList`1">
            <summary>
            An interface for a list of input value validator objects.
            </summary>
            <typeparam name="TValue">The data type to validate.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.IValueValidatorList`1.ValidateAll(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})">
            <summary>
            Validates a given value with all validators.
            </summary>
            <param name="info">An object that contains some information about the value to validate.</param>
            <returns>An array with all error messages that have occurred during the validation process.
              If no errors were found, the resulting array will be empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <seealso cref="M:TwoLayeredGUI.ValueInput.Validators.IValueValidatorList`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.IValueValidatorList`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.</param>
            <returns>A value that indicates whether the value was valid.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method validates the given value by passing it to the <see cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/> method of the items in the list.
              It does not always call all validators.
              As soon as it is discovered that the value is invalid, the validation process will be aborted and <see langword="false"/> will be returned.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.ValueInput.Validators.IValueValidatorList`1.ValidateAll(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.NamespaceDoc">
            <summary>
            This namespaces contains base types for validators of input values, some default validators as well as container classes for the validators.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.NonEmptyStringValidator">
            <summary>
            An object that validates that a string is not empty (having a length of zero, or containing only whitespace).
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.NonEmptyStringValidator.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.NonEmptyStringValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance with a custom error message.
            </summary>
            <param name="emptyStringMessage">The error message to show if the validated value is empty.</param>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.NonEmptyStringValidator.DefaultEmptyStringMessage">
            <summary>
            The default value for the <see cref="P:TwoLayeredGUI.ValueInput.Validators.NonEmptyStringValidator.EmptyStringMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.NonEmptyStringValidator.emptyStringMessage">
            <summary>
            The message to show when the validated value is not unique among the compared values.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.NonEmptyStringValidator.EmptyStringMessage"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.NonEmptyStringValidator.DoValidate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.String})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.
              This cannot be <see langword="null"/>.</param>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.NonEmptyStringValidator.EmptyStringMessage">
            <summary>
            The message to show when the validated value is not unique among the compared values.
            </summary>
            <value>
            <para>Gets or sets the message to show when the validated value is not unique among the compared values.
              The following <see cref="M:System.String.Format(System.String,System.Object[])"/> arguments may be used:</para>
            <list type="table">
              <listheader>
                <term>Index</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><c>0</c></term>
                <description>The validated value.</description>
              </item>
            </list>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator">
            <summary>
            An object that validates strings based on regular expressions.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance with a pattern string.
            </summary>
            <param name="pattern">The pattern.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is not a valid regular expression.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance with a regular expression.
            </summary>
            <param name="regex">The regular expression.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="regex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance with a pattern string and a custom error message.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="doesNotMatchMessage">The initial value for the <see cref="P:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.DoesNotMatchMessage"/> property.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is not a valid regular expression.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.#ctor(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Initializes a new instance with a regular expression and a custom error message.
            </summary>
            <param name="regex">The regular expression.</param>
            <param name="doesNotMatchMessage">The initial value for the <see cref="P:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.DoesNotMatchMessage"/> property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="regex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.DefaultDoesNotMatchMessage">
            <summary>
            The default value for the <see cref="P:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.DoesNotMatchMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.doesNotMatchMessage">
            <summary>
            The message to show when the validated string does not match the regular expression.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.DoesNotMatchMessage"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.regex">
            <summary>
            The regular expression.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.DoValidate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.String})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.
              This cannot be <see langword="null"/>.</param>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.RegexStringValidator.DoesNotMatchMessage">
            <summary>
            The message to show when the validated string does not match the regular expression.
            </summary>
            <value>
            <para>Gets or sets the message to show when the string being validated does not match the pattern.
              The following <see cref="M:System.String.Format(System.String,System.Object[])"/> arguments may be used:</para>
            <list type="table">
              <listheader>
                <term>Index</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><c>0</c></term>
                <description>The validated string.</description>
              </item>
              <item>
                <term><c>1</c></term>
                <description>The regular expression.</description>
              </item>
            </list>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator">
            <summary>
            An object that validates strings based on their length.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance with a maximum string length.
            </summary>
            <param name="maxLength">The maximum allowable length.</param>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with a minimum and maximum string length.
            </summary>
            <param name="minLength">The minimum allowable length.</param>
            <param name="maxLength">The maximum allowable length.</param>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance with a maximum string length and a custom error message.
            </summary>
            <param name="maxLength">The maximum allowable length.</param>
            <param name="tooLongMessage">The error message to show if the validated string exceeds <paramref name="maxLength"/>.</param>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance with a minimum and maximum string length and custom error messages.
            </summary>
            <param name="minLength">The minimum allowable length.</param>
            <param name="maxLength">The maximum allowable length.</param>
            <param name="tooShortMessage">The error message to show if the validated string is shorter than <paramref name="minLength"/>.</param>
            <param name="tooLongMessage">The error message to show if the validated string exceeds <paramref name="maxLength"/>.</param>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.DefaultTooShortMessage">
            <summary>
            The default value for the <see cref="P:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.TooShortMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.tooShortMessage">
            <summary>
            The message to show when the validated string is too short.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.TooShortMessage"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.DefaultTooLongMessage">
            <summary>
            The default value for the <see cref="P:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.TooLongMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.tooLongMessage">
            <summary>
            The message to show when the validated string is too long.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.TooLongMessage"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.minLength">
            <summary>
            The minimum allowable length of the string.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.maxLength">
            <summary>
            The maximum allowable length of the string.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.DoValidate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.String})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.
              This cannot be <see langword="null"/>.</param>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.TooShortMessage">
            <summary>
            The message to show when the validated string is too short.
            </summary>
            <value>
            <para>Gets or sets the message to show when the string being validated is too short.
              The following <see cref="M:System.String.Format(System.String,System.Object[])"/> arguments may be used:</para>
            <list type="table">
              <listheader>
                <term>Index</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><c>0</c></term>
                <description>The validated string.</description>
              </item>
              <item>
                <term><c>1</c></term>
                <description>The actual length of the validated string.</description>
              </item>
              <item>
                <term><c>2</c></term>
                <description>The minimum allowable length.</description>
              </item>
            </list>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.StringLengthValidator.TooLongMessage">
            <summary>
            The message to show when the validated string is too long.
            </summary>
            <value>
            <para>Gets or sets the message to show when the string being validated is too long.
              The following <see cref="M:System.String.Format(System.String,System.Object[])"/> arguments may be used:</para>
            <list type="table">
              <listheader>
                <term>Index</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><c>0</c></term>
                <description>The validated string.</description>
              </item>
              <item>
                <term><c>1</c></term>
                <description>The actual length of the validated string.</description>
              </item>
              <item>
                <term><c>2</c></term>
                <description>The maximum allowable length.</description>
              </item>
            </list>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1">
            <summary>
            A <see cref="T:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1"/> that checks whether the value is unique within its list.
            </summary>
            <typeparam name="TValue">The data type to validate.</typeparam>
            <remarks>
            <para>This validator considers the list of values passed with the <see cref="T:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1"/> object.
              It checks whether the current value is unique among all values in that list.
              The <see cref="M:System.Object.Equals(System.Object)"/> method is used for equality comparison.</para>
            <para>Derived classes can override the <see cref="M:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.CheckValue(System.Int32,System.Object)"/> method in order to exclude some of the values in the list from the uniqueness check.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.#ctor(System.String)">
            <summary>
            Initializes a new instance with a custom error message.
            </summary>
            <param name="notUniqueMessage">The error message to show if the validated value is not unique.</param>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.DefaultNotUniqueMessage">
            <summary>
            The default value for the <see cref="P:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.NotUniqueMessage"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.notUniqueMessage">
            <summary>
            The message to show when the validated value is not unique among the compared values.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.NotUniqueMessage"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.DoValidate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.
              This cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.CheckValue(System.Int32,System.Object)">
            <summary>
            Indicates whether a given value should be checked for collisions with the current value.
            </summary>
            <param name="valueIndex">The index of the value to compare.</param>
            <param name="value">The value to compare.</param>
            <returns>If the checked value must not be the same as the value passed to the parameters, the function returns <see langword="true"/>, otherwise it returns <see langword="false"/>.</returns>
            <remarks>
            <para>This method serves for filtering the values in case the checked value does not need to be unique among all of them.
              The default implementation always returns <see langword="true"/>.
              Derived classes may override this method to exclude some values from the comparison.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.UniqueValueValidator`1.NotUniqueMessage">
            <summary>
            The message to show when the validated value is not unique among the compared values.
            </summary>
            <value>
            <para>Gets or sets the message to show when the validated value is not unique among the compared values.
              The following <see cref="M:System.String.Format(System.String,System.Object[])"/> arguments may be used:</para>
            <list type="table">
              <listheader>
                <term>Index</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><c>0</c></term>
                <description>The validated value.</description>
              </item>
              <item>
                <term><c>1</c></term>
                <description>The index of the conflicting value.</description>
              </item>
            </list>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1">
            <summary>
            An object that stores some information about the value being validated by a <see cref="T:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1"/>.
            </summary>
            <typeparam name="TValue">The data type to validate.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.#ctor(`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="value">The value to validate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.#ctor(`0,System.Int32,TwoLayeredGUI.IImmutableArray{System.Object})">
            <summary>
            Initializes a new instance with a list of values.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="valueIndex">The index of <paramref name="value"/> in <paramref name="values"/>.</param>
            <param name="values">The list of values that <paramref name="value"/> belongs to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> or <paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="valueIndex"/> is less than zero or greater than or equal to the number of items in <paramref name="values"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.value">
            <summary>
            The value to validate.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Value"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.valueIndex">
            <summary>
            The index of <see cref="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Value"/> in <see cref="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Values"/>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.ValueIndex"/>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.values">
            <summary>
            The list of values that <see cref="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Value"/> belongs to.
            </summary>
            <seealso cref="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Values"/>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Value">
            <summary>
            The value to validate.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.ValueIndex">
            <summary>
            The index of <see cref="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Value"/> in <see cref="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Values"/>.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Values">
            <summary>
            The list of values that <see cref="P:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1.Value"/> belongs to.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1">
            <summary>
            A list of input value validator objects.
            </summary>
            <typeparam name="TValue">The data type to validate.</typeparam>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.items">
            <summary>
            The list of validator objects.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.IndexOf(TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0})">
            <summary>
            Finds an item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The position of the item, or a negative value if the item was not found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Insert(System.Int32,TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0})">
            <summary>
            Inserts an item at the given position into the list.
            </summary>
            <param name="index">The position of the item.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the given position.
            </summary>
            <param name="index">The position of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Add(TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0})">
            <summary>
            Appends an item at the end of the list.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Contains(TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0})">
            <summary>
            Checks whether the list contains a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether the item was found in the list.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.CopyTo(TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1"/> cannot be cast to the item type of the destination array.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Remove(TwoLayeredGUI.ValueInput.Validators.ValueValidator{`0})">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the item could be removed.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.GetEnumerator">
            <summary>
            Returns an object that enumerates all items.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that enumerates all items.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.ValidateAll(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})">
            <summary>
            Validates a given value with all validators.
            </summary>
            <param name="info">An object that contains some information about the value to validate.</param>
            <returns>An array with all error messages that have occurred during the validation process.
              If no errors were found, the resulting array will be empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <seealso cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.</param>
            <returns>A value that indicates whether the value was valid.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method validates the given value by passing it to the <see cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/> method of the items in the list.
              It does not always call all validators.
              As soon as it is discovered that the value is invalid, the validation process will be aborted and <see langword="false"/> will be returned.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.ValidateAll(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.TwoLayeredGUI#ValueInput#Validators#IValueValidatorContainer#ValidateAll(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.Object})">
            <summary>
            Validates a given value with all validators.
            </summary>
            <param name="info">An object that contains some information about the value to validate.</param>
            <returns>An array with all error messages that have occurred during the validation process.
              If no errors were found, the resulting array will be empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The value in <paramref name="info"/> could not be cast to the required type.</exception>
            <seealso cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.TwoLayeredGUI#ValueInput#Validators#IValueValidatorContainer#Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.Object})">
            <summary>
            Validates a given value.
            </summary>
            <param name="info">An object that contains some information about the value to validate.</param>
            <returns>A value that indicates whether the value was valid.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The value in <paramref name="info"/> could not be cast to the required type.</exception>
            <remarks>
            <para>This method validates the given value by passing it to the <see cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidator`1.Validate(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/> method of the items in the list.
              It does not always call all validators.
              As soon as it is discovered that the value is invalid, the validation process will be aborted and <see langword="false"/> will be returned.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.ValidateAll(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{`0})"/>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.CastInfoObject(TwoLayeredGUI.ValueInput.Validators.ValidationInfo{System.Object})">
            <summary>
            Casts a <see cref="T:TwoLayeredGUI.ValueInput.Validators.ValidationInfo`1"/> object typed to <see cref="T:System.Object"/> to an instance typed to the type parameter <typeparamref name="TValue"/>.
            </summary>
            <param name="info">The object to cast.</param>
            <returns>The strongly-typed validation info object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The value in <paramref name="info"/> could not be cast to <typeparamref name="TValue"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.OnItemInserted(TwoLayeredGUI.ListChangedEventArgs)">
            <summary>
            This method triggers any events connected to the insertion of an item.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.OnItemRemoved(TwoLayeredGUI.ListChangedEventArgs)">
            <summary>
            This method triggers any events connected to the removal of an item.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.OnItemReplaced(TwoLayeredGUI.ListChangedEventArgs)">
            <summary>
            This method triggers any events connected to the substitution of an item.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Item(System.Int32)">
            <summary>
            Gets or sets an item at the given position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentNullException">The assigned value is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.System#Collections#Generic#ICollection{TwoLayeredGUI#ValueInput#Validators#ValueValidator{TValue}}#IsReadOnly">
            <summary>
            Indicates whether the object can be changed.
            </summary>
            <remarks>
            <para>This implementation of the property always returns <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.HasValidators">
            <summary>
            Indicates whether there are any validators in the object.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.ItemInserted">
            <summary>
            This event is fired when an item has been inserted.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.ItemRemoved">
            <summary>
            This event is fired when an item has been deleted.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.ValueInput.Validators.ValueValidatorList`1.ItemReplaced">
            <summary>
            This event is fired when an item has been replaced without modifying the total length of the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.ValueInput.ValueKind">
            <summary>
            This enumeration provides values that denote an input value type.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ValueKind.Custom">
            <summary>
            A custom input value type.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ValueKind.String">
            <summary>
            A string of characters.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ValueKind.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ValueKind.Int32">
            <summary>
            A 32 bit signed integer.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ValueKind.Single">
            <summary>
            A single-precision floating point number.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.ValueInput.ValueKind.Enum">
            <summary>
            A value that can be one out of a list of pre-defined values.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.ChoicePage`1">
            <summary>
            A wizard page that provides several exclusive options, one of which must be chosen by the user.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to (partially) edit on the page.</typeparam>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.CustomTypeWizardPage`1">
            <summary>
            The base class for pages in a wizard user interface that have a custom page kind.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to (partially) edit on the page.</typeparam>
            <remarks>
            <para>This base class is almost the same as <see cref="T:TwoLayeredGUI.Wizard.WizardPage`1"/>, but allows to change the page kind.
              This should be used sparsely, as most pages are supposed to be <see cref="F:TwoLayeredGUI.Wizard.WizardPageKind.SettingsPage"/> pages.</para>
            <para>Changing the page kind while the page is being shown does not have any immediate effect.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardPage`1">
            <summary>
            The base class for pages in a wizard user interface.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to (partially) edit on the page.</typeparam>
            <remarks>
            <para>This class is the base class for all wizard pages.
              Subclasses can restrict the <typeparamref name="TSettings"/> type argument to determine what settings objects can be edited on the page.</para>
            <para>The <see cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Kind"/> property determines the basic page type.
              Based on that, the values of the <see cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Title"/> and the <see cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Description"/> properties may be used when displaying the page.</para>
            <para>Change <see cref="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowBack"/>, <see cref="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowNext"/>, <see cref="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowFinish"/> and <see cref="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowCancel"/> to set initial values for the activation state of the control buttons of the wizard when the page is entered.</para>
            <para>The <see cref="T:TwoLayeredGUI.Wizard.WizardPage`1"/> class provides a validation system for settings made on the page.
              Proceeding or finishing the wizard will be prevented as long as the validation of the current input fails.
              To validate any settings, register one or more event handlers with the <see cref="E:TwoLayeredGUI.Wizard.WizardPage`1.Validating"/> event, or override the <see cref="M:TwoLayeredGUI.Wizard.WizardPage`1.OnValidating(TwoLayeredGUI.Wizard.WizardValidationEventArgs{`0})"/> method.
              The validation process can be triggered by invoking the <see cref="M:TwoLayeredGUI.Wizard.IWizardController`1.ValidatePageSettings"/> method of the controller object of the wizard.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IWizardPage">
            <summary>
            A single page in a wizard user interface that is not typed to a specific settings type.
            </summary>
            <remarks>
            <para>This interface provides access to those members of the <see cref="T:TwoLayeredGUI.Wizard.WizardPage`1"/> type that do not depend on that class's type argument.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardPage.Title">
            <summary>
            The title of the page.
            </summary>
            <value>
            <para>The title of the page will be displayed as a headline to the wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardPage.Description">
            <summary>
            The description of the page.
            </summary>
            <value>
            <para>The description of the page may be displayed above the page.
              It should describe what is to be done on the page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardPage.Kind">
            <summary>
            Indicates the wizard page kind.
            </summary>
            <value>
            <para>This property indicates the kind of the wizard page.
              There is a limited number of basic wizard page layouts, one of which is chosen depending on the value of this property.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardPage.AllowBack">
            <summary>
            Gets or sets whether the user can switch to the previous wizard page by default when this page is displayed.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the previous wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no previous wizard page.</para>
            <para>Upon entering a page, this property serves as the initial value for the <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowBack"/> property.
              The default value is <see langword="true"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardPage.AllowNext">
            <summary>
            Gets or sets whether the user can switch to the next wizard page by default when this page is displayed.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the next wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no next wizard page.</para>
            <para>Upon entering a page, this property serves as the initial value for the <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowNext"/> property.
              The default value is <see langword="true"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardPage.AllowCancel">
            <summary>
            Gets or sets a value that determines whether the user may abort the wizard by default when this page is displayed.
            </summary>
            <value>
            <para>This property controls whether the user may abort the wizard at this page.</para>
            <para>Upon entering a page, this property serves as the initial value for the <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowCancel"/> property.
              The default value is <see langword="true"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardPage.AllowFinish">
            <summary>
            Gets or sets a value that determines whether the user can signal to complete the editing process performed in the wizard by default when this page is displayed.
            </summary>
            <value>
            <para>This property controls whether the user may finish the wizard at this page.</para>
            <para>Upon entering a page, this property serves as the initial value for the <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowFinish"/> property.
              The default value is <see langword="false"/>.</para>
            </value>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPage`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPage`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance with a custom title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <remarks>
            <para>Title and description will be displayed in the upper section of the wizard page.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Title"/>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Description"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPage`1.title">
            <summary>
            The title of the page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Title"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPage`1.description">
            <summary>
            The description of the page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Description"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPage`1.allowBack">
            <summary>
            Indicates whether the user may switch to the previous page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowBack"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPage`1.allowNext">
            <summary>
            Inidcates whether the user may switch to the next page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowNext"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPage`1.allowCancel">
            <summary>
            Indicates whether the user may abort the wizard by default when this page is displayed.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPage`1.allowFinish">
            <summary>
            Indicates whether the user may finish the wizard.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowFinish"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPage`1.OnValidating(TwoLayeredGUI.Wizard.WizardValidationEventArgs{`0})">
            <summary>
            Invokes the validation of the page settings.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:TwoLayeredGUI.Wizard.WizardPage`1.Validating"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPage`1.ValidateSettings(TwoLayeredGUI.Wizard.IWizardController{`0})">
            <summary>
            Validates the settings currently active on the page.
            </summary>
            <param name="controller">The controller object for the wizard.</param>
            <returns>A value that indicates whether the validation was successful.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
            <seealso cref="E:TwoLayeredGUI.Wizard.WizardPage`1.Validating"/>
            <seealso cref="M:TwoLayeredGUI.Wizard.WizardPage`1.OnValidating(TwoLayeredGUI.Wizard.WizardValidationEventArgs{`0})"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPage`1.Title">
            <summary>
            The title of the page.
            </summary>
            <value>
            <para>The title of the page will be displayed as a headline to the wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPage`1.Description">
            <summary>
            The description of the page.
            </summary>
            <value>
            <para>The description of the page may be displayed above the page.
              It should describe what is to be done on the page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPage`1.Kind">
            <summary>
            Indicates the wizard page kind.
            </summary>
            <value>
            <para>This property indicates the kind of the wizard page.
              There is a limited number of basic wizard page layouts, one of which is chosen depending on the value of this property.</para>
            <para>The default implementation of this property returns <see cref="F:TwoLayeredGUI.Wizard.WizardPageKind.SettingsPage"/>.
              For pages where this is not desired, the property can be overridden to return another value.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowBack">
            <summary>
            Gets or sets whether the user can switch to the previous wizard page by default when this page is displayed.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the previous wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no previous wizard page.</para>
            <para>Upon entering a page, this property serves as the initial value for the <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowBack"/> property.
              The default value is <see langword="true"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowNext">
            <summary>
            Gets or sets whether the user can switch to the next wizard page by default when this page is displayed.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the next wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no next wizard page.</para>
            <para>Upon entering a page, this property serves as the initial value for the <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowNext"/> property.
              The default value is <see langword="true"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowCancel">
            <summary>
            Gets or sets a value that determines whether the user may abort the wizard by default when this page is displayed.
            </summary>
            <value>
            <para>This property controls whether the user may abort the wizard at this page.</para>
            <para>Upon entering a page, this property serves as the initial value for the <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowCancel"/> property.
              The default value is <see langword="true"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPage`1.AllowFinish">
            <summary>
            Gets or sets a value that determines whether the user can signal to complete the editing process performed in the wizard by default when this page is displayed.
            </summary>
            <remarks>
            <para>Upon entering a page, this property serves as the initial value for the <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowFinish"/> property.
              The default value is <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardPage`1.Validating">
            <summary>
            This event is fired when the settings on the page are being validated.
            </summary>
            <remarks>
            <para>This event is fired whenever the settings validation has been initiated.
              Event handlers should examine one or more of the current settings made on the wizard page and determine whether they fulfill the requirements for validity as imposed by the project requirements.
              The result of the validation process should be stored in the object passed as an argument by using its <see cref="M:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.SetValid"/> and <see cref="M:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.SetInvalid"/> method.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.Wizard.WizardPage`1.OnValidating(TwoLayeredGUI.Wizard.WizardValidationEventArgs{`0})"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.CustomTypeWizardPage`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>
            <para>This constructor initializes a new instance and sets the page kind as <see cref="F:TwoLayeredGUI.Wizard.WizardPageKind.SettingsPage"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.CustomTypeWizardPage`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance with a custom title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <remarks>
            <para>This constructor initializes a new instance and sets the page kind as <see cref="F:TwoLayeredGUI.Wizard.WizardPageKind.SettingsPage"/>.</para>
            <para>Title and description will be displayed in the upper section of the wizard page.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Title"/>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Description"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.CustomTypeWizardPage`1.#ctor(TwoLayeredGUI.Wizard.WizardPageKind)">
            <summary>
            Initializes a new instance with a custom page kind.
            </summary>
            <param name="kind">The kind of the wizard page.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="kind"/> is not a valid <see cref="T:TwoLayeredGUI.Wizard.WizardPageKind"/> value.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.CustomTypeWizardPage`1.#ctor(TwoLayeredGUI.Wizard.WizardPageKind,System.String,System.String)">
            <summary>
            Initializes a new instance with a custom title, description and page kind.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="kind">The kind of the wizard page.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="kind"/> is not a valid <see cref="T:TwoLayeredGUI.Wizard.WizardPageKind"/> value.</exception>
            <remarks>
            <para>Title and description will be displayed in the upper section of the wizard page.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Title"/>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPage`1.Description"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.CustomTypeWizardPage`1.kind">
            <summary>
            Indicates the wizard page kind.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.CustomTypeWizardPage`1.Kind"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.CustomTypeWizardPage`1.Kind">
            <summary>
            Indicates the wizard page kind.
            </summary>
            <value>
            <para>This property indicates the kind of the wizard page.
              There is a limited number of basic wizard page layouts, one of which is chosen depending on the value of this property.</para>
            </value>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.#ctor(System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.BooleanValue})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="options">The options offered on the page.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.#ctor(TwoLayeredGUI.ValueInput.BooleanValue,TwoLayeredGUI.ValueInput.BooleanValue[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="firstOption">The first option definition.</param>
            <param name="moreOptions">More option definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstOption"/>, <paramref name="moreOptions"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.#ctor(System.Func{TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32},System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32},System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.BooleanValue})">
            <summary>
            Initializes a new instance with conversion delegates.
            </summary>
            <param name="loadChoiceFunc">A method that loads the selected choice from a <typeparamref name="TSettings"/> instance and returns it.</param>
            <param name="storeChoiceAction">A method that stores the selected choice in a <typeparamref name="TSettings"/> instance.</param>
            <param name="options">The options offered on the page.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.#ctor(System.Func{TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32},System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32},TwoLayeredGUI.ValueInput.BooleanValue,TwoLayeredGUI.ValueInput.BooleanValue[])">
            <summary>
            Initializes a new instance with conversion delegates.
            </summary>
            <param name="loadChoiceFunc">A method that loads the selected choice from a <typeparamref name="TSettings"/> instance and returns it.</param>
            <param name="storeChoiceAction">A method that stores the selected choice in a <typeparamref name="TSettings"/> instance.</param>
            <param name="firstOption">The first option definition.</param>
            <param name="moreOptions">More option definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstOption"/>, <paramref name="moreOptions"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.BooleanValue})">
            <summary>
            Initializes a new instance with a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="options">The options offered on the page.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.#ctor(System.String,System.String,TwoLayeredGUI.ValueInput.BooleanValue,TwoLayeredGUI.ValueInput.BooleanValue[])">
            <summary>
            Initializes a new instance with a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="firstOption">The first option definition.</param>
            <param name="moreOptions">More option definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstOption"/>, <paramref name="moreOptions"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.#ctor(System.String,System.String,System.Func{TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32},System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32},System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.BooleanValue})">
            <summary>
            Initializes a new instance with conversion delegates and a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="loadChoiceFunc">A method that loads the selected choice from a <typeparamref name="TSettings"/> instance and returns it.</param>
            <param name="storeChoiceAction">A method that stores the selected choice in a <typeparamref name="TSettings"/> instance.</param>
            <param name="options">The options offered on the page.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.#ctor(System.String,System.String,System.Func{TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32},System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32},TwoLayeredGUI.ValueInput.BooleanValue,TwoLayeredGUI.ValueInput.BooleanValue[])">
            <summary>
            Initializes a new instance with conversion delegates and a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="loadChoiceFunc">A method that loads the selected choice from a <typeparamref name="TSettings"/> instance and returns it.</param>
            <param name="storeChoiceAction">A method that stores the selected choice in a <typeparamref name="TSettings"/> instance.</param>
            <param name="firstOption">The first option definition.</param>
            <param name="moreOptions">More option definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstOption"/>, <paramref name="moreOptions"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ChoicePage`1.loadChoiceFunc">
            <summary>
            A method that loads the selected choice from a <typeparamref name="TSettings"/> instance and returns it.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ChoicePage`1.LoadChoiceFunc"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ChoicePage`1.storeChoiceAction">
            <summary>
            A method that stores the selected choice in a <typeparamref name="TSettings"/> instance.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ChoicePage`1.StoreChoiceAction"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ChoicePage`1.options">
            <summary>
            The options offered on the page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ChoicePage`1.Options"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ChoicePage`1.topDesc">
            <summary>
            The text displayed above the options.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ChoicePage`1.TopDesc"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ChoicePage`1.showAsList">
            <summary>
            Determines whether the options should be shown as a list.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ChoicePage`1.ShowAsList"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ChoicePage`1.bottomDesc">
            <summary>
            The text displayed below the options.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ChoicePage`1.BottomDesc"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.LoadChoice(TwoLayeredGUI.Wizard.IWizardController{`0})">
            <summary>
            Loads the selected choice from the settings object into the page GUI.
            </summary>
            <param name="controller">An object that provides access to the current wizard and the settings.</param>
            <returns>The index of the selected choice.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.StoreChoice(TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32)">
            <summary>
            Stores the selected choice from the page GUI into the settings object.
            </summary>
            <param name="controller">An object that provides access to the current wizard and the settings.</param>
            <param name="choice">A index of the choice selected in the wizard page.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ChoicePage`1.FireChoiceChanged(TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32)">
            <summary>
            Fires the <see cref="E:TwoLayeredGUI.Wizard.ChoicePage`1.ChoiceChanged"/> event.
            </summary>
            <param name="controller">A controller object that provides access to a wizard.</param>
            <param name="choice">The index of the selected choice.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method fires the <see cref="E:TwoLayeredGUI.Wizard.ChoicePage`1.ChoiceChanged"/> event.
              It is public because the page definition does not know about state, but needs to provide the event in its public interface.
              The changes are actually registered by the page GUI.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ChoicePage`1.LoadChoiceFunc">
            <summary>
            A method that loads the selected choice from a <typeparamref name="TSettings"/> instance and returns it.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ChoicePage`1.StoreChoiceAction">
            <summary>
            A method that stores the selected choice in a <typeparamref name="TSettings"/> instance.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ChoicePage`1.Options">
            <summary>
            The options offered on the page.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ChoicePage`1.TopDesc">
            <summary>
            The text displayed above the options.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ChoicePage`1.BottomDesc"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ChoicePage`1.ShowAsList">
            <summary>
            Determines whether the options should be shown as a list.
            </summary>
            <value>
            <para>Gets or sets a value that determines whether the options should be shown as a list rather than as single controls.</para>
            <para>Depending on the GUI binding used, the representation of the options may change when this property is <see langword="true"/>.
              The list representation is more appropriate for large numbers of options, whereas a value of <see langword="false"/> should be chosen if there is only a small number of options that can easily be displayed on one wizard page.</para>
            <para>The default value is <see langword="false"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ChoicePage`1.BottomDesc">
            <summary>
            The text displayed below the options.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ChoicePage`1.TopDesc"/>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.ChoicePage`1.ChoiceChanged">
            <summary>
            This event is fired when the selected choice was changed in the displayed page.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IActivePage`1">
            <summary>
            An interface to an active wizard page.
            </summary>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IActivePage`1.ShowPage">
            <summary>
            This must be called when <see cref="P:TwoLayeredGUI.Wizard.IActivePage`1.Page"/> is just displayed.
            </summary>
            <seealso cref="M:TwoLayeredGUI.Wizard.IActivePage`1.LeavePage"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IActivePage`1.LeavePage">
            <summary>
            This must be called when <see cref="P:TwoLayeredGUI.Wizard.IActivePage`1.Page"/> is about to be left.
            </summary>
            <returns>Indicates whether the page can be left right away.</returns>
            <seealso cref="M:TwoLayeredGUI.Wizard.IActivePage`1.ShowPage"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IActivePage`1.Gui">
            <summary>
            Retrieves the generated graphical user interface that represents the page.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IActivePage`1.Page">
            <summary>
            Provides access to the page definition.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IInternalWizardController">
            <summary>
            Provides the means to control a wizard user interface.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IInternalWizardController.UpdateButtonStates">
            <summary>
            Forces the wizard interface to refresh the states of the control buttons.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IInternalWizardController.NextPage">
            <summary>
            Proceeds to the next page in the current wizard.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a following page.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IInternalWizardController.PreviousPage">
            <summary>
            Returns to the previous page in the current wizard.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a previous page.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IInternalWizardController.CompleteWizard">
            <summary>
            Finishes the current wizard with a positive result.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IInternalWizardController.CancelWizard">
            <summary>
            Finishes the current wizard as if it had been aborted.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IInternalWizardController.LeavePageIfRequested">
            <summary>
            Resumes the process of leaving the page, if leaving the page was interrupted before.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IInternalWizardController.AllowBack">
            <summary>
            Gets or sets a value that determines whether the user can switch to the previous wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the previous wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no previous wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IInternalWizardController.AllowNext">
            <summary>
            Gets or sets a value that determines whether the user can switch to the next wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the next wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no next wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IInternalWizardController.AllowCancel">
            <summary>
            Gets or sets a value that determines whether the user can abort the wizard at this page.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IInternalWizardController.AllowFinish">
            <summary>
            Gets or sets a value that determines whether the user can signal to complete the editing process performed in the wizard.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IInternalWizardController.PageSettingsValid">
            <summary>
            Indicates whether the settings on the current wizard page are valid.
            </summary>
            <value>
            <para>Gets or sets a value that determines whether the settings on the current wizard page validated successfully.
              If this is <see langword="false"/>, the user cannot switch to the next wizard page.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IndexedSettings`2">
            <summary>
            Stores a settings object along with an index.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="TSettings">The settings type.</typeparam>
            <remarks>
            <para>This is a helper type to pass settings objects to wizards that are elements of a list.
              The wizard needs to receive a handle to the list as well as the index in the list.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IndexedSettings`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="index">The index.</param>
            <param name="settings">The settings object.</param>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.IndexedSettings`2.index">
            <summary>
            The index.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.IndexedSettings`2.Index"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.IndexedSettings`2.settings">
            <summary>
            The settings object.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.IndexedSettings`2.Settings"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IndexedSettings`2.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IndexedSettings`2.Index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IndexedSettings`2.Settings">
            <summary>
            The settings object.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IWizardController`1">
            <summary>
            Provides the means to control a wizard user interface.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardController`1.ValidatePageSettings">
            <summary>
            Forces a revalidation of all settings on the current wizard page to determine whether they are valid.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardController`1.UpdateButtonStates">
            <summary>
            Forces the wizard interface to refresh the states of the control buttons.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardController`1.NextPage">
            <summary>
            Proceeds to the next page in the current wizard.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a following page.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardController`1.PreviousPage">
            <summary>
            Returns to the previous page in the current wizard.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a previous page.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardController`1.CompleteWizard">
            <summary>
            Finishes the current wizard with a positive result.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardController`1.CancelWizard">
            <summary>
            Finishes the current wizard as if it had been aborted.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardController`1.LeavePageIfRequested">
            <summary>
            Resumes the process of leaving the page, if leaving the page was interrupted before.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowBack">
            <summary>
            Gets or sets a value that determines whether the user can switch to the previous wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the previous wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no previous wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowNext">
            <summary>
            Gets or sets a value that determines whether the user can switch to the next wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the next wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no next wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowCancel">
            <summary>
            Gets or sets a value that determines whether the user can abort the wizard at this page.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowFinish">
            <summary>
            Gets or sets a value that determines whether the user can signal to complete the editing process performed in the wizard.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardController`1.Wizard">
            <summary>
            The wizard being executed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardController`1.Page">
            <summary>
            The current wizard page.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardController`1.Settings">
            <summary>
            The settings to edit in the wizard.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.IWizardController`1.PageShown">
            <summary>
            This event is fired right when <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.Page"/> is displayed.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.IWizardController`1.LeavingPage">
            <summary>
            This event is fired right before <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.Page"/> is left.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IWizardDialog`2">
            <summary>
            A common interface for wizard dialog classes.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IWizardDisplay`2">
            <summary>
            Represents a display control for a wizard user interface.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IWizardDisplayButtons">
            <summary>
            An interface to the button configuration of a wizard display control.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardDisplayButtons.BackButton">
            <summary>
            The definition of the <i>Back</i> button.
            </summary>
            <value>
            <para>Gets or sets the definition of the <i>Back</i> button.
              If this property is <see langword="null"/>, <see cref="P:TwoLayeredGUI.ButtonDef.PreviousButton"/> will be used instead.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardDisplayButtons.NextButton">
            <summary>
            The definition of the <i>Next</i> button.
            </summary>
            <value>
            <para>Gets or sets the definition of the <i>Next</i> button.
              If this property is <see langword="null"/>, <see cref="P:TwoLayeredGUI.ButtonDef.NextButton"/> will be used instead.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardDisplayButtons.CancelButton">
            <summary>
            The definition of the <i>Cancel</i> button.
            </summary>
            <value>
            <para>Gets or sets the definition of the <i>Cancel</i> button.
              If this property is <see langword="null"/>, <see cref="P:TwoLayeredGUI.ButtonDef.CancelButton"/> will be used instead.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardDisplayButtons.FinishButton">
            <summary>
            The definition of the <i>Finish</i> button.
            </summary>
            <value>
            <para>Gets or sets the definition of the <i>Finish</i> button.
              If this property is <see langword="null"/>, <see cref="P:TwoLayeredGUI.ButtonDef.FinishButton"/> will be used instead.</para>
            </value>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardDisplay`2.LaunchWizard(TwoLayeredGUI.Wizard.IRunnableWizard{`0},`0,TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory{`1})">
            <summary>
            Displays a wizard.
            </summary>
            <param name="wizard">The wizard or <see langword="null"/> if nothing should be displayed.</param>
            <param name="settings">The settings object edited in the wizard.</param>
            <param name="factoryDirectory">An object that can retrieve a GUI factory for a wizard page definition.</param>
            <exception cref="T:System.InvalidOperationException">Another wizard is being displayed which cannot be stopped immediately.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="wizard"/> is not <see langword="null"/> while <paramref name="settings"/> or <paramref name="factoryDirectory"/> is.</exception>
            <remarks>
            <para>This method causes the first page of <paramref name="wizard"/> to be displayed in the control.
              Users can then navigate through the wizard.</para>
            <para>If <paramref name="wizard"/> equals <see langword="null"/>, the effect of the method will match that of <see cref="M:TwoLayeredGUI.Wizard.IWizardDisplay`2.ClearWizard"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardDisplay`2.ClearWizard">
            <summary>
            Displays no wizard.
            </summary>
            <returns>Indicates whether the wizard was closed immediately.</returns>
            <remarks>
            <para>This method forces the display control to abort any open wizard and display nothing.
              It is possible that this will not take effect immediately for some wizard pages might not allow to be hidden at any time.
              In that case, the operation will be executed as soon as possible.</para>
            <para>This method acts as if the wizard had been aborted.
              That is, in cases where the result of the wizard is evaluated, the wizard display will return a negative result.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.Wizard.IWizardDisplay`2.CanClearWizard"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardDisplay`2.CanClearWizard">
            <summary>
            Indicates whether the wizard can be cleared at the current time.
            </summary>
            <seealso cref="M:TwoLayeredGUI.Wizard.IWizardDisplay`2.ClearWizard"/>
            <seealso cref="E:TwoLayeredGUI.Wizard.IWizardDisplay`2.CanClearWizardChanged"/>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.IWizardDisplay`2.CanClearWizardChanged">
            <summary>
            This event is fired when the value of the <see cref="P:TwoLayeredGUI.Wizard.IWizardDisplay`2.CanClearWizard"/> property has changed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.IWizardDisplay`2.CanClearWizard"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IWizardDialog`2.Title">
            <summary>
            Gets or sets the title of the wizard dialog.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IWizardDialogProvider">
            <summary>
            An interface for objects that can display a wizard dialog.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardDialogProvider.LaunchWizard``1(TwoLayeredGUI.Wizard.WizardDialogSettings,TwoLayeredGUI.Wizard.IRunnableWizard{``0},``0)">
            <summary>
            Displays a wizard dialog.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <param name="dialogSettings">The settings for the wizard dialog box.</param>
            <param name="wizard">The wizard or <see langword="null"/> if nothing should be displayed.</param>
            <param name="settings">The settings object edited in the wizard.</param>
            <returns>Indicates whether the user opted to complete the wizard.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <remarks>
            <para>This method causes the first page of <paramref name="wizard"/> to be displayed in a dialog box.
              Users can then navigate through the wizard.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IWizardGuiFactory`2">
            <summary>
            An interface for objects that create and release GUI representations of wizard pages.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardGuiFactory`2.CreatePage(TwoLayeredGUI.Wizard.IWizardController{`0},`1)">
            <summary>
            Creates the graphical user interface for a wizard page.
            </summary>
            <param name="controller">An object that allows to control the wizard.</param>
            <param name="parent">The intended parent element of the page contents.</param>
            <returns>The newly created graphical user interface.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="controller"/> contains an unsupported page type.</exception>
            <remarks>
            <para>This method generates a graphical representation of the wizard page referenced in <paramref name="controller"/>.
              The newly created page GUI is returned from the method.</para>
            <para>The <paramref name="parent"/> argument contains a widget that will serve as the container for the created GUI.
              This parent element will usually be empty and can be used as a size reference, as it is already scaled correctly for the (initial) size of the wizard page.
              As such, the parent element does not include any padding or other decorative spacing.
              The whole client area of the parent element will be used for the page contents.
              It is allowed, though not required, to add the page GUI as a child to the parent element.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IWizardGuiFactory`2.FreePage(TwoLayeredGUI.Wizard.IWizardController{`0},`1)">
            <summary>
            Releases any resources occupied by the graphical user interface for a wizard page.
            </summary>
            <param name="controller">An object that allows to control the wizard.</param>
            <param name="gui">The user interface that was returned by <see cref="M:TwoLayeredGUI.Wizard.IWizardGuiFactory`2.CreatePage(TwoLayeredGUI.Wizard.IWizardController{`0},`1)"/> when invoked with the <paramref name="controller"/> object for the current <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.Page">page</see>.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.LeavingPageReason">
            <summary>
            Indicates a reason why a wizard page has been left.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.LeavingPageReason.None">
            <summary>
            The wizard page was not left.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.LeavingPageReason.SwitchedForward">
            <summary>
            The wizard was switched to the next page.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.LeavingPageReason.SwitchedBack">
            <summary>
            The wizard was switched to the previous page.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.LeavingPageReason.Canceled">
            <summary>
            The wizard display was canceled.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.LeavingPageReason.Completed">
            <summary>
            The wizard was successfully completed.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.LeavingPageReason.Pending">
            <summary>
            The wizard is just about to leave the page.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.NamespaceDoc">
            <summary>
            This namespaces contains a framework for wizard user interfaces.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.IRunnableWizard`1">
            <summary>
            An executable wizard.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IRunnableWizard`1.RunPage``1(TwoLayeredGUI.Wizard.IInternalWizardController,System.Int32,`0,TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory{``0},``0)">
            <summary>
            Creates the GUI representation for a wizard page.
            </summary>
            <param name="controller">An object that allows to control the wizard.</param>
            <param name="index">The index of the wizard page.</param>
            <param name="settings">The object that stores the settings to edit in the wizard.</param>
            <param name="factoryDirectory"></param>
            <param name="parent">The intended parent element for the page contents.</param>
            <returns>An object that allows to retrieve and control the GUI representation as well as some other information about the page.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/>, <paramref name="settings"/>, <paramref name="factoryDirectory"/> or <paramref name="parent"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.IRunnableWizard`1.PageCount"/>.</exception>
            <remarks>
            <para>This method creates a displayable representation of the page and returns an object that allows to retrieve and control that object as well as retrieve some additional information about the page.
              Once the graphical representation of the page is no longer needed, the returned object should be disposed of to free any occupied resources.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IRunnableWizard`1.GetPage(System.Int32)">
            <summary>
            Retrieves a wizard page at a specified position in the list of pages.
            </summary>
            <param name="index">The position of the page in the list of wizard pages.</param>
            <returns>The page at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.IRunnableWizard`1.PageCount"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IRunnableWizard`1.GetSubWizard(System.Int32)">
            <summary>
            Retrieves a sub-wizard at a specified position in the list of sub-wizards.
            </summary>
            <param name="index">The index of the sub-wizard.</param>
            <returns>The sub-wizard.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.IRunnableWizard`1.SubWizardCount"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.IRunnableWizard`1.IsWizard``1(TwoLayeredGUI.Wizard.IRunnableWizard{``0})">
            <summary>
            Checks whether the wizard is or contains a wizard that matches the given signature.
            </summary>
            <param name="wizard">The wizard to find.</param>
            <returns>A value that indicates whether this object matches <paramref name="wizard"/>.</returns>
            <typeparam name="TSpecialSettings">The type that stores the settings to edit in <paramref name="wizard"/>.</typeparam>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IRunnableWizard`1.PageCount">
            <summary>
            The number of pages in the wizard.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.IRunnableWizard`1.SubWizardCount">
            <summary>
            The number of sub-wizards that are sequentially run after the pages in the wizard have been displayed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.ProgressPage`1">
            <summary>
            A page that displays the current progress of a longer computation.
            </summary>
            <typeparam name="TSettings">The type that stores the settings that are processed while the page is displayed.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ProgressPage`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ProgressPage`1.#ctor(System.Action{TwoLayeredGUI.IProgressIndicatorController,`0})">
            <summary>
            Initializes a new instance with a method that performs the time-consuming operation.
            </summary>
            <param name="doWorkAction">The method that executes the time-consuming operation for which progress indicators are displayed.</param>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ProgressPage`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance with a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ProgressPage`1.#ctor(System.String,System.String,System.Action{TwoLayeredGUI.IProgressIndicatorController,`0})">
            <summary>
            Initializes a new instance with a method that performs the time-consuming operation and with a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="doWorkAction">The method that executes the time-consuming operation for which progress indicators are displayed.</param>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ProgressPage`1.doWorkAction">
            <summary>
            This method is invoked when the page is displayed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.DoWorkAction"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ProgressPage`1.DoWork(TwoLayeredGUI.IProgressIndicatorController,`0)">
            <summary>
            Launches the time-consuming operation whose progress is displayed on the page.
            </summary>
            <param name="settings">The object being edited in the wizard.</param>
            <param name="progressController">An object that provides access to the progress indicators.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <remarks>
            <para>This method will be called when the page is displayed.
              It should be used to perform the processing operation for which progress indicators are displayed on the page.
              The <paramref name="progressController"/> object can be used to update the displayed progress.
              Where overriding the method is not desired, the <see cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.DoWorkAction"/> delegate may be used.</para>
            <para>Note that this method may be called from a background worker thread, so the user interface keeps responsive during the time-consuming operation.
              If so, the <see cref="T:TwoLayeredGUI.IProgressIndicatorController"/> implementation supplied in the first argument will be thread-safe.
              Thread-safety in the <typeparamref name="TSettings"/> object, however, has to be ensured by the implementor of that class.</para>
            </remarks>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.DoWorkAction"/>
            <seealso cref="M:TwoLayeredGUI.Wizard.ProgressPage`1.CompleteWork(TwoLayeredGUI.Wizard.IWizardController{`0},System.Boolean)"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ProgressPage`1.CompleteWork(TwoLayeredGUI.Wizard.IWizardController{`0},System.Boolean)">
            <summary>
            This method is called when the time-consuming process has finished.
            </summary>
            <param name="controller">The wizard controller.</param>
            <param name="canceled">Indicates whether the operation has been canceled.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method is called when the time-consuming operation launched by <see cref="M:TwoLayeredGUI.Wizard.ProgressPage`1.DoWork(TwoLayeredGUI.IProgressIndicatorController,`0)"/> has terminated.
              The default behavior is to set the following properties of the <paramref name="controller"/> object to the indicated values:</para>
            <list type="table">
              <listheader>
                <term>Property</term>
                <description>Value</description>
              </listheader>
              <item>
                <term><see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowBack"/></term>
                <description><see langword="false"/></description>
              </item>
              <item>
                <term><see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowNext"/></term>
                <description>The negated value of <paramref name="canceled"/>.</description>
              </item>
            </list>
            <para>These default values are set under the assumption that the progress page was shown during an irreversible time-consuming process which might be canceled.
              Once completed, going back is not an option because the process is assumed to be irreversible, hence <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowBack"/> is set to <see langword="false"/>.
              Only if the process was completed successfully, proceeding to the next wizard page can be allowed, therefore the new value of the <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.AllowNext"/> property depends on the value of the <paramref name="canceled"/> argument.</para>
            <para>This method will invoke the <see cref="E:TwoLayeredGUI.Wizard.ProgressPage`1.WorkCompleted"/> event.
              It can be used to further change property values if overriding this method is not desired.</para>
            </remarks>
            <seealso cref="M:TwoLayeredGUI.Wizard.ProgressPage`1.DoWork(TwoLayeredGUI.IProgressIndicatorController,`0)"/>
            <seealso cref="E:TwoLayeredGUI.Wizard.ProgressPage`1.WorkCompleted"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ProgressPage`1.minimum">
            <summary>
            The minimum value that can be displayed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.Minimum"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ProgressPage`1.maximum">
            <summary>
            The maximum value that can be displayed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.Maximum"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ProgressPage`1.showDetails">
            <summary>
            Indicates whether the details area should be displayed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.ShowDetails"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ProgressPage`1.showProgressLabel">
            <summary>
            Indicates whether a label displaying the current progress as text should be shown next to the progress bar.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.ShowProgressLabel"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ProgressPage`1.progressFormattingFunc">
            <summary>
            The function used to format the progress indicator text.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.ProgressFormattingFunc"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ProgressPage`1.DoWorkAction">
            <summary>
            This method is invoked when the page is displayed.
            </summary>
            <value>
            <para>This method is invoked once the wizard page is displayed.
              At that point, the time-consuming operation should be launched.
              The objects passed as arguments can be used for processing and to update the progress indicators.</para>
            <para>Note that this method may be called from a background worker thread, so the user interface keeps responsive during the time-consuming operation.
              If so, the <see cref="T:TwoLayeredGUI.IProgressIndicatorController"/> implementation supplied in the first argument will be thread-safe.
              Thread-safety in the <typeparamref name="TSettings"/> object, however, has to be ensured by the implementor of that class.</para>
            </value>
            <seealso cref="M:TwoLayeredGUI.Wizard.ProgressPage`1.DoWork(TwoLayeredGUI.IProgressIndicatorController,`0)"/>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.ProgressPage`1.WorkCompleted">
            <summary>
            This event is fired when the work process has terminated, be it due to completion of the task or due to being canceled.
            </summary>
            <seealso cref="M:TwoLayeredGUI.Wizard.ProgressPage`1.CompleteWork(TwoLayeredGUI.Wizard.IWizardController{`0},System.Boolean)"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ProgressPage`1.Minimum">
            <summary>
            The minimum value that can be displayed.
            </summary>
            <value>
            <para>Gets or sets the minimum value that can be displayed by the progress indicator.
              The default value is zero.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ProgressPage`1.Maximum">
            <summary>
            The maximum value that can be displayed.
            </summary>
            <value>
            <para>Gets or sets the maximum value that can be displayed by the progress indicator.
              The default value is <c>100</c>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ProgressPage`1.ShowDetails">
            <summary>
            Indicates whether the details area should be displayed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ProgressPage`1.ShowProgressLabel">
            <summary>
            Indicates whether a label displaying the current progress as text should be shown next to the progress bar.
            </summary>
            <value>
            <para>This property determines whether a textual progress indicator is to be shown next to the progress bar.
              The format of the displayed string is determined by the <see cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.ProgressFormattingFunc"/> property.</para>
            </value>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.ProgressFormattingFunc"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ProgressPage`1.ProgressFormattingFunc">
            <summary>
            The function used to format the progress indicator text.
            </summary>
            <value>
            <para>If <see cref="P:TwoLayeredGUI.Wizard.ProgressPage`1.ShowProgressLabel"/> is <see langword="true"/>, the current progress will be displayed as a text next to the progress bar.
              This function determines how that text is formatted.</para>
            <para>The first argument of the function indicates the minimum progress, the second one the maximum progress.
              The third argument indicates the current progress.
              The return value should be a string that indicates the progress as a human-readable text.</para>
            <para>The default value of the property matches <see cref="F:TwoLayeredGUI.ProgressDialogSettings.DefaultProgressFormattingFunc"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.ProgressPageWorkCompletedEventArgs`1">
            <summary>
            Provides some information about a completed work process on a <see cref="T:TwoLayeredGUI.Wizard.ProgressPage`1"/>.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardControllerEventArgs`1">
            <summary>
            This class stores some event information related to a wizard that can be accessed via a wizard controller.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardControllerEventArgs`1.#ctor(TwoLayeredGUI.Wizard.IWizardController{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="controller">A controller object that provides access to a wizard.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardControllerEventArgs`1.controller">
            <summary>
            A controller object that provides access to a wizard.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardControllerEventArgs`1.Controller"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardControllerEventArgs`1.Controller">
            <summary>
            A controller object that provides access to a wizard.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ProgressPageWorkCompletedEventArgs`1.#ctor(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.Wizard.ProgressPage{`0},System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="controller">The controller object of the wizard.</param>
            <param name="page">The progress page that caused the event.</param>
            <param name="canceled">Indicates whether the work process was canceled.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> or <paramref name="page"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ProgressPageWorkCompletedEventArgs`1.page">
            <summary>
            The wizard page that caused the event.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPageWorkCompletedEventArgs`1.Page"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ProgressPageWorkCompletedEventArgs`1.canceled">
            <summary>
            Indicates whether the work process was canceled.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ProgressPageWorkCompletedEventArgs`1.Canceled"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ProgressPageWorkCompletedEventArgs`1.Page">
            <summary>
            The wizard page that caused the event.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ProgressPageWorkCompletedEventArgs`1.Canceled">
            <summary>
            Indicates whether the work process was canceled.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.SummaryPage`1">
            <summary>
            A wizard page that displays a greater amount of textual information.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to (partially) edit on the page.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.SummaryPage`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.SummaryPage`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance with a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.SummaryPage`1.#ctor(System.Func{TwoLayeredGUI.Wizard.IWizardController{`0},System.String})">
            <summary>
            Initializes a new instance with a function that loads the summary text to display.
            </summary>
            <param name="loadSummaryFunc">A function that loads the summary text.</param>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.SummaryPage`1.#ctor(System.String,System.String,System.Func{TwoLayeredGUI.Wizard.IWizardController{`0},System.String})">
            <summary>
            Initializes a new instance with a custom page title and description as well as a function that loads the summary text to display.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="loadSummaryFunc">A function that loads the summary text.</param>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.SummaryPage`1.loadSummaryFunc">
            <summary>
            A method that loads the summary to display from a <typeparamref name="TSettings"/> instance and returns it.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.SummaryPage`1.LoadSummaryFunc"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.SummaryPage`1.LoadSummary(TwoLayeredGUI.Wizard.IWizardController{`0})">
            <summary>
            Loads the summary to display from the settings object into the page GUI.
            </summary>
            <param name="controller">An object that provides access to the current wizard and the settings.</param>
            <returns>The summary text to display.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.SummaryPage`1.LoadSummaryFunc">
            <summary>
            A method that loads the summary to display from a <typeparamref name="TSettings"/> instance and returns it.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.TextPage`1">
            <summary>
            A wizard page that displays an informative text.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to (partially) edit on the page.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.TextPage`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="title">The headline of the page.</param>
            <param name="text">The text displayed on the page.</param>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.TextPage`1.text">
            <summary>
            The text displayed on the page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.TextPage`1.Text"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.TextPage`1.Text">
            <summary>
            The text displayed on the page.
            </summary>
            <value>
            <para>This property gets or sets the text to display on the wizard page.
              The text may include line breaks.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.TextPage`1.Kind">
            <summary>
            Indicates the wizard page kind.
            </summary>
            <value>
            <para>This property indicates the kind of the wizard page.
              There is a limited number of basic wizard page layouts, one of which is chosen depending on the value of this property.</para>
            <para>This implementation of the property returns <see cref="F:TwoLayeredGUI.Wizard.WizardPageKind.TextPage"/>.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.ValueInputPage`1">
            <summary>
            A wizard page that allows to input named values.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to (partially) edit on the page.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.#ctor(System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.InputValue})">
            <summary>
            Initializes a new instance with an enumeration of input values.
            </summary>
            <param name="values">The input value definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> or one of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.#ctor(TwoLayeredGUI.ValueInput.InputValue,TwoLayeredGUI.ValueInput.InputValue[])">
            <summary>
            Initializes a new instance with one or more input values.
            </summary>
            <param name="firstValue">The first input value definition.</param>
            <param name="moreValues">More input value definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstValue"/>, <paramref name="moreValues"/> or one of its elements are <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.#ctor(System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object}},System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IImmutableArray{System.Object}},System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.InputValue})">
            <summary>
            Initializes a new instance with an enumeration of input values and conversion delegates.
            </summary>
            <param name="loadValuesAction">A method that loads values from a <typeparamref name="TSettings"/> instance into the input panel of the wizard page.</param>
            <param name="storeValuesAction">A method that stores values found in the input panel of a wizard page in a <typeparamref name="TSettings"/> instance.</param>
            <param name="values">The input value definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> or one of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>The <paramref name="loadValuesAction"/> and the <paramref name="storeValuesAction"/> methods will be invoked by <see cref="M:TwoLayeredGUI.Wizard.ValueInputPage`1.LoadValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object})"/> and <see cref="M:TwoLayeredGUI.Wizard.ValueInputPage`1.StoreValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IImmutableArray{System.Object})"/>, respectively, unless the argument is <see langword="null"/> or the respective method has been overridden.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.#ctor(System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object}},System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IImmutableArray{System.Object}},TwoLayeredGUI.ValueInput.InputValue,TwoLayeredGUI.ValueInput.InputValue[])">
            <summary>
            Initializes a new instance with one or more input values and conversion delegates.
            </summary>
            <param name="loadValuesAction">A method that loads values from a <typeparamref name="TSettings"/> instance into the input panel of the wizard page.</param>
            <param name="storeValuesAction">A method that stores values found in the input panel of a wizard page in a <typeparamref name="TSettings"/> instance.</param>
            <param name="firstValue">The first input value definition.</param>
            <param name="moreValues">More input value definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstValue"/>, <paramref name="moreValues"/> or one of its elements are <see langword="null"/>.</exception>
            <remarks>
            <para>The <paramref name="loadValuesAction"/> and the <paramref name="storeValuesAction"/> methods will be invoked by <see cref="M:TwoLayeredGUI.Wizard.ValueInputPage`1.LoadValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object})"/> and <see cref="M:TwoLayeredGUI.Wizard.ValueInputPage`1.StoreValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IImmutableArray{System.Object})"/>, respectively, unless the argument is <see langword="null"/> or the respective method has been overridden.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.InputValue})">
            <summary>
            Initializes a new instance with an enumeration of input values and a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="values">The input value definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> or one of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.#ctor(System.String,System.String,TwoLayeredGUI.ValueInput.InputValue,TwoLayeredGUI.ValueInput.InputValue[])">
            <summary>
            Initializes a new instance with one or more input values and a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="firstValue">The first input value definition.</param>
            <param name="moreValues">More input value definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstValue"/>, <paramref name="moreValues"/> or one of its elements are <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.#ctor(System.String,System.String,System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object}},System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IImmutableArray{System.Object}},System.Collections.Generic.IEnumerable{TwoLayeredGUI.ValueInput.InputValue})">
            <summary>
            Initializes a new instance with an enumeration of input values, conversion delegates and a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="loadValuesAction">A method that loads values from a <typeparamref name="TSettings"/> instance into the input panel of the wizard page.</param>
            <param name="storeValuesAction">A method that stores values found in the input panel of a wizard page in a <typeparamref name="TSettings"/> instance.</param>
            <param name="values">The input value definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> or one of its elements is <see langword="null"/>.</exception>
            <remarks>
            <para>The <paramref name="loadValuesAction"/> and the <paramref name="storeValuesAction"/> methods will be invoked by <see cref="M:TwoLayeredGUI.Wizard.ValueInputPage`1.LoadValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object})"/> and <see cref="M:TwoLayeredGUI.Wizard.ValueInputPage`1.StoreValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IImmutableArray{System.Object})"/>, respectively, unless the argument is <see langword="null"/> or the respective method has been overridden.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.#ctor(System.String,System.String,System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object}},System.Action{TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IImmutableArray{System.Object}},TwoLayeredGUI.ValueInput.InputValue,TwoLayeredGUI.ValueInput.InputValue[])">
            <summary>
            Initializes a new instance with one or more input values, conversion delegates and a custom page title and description.
            </summary>
            <param name="title">The title of the page.</param>
            <param name="description">The description of the page.</param>
            <param name="loadValuesAction">A method that loads values from a <typeparamref name="TSettings"/> instance into the input panel of the wizard page.</param>
            <param name="storeValuesAction">A method that stores values found in the input panel of a wizard page in a <typeparamref name="TSettings"/> instance.</param>
            <param name="firstValue">The first input value definition.</param>
            <param name="moreValues">More input value definitions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstValue"/>, <paramref name="moreValues"/> or one of its elements are <see langword="null"/>.</exception>
            <remarks>
            <para>The <paramref name="loadValuesAction"/> and the <paramref name="storeValuesAction"/> methods will be invoked by <see cref="M:TwoLayeredGUI.Wizard.ValueInputPage`1.LoadValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object})"/> and <see cref="M:TwoLayeredGUI.Wizard.ValueInputPage`1.StoreValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IImmutableArray{System.Object})"/>, respectively, unless the argument is <see langword="null"/> or the respective method has been overridden.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ValueInputPage`1.values">
            <summary>
            The input value definitions.
            </summary>
            <seealso cref="F:TwoLayeredGUI.Wizard.ValueInputPage`1.values"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.LoadValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object})">
            <summary>
            Loads values from a settings object into the wizard page.
            </summary>
            <param name="controller">An object that provides access to the wizard and the settings.</param>
            <param name="values">An accessor object to the contents of the input fields on the wizard page.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <remarks>
            <para>This method loads the current values from the data object into the user interface.</para>
            <para>The first argument, <paramref name="controller"/>, provides the data object being edited in the wizard.
              It exists at least for as long as the wizard is executed.
              The second argument, <paramref name="values"/>, only exists while the wizard page is being displayed.
              It allows to retrieve or set the values currently found in the input controls on the page.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.StoreValues(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IImmutableArray{System.Object})">
            <summary>
            Stores values from the wizard page in a settings object.
            </summary>
            <param name="controller">An object that provides access to the wizard and the settings.</param>
            <param name="values">A read-only accessor object to the contents of the input fields on the wizard page.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <remarks>
            <para>This method stores the current values found in the user interface to the data object.</para>
            <para>The first argument, <paramref name="controller"/>, provides the data object being edited in the wizard.
              It exists at least for as long as the wizard is executed.
              The second argument, <paramref name="values"/>, only exists while the wizard page is being displayed.
              It allows to retrievethe values currently found in the input controls on the page.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ValueInputPage`1.topDesc">
            <summary>
            The text displayed above the options.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ValueInputPage`1.TopDesc"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.ValueInputPage`1.bottomDesc">
            <summary>
            The text displayed below the input controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ValueInputPage`1.BottomDesc"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.NotifyValueChanged(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object},System.Int32)">
            <summary>
            Notifies the object that one of the values on the wizard page has changed.
            </summary>
            <param name="controller">The current wizard controller.</param>
            <param name="values">An object that provides access to the current values on the wizard page.</param>
            <param name="index">The index of the changed value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> or <paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of items in <paramref name="values"/> does not correspond with the number of declared input fields from <see cref="P:TwoLayeredGUI.Wizard.ValueInputPage`1.Values"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in <paramref name="values"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.ValueInputPage`1.OnValueChanged(TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs{`0})">
            <summary>
            Fires the <see cref="E:TwoLayeredGUI.Wizard.ValueInputPage`1.ValueChanged"/> event.
            </summary>
            <param name="e">An object that provides some information on the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method is invoked when any of the values on the wizard page has changed.
              The default implementation fires the <see cref="E:TwoLayeredGUI.Wizard.ValueInputPage`1.ValueChanged"/> event.</para>
            </remarks>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ValueInputPage`1.Values">
            <summary>
            The input value definitions.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.ValueInputPage`1.LoadValuesActions">
            <summary>
            Methods that load values from a <typeparamref name="TSettings"/> instance into the input panel of the wizard page.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.ValueInputPage`1.StoreValuesActions">
            <summary>
            Methods that store values found in the input panel of a wizard page in a <typeparamref name="TSettings"/> instance.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ValueInputPage`1.TopDesc">
            <summary>
            The text displayed above the options.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ValueInputPage`1.BottomDesc"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.ValueInputPage`1.BottomDesc">
            <summary>
            The text displayed below the input controls.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.ValueInputPage`1.TopDesc"/>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.ValueInputPage`1.ValueChanged">
            <summary>
            This event is fired when any of the values on the wizard page has changed.
            </summary>
            <seealso cref="M:TwoLayeredGUI.Wizard.ValueInputPage`1.OnValueChanged(TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs{`0})"/>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardAdapterBase`1">
            <summary>
            A base class for the <see cref="T:TwoLayeredGUI.Wizard.WizardAdapter`2"/> type.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the surrounding wizard.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardAdapterBase`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardAdapterBase`1.SpecialSettingsType">
            <summary>
            Gets the type of the special settings of this wizard.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardChoiceEventArgs`1">
            <summary>
            An object that stores information about the choice in a wizard choice page.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardChoiceEventArgs`1.#ctor(TwoLayeredGUI.Wizard.IWizardController{`0},System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="controller">A controller object that provides access to a wizard.</param>
            <param name="choice">The index of the selected choice.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardChoiceEventArgs`1.choice">
            <summary>
            The index of the selected choice.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardChoiceEventArgs`1.Choice"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardChoiceEventArgs`1.Choice">
            <summary>
            The index of the selected choice.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardControllerCancelEventArgs`1">
            <summary>
            This class stores some event information related to a wizard that can be accessed via a wizard controller and allows for a cancellation of the event.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardControllerCancelEventArgs`1.#ctor(TwoLayeredGUI.Wizard.IWizardController{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="controller">A controller object that provides access to a wizard.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardControllerCancelEventArgs`1.cancel">
            <summary>
            Indicates whether the event should be canceled.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardControllerCancelEventArgs`1.Cancel"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardControllerCancelEventArgs`1.Cancel">
            <summary>
            Indicates whether the event should be canceled.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardDialogSettings">
            <summary>
            Stores settings of a wizard dialog.
            </summary>
            <remarks>
            <para>Instances of this class store settings of a wizard dialog.
              Do not confuse this with the settings object being edited in the wizard.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardDialogSettings.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardDialogSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="title">The title of the dialog box.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="title"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardDialogSettings.title">
            <summary>
            The title bar text of the dialog box.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardDialogSettings.Title"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardDialogSettings.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Notifies any listeners about a property that is about to change.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardDialogSettings.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Notifies any listeners about a property that has changed.
            </summary>
            <param name="e">Some additional information about the event.
              This must not be <see langword="null"/>.</param>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardDialogSettings.Assign(TwoLayeredGUI.Wizard.WizardDialogSettings)">
            <summary>
            Copies the settings from another object.
            </summary>
            <param name="other">The other object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardDialogSettings.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The copied object.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardDialogSettings.Apply``2(TwoLayeredGUI.Wizard.IWizardDialog{``0,``1})">
            <summary>
            Applies the settings to an <see cref="T:TwoLayeredGUI.Wizard.IWizardDialog`2"/> instance.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
            <param name="wizardDialog">The instance that receives the settings form the current dialog settings object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="wizardDialog"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardDialogSettings.Title">
            <summary>
            The title bar text of the dialog box.
            </summary>
            <value>
            <para>The value of this property will be displayed in the title bar of the dialog box.
              It can never be <see langword="null"/>.</para>
            </value>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardDialogSettings.PropertyChanging">
            <summary>
            This event is fired when a property is about to change.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardDialogSettings.PropertyChanged">
            <summary>
            This event is fired when a property has changed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1">
            <summary>
            Manages a list of wizard page types and respective factory types that can create graphical user interfaces for the pages.
            </summary>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.GetStoredTypesString(System.Int32)">
            <summary>
            Returns a string that contains all types names registered with the directory.
            </summary>
            <param name="indentationDepth">The depth of one indentation level.</param>
            <returns>The debug string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="indentationDepth"/> is less than zero, or the resulting string exceeds the maximum capacity.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.#ctor(TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory{`0})">
            <summary>
            Initializes a new instance with the contents of an existing instance.
            </summary>
            <param name="copyFrom">The existing instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.GetFactory``1(TwoLayeredGUI.Wizard.WizardPage{``0})">
            <summary>
            Retrieves a GUI factory for a specified wizard page.
            </summary>
            <param name="page">The wizard page.</param>
            <returns>The GUI factory.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="page"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">There is no GUI factory type stored for the given page.</exception>
            <remarks>
            <para>The resulting value is always a GUI factory for the specified wizard page.
              It might be newly created or it might have been retrieved from some kind of a cache.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.untypedFactories">
            <summary>
            The list of registered generic factory types.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.typedFactories">
            <summary>
            The list of registered type-specific factory types.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.Add(System.Type,System.Type)">
            <summary>
            Registers a factory type for a given page type.
            </summary>
            <param name="pageType">The wizard page type.</param>
            <param name="factoryType">The factory type.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pageType"/> does not inherit from <see cref="T:TwoLayeredGUI.Wizard.WizardPage`1"/>, or <paramref name="factoryType"/> is abstract, not a class, does not have a public parameterless constructor, or does not implement <see cref="T:TwoLayeredGUI.Wizard.IWizardGuiFactory`2"/> with <typeparamref name="TGui"/> as the GUI type and the same settings type as <paramref name="pageType"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.GetFactoryType``1(TwoLayeredGUI.Wizard.WizardPage{``0})">
            <summary>
            Retrieves a GUI factory type for a specified wizard page.
            </summary>
            <param name="page">The wizard page.</param>
            <returns>The GUI factory type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="page"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">There is no GUI factory type stored for the given page.</exception>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.OpenPageType">
            <summary>
            Stores a generic page type (whose settings type is open) along with an appropriate GUI factory type.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.OpenPageType.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="pageType">The page type.</param>
            <param name="factoryType">The factory type.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.OpenPageType.pageType">
            <summary>
            The page type.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.OpenPageType.PageType"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.OpenPageType.factoryType">
            <summary>
            The factory type.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.OpenPageType.FactoryType"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.OpenPageType.IsPageType(System.Type)">
            <summary>
            Checks whether this instance stores data about a specified page type.
            </summary>
            <param name="type">The page type.</param>
            <returns>A value that indicates whether this instance holds data for <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.OpenPageType.PageType">
            <summary>
            The page type.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory`1.OpenPageType.FactoryType">
            <summary>
            The factory type.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs`1">
            <summary>
            A class whose instances store information on value change events on wizard pages of type <see cref="T:TwoLayeredGUI.Wizard.ValueInputPage`1"/>.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to (partially) edit on the page.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs`1.#ctor(TwoLayeredGUI.Wizard.IWizardController{`0},TwoLayeredGUI.IArray{System.Object},System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="controller">The current wizard controller.</param>
            <param name="values">An object that provides access to the current values on the wizard page.</param>
            <param name="index">The index of the changed value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> or <paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in <paramref name="values"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs`1.controller">
            <summary>
            The current wizard controller.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs`1.Controller"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs`1.values">
            <summary>
            An object that provides access to the current values on the wizard page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs`1.Values"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs`1.Controller">
            <summary>
            The current wizard controller.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardInputValueChangedEventArgs`1.Values">
            <summary>
            An object that provides access to the current values on the wizard page.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardPageEventArgs">
            <summary>
            This class stores some information about an event related to a wizard page.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageEventArgs.#ctor(TwoLayeredGUI.Wizard.IWizardPage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="page">The wizard page.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="page"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPageEventArgs.page">
            <summary>
            The wizard page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardPageEventArgs.Page"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPageEventArgs.Page">
            <summary>
            The wizard page.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardPageGuiFactory`2">
            <summary>
            A base class for any GUI factories for wizard pages that offers some courtesy routines.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageGuiFactory`2.CreatePage(TwoLayeredGUI.Wizard.IWizardController{`0},`1)">
            <summary>
            Creates the graphical user interface for a wizard page.
            </summary>
            <param name="controller">An object that allows to control the wizard.</param>
            <param name="parent">The intended parent element of the page contents.</param>
            <returns>The newly created graphical user interface.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="controller"/> contains an unsupported page type.</exception>
            <remarks>
            <para>This method generates a graphical representation of the wizard page referenced in <paramref name="controller"/>.
              The newly created page GUI is returned from the method.</para>
            <para>The <paramref name="parent"/> argument contains a widget that will serve as the container for the created GUI.
              This parent element will usually be empty and can be used as a size reference, as it is already scaled correctly for the (initial) size of the wizard page.
              As such, the parent element does not include any padding or other decorative spacing.
              The whole client area of the parent element will be used for the page contents.
              It is allowed, though not required, to add the page GUI as a child to the parent element.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageGuiFactory`2.FreePage(TwoLayeredGUI.Wizard.IWizardController{`0},`1)">
            <summary>
            Releases any resources occupied by the graphical user interface for a wizard page.
            </summary>
            <param name="controller">An object that allows to control the wizard.</param>
            <param name="gui">The user interface that was returned by <see cref="M:TwoLayeredGUI.Wizard.WizardPageGuiFactory`2.CreatePage(TwoLayeredGUI.Wizard.IWizardController{`0},`1)"/> when invoked with the <paramref name="controller"/> object for the current <see cref="P:TwoLayeredGUI.Wizard.IWizardController`1.Page">page</see>.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageGuiFactory`2.GetPage``1(TwoLayeredGUI.Wizard.IWizardController{`0})">
            <summary>
            Retrieves a wizard page strongly-typed from a wizard controller.
            </summary>
            <typeparam name="TPage">The type of the wizard page.</typeparam>
            <param name="controller">The controller object.</param>
            <returns>The wizard.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The page found in <paramref name="controller"/> cannot be converted to <typeparamref name="TPage"/>.</exception>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardPageKind">
            <summary>
            Defines the general layout of a wizard page.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPageKind.SettingsPage">
            <summary>
            A settings page is the default layout for a wizard page.
              It displays any number of settings, combined with the page title and description.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPageKind.TextPage">
            <summary>
            A text page has a sidebar and is usually used to display textual information.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.Wizard`1">
            <summary>
            A wizard.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <remarks>
            <para>This class represents a wizard user interface.
              One such interface can be used to step by step request various kinds of input from a user and thereby assemble any amount of information.
              This information is stored in a settings object.</para>
            <para>A wizard consists of a sequence of pages and a sequence of wizards shown after the pages.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.#ctor(System.Collections.Generic.IEnumerable{TwoLayeredGUI.Wizard.WizardPage{`0}})">
            <summary>
            Initializes a new instance with wizard pages.
            </summary>
            <param name="pages">The initial set of pages.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.#ctor(TwoLayeredGUI.Wizard.WizardPage{`0},TwoLayeredGUI.Wizard.WizardPage{`0}[])">
            <summary>
            Initializes a new instance with wizard pages.
            </summary>
            <param name="firstPage">The first page of the wizard.</param>
            <param name="morePages">More wizard pages.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstPage"/>, <paramref name="morePages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance with a single text page.
            </summary>
            <param name="title">The headline of the page.</param>
            <param name="text">The text displayed on the page.</param>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance with a single text page that may be the last page.
            </summary>
            <param name="title">The headline of the page.</param>
            <param name="text">The text displayed on the page.</param>
            <param name="allowFinish">Indicates whether the wizard may be finished at the text page.</param>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.Wizard`1.pages">
            <summary>
            The list of pages in the wizard.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.Wizard`1.Pages"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.Wizard`1.nextWizards">
            <summary>
            The list of wizards that are executed after this one.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.Wizard`1.NextWizards"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.RunPage``1(TwoLayeredGUI.Wizard.IInternalWizardController,System.Int32,`0,TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory{``0},``0)">
            <summary>
            Creates the GUI representation for a wizard page.
            </summary>
            <param name="controller">An object that allows to control the wizard.</param>
            <param name="index">The index of the wizard page.</param>
            <param name="settings">The object that stores the settings to edit in the wizard.</param>
            <param name="factoryDirectory"></param>
            <param name="parent">The intended parent element for the page contents.</param>
            <returns>An object that allows to retrieve and control the GUI representation as well as some other information about the page.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/>, <paramref name="settings"/>, <paramref name="factoryDirectory"/> or <paramref name="parent"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.Wizard`1.PageCount"/>.</exception>
            <remarks>
            <para>This method creates a displayable representation of the page and returns an object that allows to retrieve and control that object as well as retrieve some additional information about the page.
              Once the graphical representation of the page is no longer needed, the returned object should be disposed of to free any occupied resources.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.GetPage(System.Int32)">
            <summary>
            Retrieves a wizard page at a specified position in the list of pages.
            </summary>
            <param name="index">The position of the page in the list of wizard pages.</param>
            <returns>The page at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.Wizard`1.PageCount"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.GetSubWizard(System.Int32)">
            <summary>
            Retrieves a sub-wizard at a specified position in the list of sub-wizards.
            </summary>
            <param name="index">The index of the sub-wizard.</param>
            <returns>The sub-wizard.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.Wizard`1.SubWizardCount"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.IsWizard``1(TwoLayeredGUI.Wizard.IRunnableWizard{``0})">
            <summary>
            Checks whether the wizard is or contains a wizard that matches the given signature.
            </summary>
            <param name="wizard">The wizard to find.</param>
            <returns>A value that indicates whether this object matches <paramref name="wizard"/>.</returns>
            <typeparam name="TSpecialSettings">The type that stores the settings to edit in <paramref name="wizard"/>.</typeparam>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.Pages">
            <summary>
            The list of pages in the wizard.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.NextWizards">
            <summary>
            The list of wizards that are executed after this one.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.PageCount">
            <summary>
            The number of pages in the wizard.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.SubWizardCount">
            <summary>
            The number of sub-wizards that are sequentially run after the pages in the wizard have been displayed.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.Wizard`1.WizardController">
            <summary>
            An implementation of the <see cref="T:TwoLayeredGUI.Wizard.IWizardController`1"/> interface.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.#ctor(TwoLayeredGUI.Wizard.IInternalWizardController,TwoLayeredGUI.Wizard.Wizard{`0},TwoLayeredGUI.Wizard.WizardPage{`0},`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="controller">An object that allows to control a wizard.</param>
            <param name="wizard">The current wizard.</param>
            <param name="page">The current wizard page.</param>
            <param name="settings">The settings object to edit in the wizard.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.Wizard`1.WizardController.controller">
            <summary>
            An object that allows to control a wizard.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.Wizard`1.WizardController.wizard">
            <summary>
            The current wizard.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.Wizard`1.WizardController.page">
            <summary>
            The current wizard page.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.Wizard`1.WizardController.settings">
            <summary>
            The settings object to edit in the wizard.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.ValidatePageSettings">
            <summary>
            Forces a revalidation of all settings on the current wizard page to determine whether they are valid.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.UpdateButtonStates">
            <summary>
            Forces the wizard interface to refresh the states of the control buttons.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.ShowPage">
            <summary>
            This method notifies the controller that the current page is being displayed.
            </summary>
            <seealso cref="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.LeavePage"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.LeavePage">
            <summary>
            This method notifies the controller that the current page is about to be left.
            </summary>
            <returns>A value that indicates whether the page can be left right away.</returns>
            <seealso cref="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.ShowPage"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.NextPage">
            <summary>
            Proceeds to the next page in the current wizard.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a following page.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.PreviousPage">
            <summary>
            Returns to the previous page in the current wizard.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a previous page.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.CompleteWizard">
            <summary>
            Finishes the current wizard with a positive result.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.CancelWizard">
            <summary>
            Finishes the current wizard as if it had been aborted.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.WizardController.LeavePageIfRequested">
            <summary>
            Resumes the process of leaving the page, if leaving the page was interrupted before.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.WizardController.Wizard">
            <summary>
            The wizard being executed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.WizardController.Page">
            <summary>
            The current wizard page.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.WizardController.Settings">
            <summary>
            The settings to edit in the wizard.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.WizardController.AllowBack">
            <summary>
            Gets or sets a value that determines whether the user can switch to the previous wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the previous wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no previous wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.WizardController.AllowNext">
            <summary>
            Gets or sets a value that determines whether the user can switch to the next wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the next wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no next wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.WizardController.AllowCancel">
            <summary>
            Gets or sets a value that determines whether the user can abort the wizard at this page.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.WizardController.AllowFinish">
            <summary>
            Gets or sets a value that determines whether the user can signal to complete the editing process performed in the wizard.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.Wizard`1.WizardController.PageShown">
            <summary>
            This event is fired right when <see cref="P:TwoLayeredGUI.Wizard.Wizard`1.WizardController.Page"/> is displayed.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.Wizard`1.WizardController.LeavingPage">
            <summary>
            This event is fired right before <see cref="P:TwoLayeredGUI.Wizard.Wizard`1.WizardController.Page"/> is left.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1">
            <summary>
            This class stores a wizard page being displayed.
            </summary>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.#ctor(TwoLayeredGUI.Wizard.Wizard{`0},TwoLayeredGUI.Wizard.WizardPage{`0},TwoLayeredGUI.Wizard.IInternalWizardController,`0,TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory{`1},`1)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="wizard">The wizard that contains the page.</param>
            <param name="page">The wizard page definition.</param>
            <param name="controller">An object that allows to control the wizard.</param>
            <param name="settings">The settings object being edited.</param>
            <param name="factoryDirectory">The directory of GUI factories that can retrieve a factory for the given page.</param>
            <param name="parent">The intended parent element for the page contents GUI.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">There is no appropriate GUI factory for <paramref name="page"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.controller">
            <summary>
            An object that allows to control the wizard.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.factory">
            <summary>
            The factory for the GUI representation.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.gui">
            <summary>
            The generated graphical user interface that represents the page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.Gui"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.ShowPage">
            <summary>
            This must be called when <see cref="P:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.Page"/> is just displayed.
            </summary>
            <seealso cref="M:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.LeavePage"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.LeavePage">
            <summary>
            This must be called when <see cref="P:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.Page"/> is about to be left.
            </summary>
            <returns>Indicates whether the page can be left right away.</returns>
            <seealso cref="M:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.ShowPage"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.Page">
            <summary>
            Provides access to the page definition.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.Wizard`1.ActivePage`1.Gui">
            <summary>
            Retrieves the generated graphical user interface that represents the page.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardAdapter`2">
            <summary>
            A bridge to add a wizard with a given settings type into a wizard with a different settings type.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the surrounding wizard.</typeparam>
            <typeparam name="TSpecialSettings">The type that stores the settings to edit in the inner wizard.</typeparam>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardAdapter`2.#ctor(TwoLayeredGUI.Wizard.IRunnableWizard{`1},System.Func{`0,`1})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="wizard">The inner wizard.</param>
            <param name="settingsFunc">The function that provides access to the <typeparamref name="TSettings"/> settings as a <typeparamref name="TSpecialSettings"/>.</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardAdapter`2.wizard">
            <summary>
            The inner wizard.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardAdapter`2.settingsFunc">
            <summary>
            The function that provides access to the <typeparamref name="TSettings"/> settings as a <typeparamref name="TSpecialSettings"/>.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardAdapter`2.RunPage``1(TwoLayeredGUI.Wizard.IInternalWizardController,System.Int32,`0,TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory{``0},``0)">
            <summary>
            Creates the GUI representation for a wizard page.
            </summary>
            <param name="controller">An object that allows to control the wizard.</param>
            <param name="index">The index of the wizard page.</param>
            <param name="settings">The object that stores the settings to edit in the wizard.</param>
            <param name="factoryDirectory"></param>
            <param name="parent">The intended parent element for the page contents.</param>
            <returns>An object that allows to retrieve and control the GUI representation as well as some other information about the page.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/>, <paramref name="settings"/>, <paramref name="factoryDirectory"/> or <paramref name="parent"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.WizardAdapter`2.PageCount"/>.</exception>
            <remarks>
            <para>This method creates a displayable representation of the page and returns an object that allows to retrieve and control that object as well as retrieve some additional information about the page.
              Once the graphical representation of the page is no longer needed, the returned object should be disposed of to free any occupied resources.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardAdapter`2.GetPage(System.Int32)">
            <summary>
            Retrieves a wizard page at a specified position in the list of pages.
            </summary>
            <param name="index">The position of the page in the list of wizard pages.</param>
            <returns>The page at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.WizardAdapter`2.PageCount"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardAdapter`2.GetSubWizard(System.Int32)">
            <summary>
            Retrieves a sub-wizard at a specified position in the list of sub-wizards.
            </summary>
            <param name="index">The index of the sub-wizard.</param>
            <returns>The sub-wizard.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.WizardAdapter`2.SubWizardCount"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardAdapter`2.IsWizard``1(TwoLayeredGUI.Wizard.IRunnableWizard{``0})">
            <summary>
            Checks whether the wizard is or contains a wizard that matches the given signature.
            </summary>
            <param name="wizard">The wizard to find.</param>
            <returns>A value that indicates whether this object matches <paramref name="wizard"/>.</returns>
            <typeparam name="TWizardSettings">The type that stores the settings to edit in <paramref name="wizard"/>.</typeparam>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardAdapter`2.PageCount">
            <summary>
            The number of pages in the wizard.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardAdapter`2.SubWizardCount">
            <summary>
            The number of sub-wizards that are sequentially run after the pages in the wizard have been displayed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardAdapter`2.SpecialSettingsType">
            <summary>
            Gets the type of the special settings of this wizard.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardList`1">
            <summary>
            A list of runnable wizards.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <remarks>
            <para>This class provides a list of <see cref="T:TwoLayeredGUI.Wizard.IRunnableWizard`1"/> instances.
              It ensures that <see langword="null"/> cannot be added as an item.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardList`1.items">
            <summary>
            The internal list of wizards.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.System#Collections#Generic#IList{TwoLayeredGUI#Wizard#IRunnableWizard{TSettings}}#IndexOf(TwoLayeredGUI.Wizard.IRunnableWizard{`0})">
            <summary>
            Retrieves the index of an item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The index of <paramref name="item"/> or a negative number if <paramref name="item"/> could not be found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.IndexOf``1(TwoLayeredGUI.Wizard.IRunnableWizard{``0})">
            <summary>
            Retrieves the index of an item in the list.
            </summary>
            <typeparam name="TSpecialSettings">The settings object type edited in the wizard to find.</typeparam>
            <param name="item">The item to find.</param>
            <returns>The index of <paramref name="item"/> or a negative number if <paramref name="item"/> could not be found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Add(TwoLayeredGUI.Wizard.IRunnableWizard{`0})">
            <summary>
            Appends an item at the end of the list.
            </summary>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Add(System.Collections.Generic.IEnumerable{TwoLayeredGUI.Wizard.WizardPage{`0}})">
            <summary>
            Appends a new wizard by specifying an enumeration of pages.
            </summary>
            <param name="pages">The pages of the new wizard.</param>
            <returns>The newly appended wizard.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Add(TwoLayeredGUI.Wizard.WizardPage{`0},TwoLayeredGUI.Wizard.WizardPage{`0}[])">
            <summary>
            Appends a new wizard by specifying pages.
            </summary>
            <param name="firstPage">The first page of the new wizard.</param>
            <param name="morePages">More pages of the new wizard.</param>
            <returns>The newly appended wizard.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstPage"/>, <paramref name="morePages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Add(System.String,System.String)">
            <summary>
            Appends a new wizard with a single text page.
            </summary>
            <param name="title">The headline of the page.</param>
            <param name="text">The text displayed on the page.</param>
            <returns>The newly appended wizard.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Add(System.String,System.String,System.Boolean)">
            <summary>
            Appends a new wizard with a single text page that can be the last page.
            </summary>
            <param name="title">The headline of the page.</param>
            <param name="text">The text displayed on the page.</param>
            <param name="allowFinish">Indicates whether the wizard can be finished at this page.</param>
            <returns>The newly appended wizard.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Add``1(System.Func{`0,``0},TwoLayeredGUI.Wizard.IRunnableWizard{``0})">
            <summary>
            Appends an item with a custom settings type at the end of the list.
            </summary>
            <typeparam name="TSpecialSettings">The settings object type edited in the wizard to add.</typeparam>
            <param name="settingsFunc">A function to convert settings of type <typeparamref name="TSettings"/> to settings of type <typeparamref name="TSpecialSettings"/>.</param>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> or <paramref name="settingsFunc"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method will actually pass <paramref name="item"/> to a new instance of the <see cref="T:TwoLayeredGUI.Wizard.WizardAdapter`2"/> class and add that instance.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Add``1(System.Func{`0,``0},System.Collections.Generic.IEnumerable{TwoLayeredGUI.Wizard.WizardPage{``0}})">
            <summary>
            Appends a new wizard with a custom settings type by specifying an enumeration of pages.
            </summary>
            <typeparam name="TSpecialSettings">The settings object type edited in the wizard to add.</typeparam>
            <param name="settingsFunc">A function to convert settings of type <typeparamref name="TSettings"/> to settings of type <typeparamref name="TSpecialSettings"/>.</param>
            <param name="pages">The pages of the new wizard.</param>
            <returns>The newly appended wizard.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settingsFunc"/>, <paramref name="pages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Add``1(System.Func{`0,``0},TwoLayeredGUI.Wizard.WizardPage{``0},TwoLayeredGUI.Wizard.WizardPage{``0}[])">
            <summary>
            Appends a new wizard with a custom settings type by specifying pages.
            </summary>
            <typeparam name="TSpecialSettings">The settings object type edited in the wizard to add.</typeparam>
            <param name="settingsFunc">A function to convert settings of type <typeparamref name="TSettings"/> to settings of type <typeparamref name="TSpecialSettings"/>.</param>
            <param name="firstPage">The first page of the new wizard.</param>
            <param name="morePages">More pages of the new wizard.</param>
            <returns>The newly appended wizard.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settingsFunc"/>, <paramref name="firstPage"/>, <paramref name="morePages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Insert(System.Int32,TwoLayeredGUI.Wizard.IRunnableWizard{`0})">
            <summary>
            Inserts an item at a specified position in the list.
            </summary>
            <param name="index">The position at which to insert the item.</param>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardList`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Insert(System.Int32,System.Collections.Generic.IEnumerable{TwoLayeredGUI.Wizard.WizardPage{`0}})">
            <summary>
            Inserts a new wizard at a specified position in the list by specifying an enumeration of pages.
            </summary>
            <param name="index">The position at which to insert the new wizard.</param>
            <param name="pages">The pages of the new wizard.</param>
            <returns>The newly appended wizard.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardList`1.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="pages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Insert(System.Int32,TwoLayeredGUI.Wizard.WizardPage{`0},TwoLayeredGUI.Wizard.WizardPage{`0}[])">
            <summary>
            Inserts a new wizard at a specified position in the list by specifying pages.
            </summary>
            <param name="index">The position at which to insert the new wizard.</param>
            <param name="firstPage">The first page of the new wizard.</param>
            <param name="morePages">More pages of the new wizard.</param>
            <returns>The newly appended wizard.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardList`1.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstPage"/>, <paramref name="morePages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a new wizard at a specified position in the list with a single text page.
            </summary>
            <param name="index">The position at which to insert the new wizard.</param>
            <param name="title">The headline of the page.</param>
            <param name="text">The text displayed on the page.</param>
            <returns>The newly appended wizard.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardList`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Insert``1(System.Int32,System.Func{`0,``0},TwoLayeredGUI.Wizard.IRunnableWizard{``0})">
            <summary>
            Inserts an item with a custom settings type at a specified position in the list.
            </summary>
            <typeparam name="TSpecialSettings">The settings object type edited in the wizard to insert.</typeparam>
            <param name="index">The position at which to insert the item.</param>
            <param name="settingsFunc">A function to convert settings of type <typeparamref name="TSettings"/> to settings of type <typeparamref name="TSpecialSettings"/>.</param>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> or <paramref name="settingsFunc"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardList`1.Count"/>.</exception>
            <remarks>
            <para>This method will actually pass <paramref name="item"/> to a new instance of the <see cref="T:TwoLayeredGUI.Wizard.WizardAdapter`2"/> class and insert that instance.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Insert``1(System.Int32,System.Func{`0,``0},System.Collections.Generic.IEnumerable{TwoLayeredGUI.Wizard.WizardPage{``0}})">
            <summary>
            Inserts a new wizard with a custom settings type at a specified position in the list by specifying an enumeration of pages.
            </summary>
            <param name="index">The position at which to insert the new wizard.</param>
            <param name="settingsFunc">A function to convert settings of type <typeparamref name="TSettings"/> to settings of type <typeparamref name="TSpecialSettings"/>.</param>
            <param name="pages">The pages of the new wizard.</param>
            <returns>The newly appended wizard.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardList`1.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="settingsFunc"/>, <paramref name="pages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Insert``1(System.Int32,System.Func{`0,``0},TwoLayeredGUI.Wizard.WizardPage{``0},TwoLayeredGUI.Wizard.WizardPage{``0}[])">
            <summary>
            Inserts a new wizard with a custom settings type at a specified position in the list by specifying pages.
            </summary>
            <param name="index">The position at which to insert the new wizard.</param>
            <param name="settingsFunc">A function to convert settings of type <typeparamref name="TSettings"/> to settings of type <typeparamref name="TSpecialSettings"/>.</param>
            <param name="firstPage">The first page of the new wizard.</param>
            <param name="morePages">More pages of the new wizard.</param>
            <returns>The newly appended wizard.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardList`1.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="settingsFunc"/>, <paramref name="firstPage"/>, <paramref name="morePages"/> or any of its elements is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.WizardList`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.System#Collections#Generic#ICollection{TwoLayeredGUI#Wizard#IRunnableWizard{TSettings}}#Contains(TwoLayeredGUI.Wizard.IRunnableWizard{`0})">
            <summary>
            Checks whether a given item is in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Contains``1(TwoLayeredGUI.Wizard.IRunnableWizard{``0})">
            <summary>
            Checks whether a given item is in the list.
            </summary>
            <typeparam name="TSpecialSettings">The settings object type edited in the wizard to find.</typeparam>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> was found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.CopyTo(TwoLayeredGUI.Wizard.IRunnableWizard{`0}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which to begin copying.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.Wizard.IRunnableWizard`1"/> cannot be cast automatically to the item type of <paramref name="array"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.System#Collections#Generic#ICollection{TwoLayeredGUI#Wizard#IRunnableWizard{TSettings}}#Remove(TwoLayeredGUI.Wizard.IRunnableWizard{`0})">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the removal was performed.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.Remove``1(TwoLayeredGUI.Wizard.IRunnableWizard{``0})">
            <summary>
            Removes an item from the list.
            </summary>
            <typeparam name="TSpecialSettings">The settings object type edited in the wizard to remove.</typeparam>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether the removal was performed.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.GetEnumerator">
            <summary>
            Returns an enumeration over all items in the list.
            </summary>
            <returns>The enumeration.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumeration over all items in the list.
            </summary>
            <returns>The enumeration.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.OnItemInserted(TwoLayeredGUI.ListChangedEventArgs)">
            <summary>
            This method triggers any events connected to the insertion of an item.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.OnItemRemoved(TwoLayeredGUI.ListChangedEventArgs)">
            <summary>
            This method triggers any events connected to the removal of an item.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardList`1.OnItemReplaced(TwoLayeredGUI.ListChangedEventArgs)">
            <summary>
            This method triggers any events connected to the substitution of an item.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardList`1.Item(System.Int32)">
            <summary>
            Gets or sets an item at a specified position in the list.
            </summary>
            <param name="index">The index of the item.</param>
            <exception cref="T:System.ArgumentNullException"><see langword="null"/> is assigned to the item.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:TwoLayeredGUI.Wizard.WizardList`1.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardList`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardList`1.System#Collections#Generic#ICollection{TwoLayeredGUI#Wizard#IRunnableWizard{TSettings}}#IsReadOnly">
            <summary>
            Indicates whether the list is read-only.
            </summary>
            <remarks>
            <para>This implementation of the property always returns <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardList`1.ItemInserted">
            <summary>
            This event is fired when an item has been inserted.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardList`1.ItemRemoved">
            <summary>
            This event is fired when an item has been deleted.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardList`1.ItemReplaced">
            <summary>
            This event is fired when an item has been replaced without modifying the total length of the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardPageList`1">
            <summary>
            A list of pages for a wizard user interface.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardPageList`1.items">
            <summary>
            The internal list of items.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.IndexOf(TwoLayeredGUI.Wizard.WizardPage{`0})">
            <summary>
            Retrieves the position of a given item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The position of the item or a negative value if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.Add(TwoLayeredGUI.Wizard.WizardPage{`0})">
            <summary>
            Adds a page to the end of the list.
            </summary>
            <param name="item">The new page.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.Insert(System.Int32,TwoLayeredGUI.Wizard.WizardPage{`0})">
            <summary>
            Inserts a page at a specified position in the list.
            </summary>
            <param name="index">The intended position of the item.</param>
            <param name="item">The new page.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardPageList`1.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified position.
            </summary>
            <param name="index">The position of the item to delete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or equal to or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardPageList`1.Count"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.Contains(TwoLayeredGUI.Wizard.WizardPage{`0})">
            <summary>
            Checks whether a specified item is in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>A value that indicates whether <paramref name="item"/> is in the list.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.CopyTo(TwoLayeredGUI.Wizard.WizardPage{`0}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional destination array with zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which to begin copying.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:TwoLayeredGUI.Wizard.IRunnableWizard`1"/> cannot be cast automatically to the item type of <paramref name="array"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.Remove(TwoLayeredGUI.Wizard.WizardPage{`0})">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>A value that indicates whether <paramref name="item"/> was successfully removed.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.GetEnumerator">
            <summary>
            Returns an enumerator over all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over all items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.OnItemInserted(TwoLayeredGUI.ListChangedEventArgs)">
            <summary>
            This method triggers any events connected to the insertion of an item.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.OnItemRemoved(TwoLayeredGUI.ListChangedEventArgs)">
            <summary>
            This method triggers any events connected to the removal of an item.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardPageList`1.OnItemReplaced(TwoLayeredGUI.ListChangedEventArgs)">
            <summary>
            This method triggers any events connected to the substitution of an item.
            </summary>
            <param name="e">Some additional information about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPageList`1.Item(System.Int32)">
            <summary>
            Gets or sets an item at a specified position.
            </summary>
            <param name="index">The position of the item.</param>
            <exception cref="T:System.ArgumentNullException"><see langword="null"/> is assigned.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or equal to or greater than <see cref="P:TwoLayeredGUI.Wizard.WizardPageList`1.Count"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPageList`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardPageList`1.System#Collections#Generic#ICollection{TwoLayeredGUI#Wizard#WizardPage{TSettings}}#IsReadOnly">
            <summary>
            Indicates whether the list is read-only.
            </summary>
            <remarks>
            <para>This implementation of the property always returns <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardPageList`1.ItemInserted">
            <summary>
            This event is fired when an item has been inserted.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardPageList`1.ItemRemoved">
            <summary>
            This event is fired when an item has been deleted.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardPageList`1.ItemReplaced">
            <summary>
            This event is fired when an item has been replaced without modifying the total length of the list.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardRunner`2">
            <summary>
            This object provides the execution logic of a wizard user interface.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
            <remarks>
            <para>This class provides the central execution logic for a wizard user interface.
              Any graphical (or possibly other) frontends to a wizard interface are strongly recommended to internally make use of a <see cref="T:TwoLayeredGUI.Wizard.WizardRunner`2"/> instance.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.#ctor(System.Func{TwoLayeredGUI.Wizard.IWizardPage,`1})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="pageParentFactory">A function that provides the parent pane for a wizard page.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pageParentFactory"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This constructor initializes a new <see cref="T:TwoLayeredGUI.Wizard.WizardRunner`2"/> instance.</para>
            <para>The <paramref name="pageParentFactory"/> parameter expects a function that returns a control.
              This control will be passed to the <see cref="M:TwoLayeredGUI.Wizard.IWizardGuiFactory`2.CreatePage(TwoLayeredGUI.Wizard.IWizardController{`0},`1)"/> method of a <see cref="T:TwoLayeredGUI.Wizard.IWizardGuiFactory`2"/> as the future parent control of the wizard page contents.
              The <see cref="E:TwoLayeredGUI.Wizard.WizardRunner`2.PageLeft"/> event may be used to free any resources allocated by this function.</para>
            <para>Note that <paramref name="pageParentFactory"/> might be called several times for a single page.
              It is not required that the function return another instance every time, but if it does, all of these instances will have to be freed when <see cref="E:TwoLayeredGUI.Wizard.WizardRunner`2.PageLeft"/> is fired the next time, if necessary.</para>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.controller">
            <summary>
            The wizard controller for this instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.pageParentFactory">
            <summary>
            A function that creates the parent pane for a wizard page.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.LaunchWizard(TwoLayeredGUI.Wizard.IRunnableWizard{`0},`0,TwoLayeredGUI.Wizard.WizardGuiFactoryDirectory{`1})">
            <summary>
            Displays a wizard.
            </summary>
            <param name="wizard">The wizard or <see langword="null"/> if nothing should be displayed.</param>
            <param name="settings">The settings to edit in the wizard.</param>
            <param name="factoryDirectory">An object that can retrieve a GUI factory for a wizard page definition.</param>
            <exception cref="T:System.InvalidOperationException">Another wizard is being displayed which cannot be stopped immediately.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="wizard"/> is not <see langword="null"/> while <paramref name="settings"/> or <paramref name="factoryDirectory"/> is.</exception>
            <remarks>
            <para>This method causes the first page of <paramref name="wizard"/> to be displayed in the control.
              Users can then navigate through the wizard.</para>
            <para>If <paramref name="wizard"/> equals <see langword="null"/>, the effect of the method will match that of <see cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.CancelWizard"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.EnterPage">
            <summary>
            Initializes the currently active page.
            </summary>
            <seealso cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.LeavePage(TwoLayeredGUI.Wizard.LeavingPageReason)"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.leavingPageReason">
            <summary>
            Indicates the reason why the current wizard page is being left.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.LeavePageIfRequested">
            <summary>
            Leaves the current wizard page if that was previously requested.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.LeavePage(TwoLayeredGUI.Wizard.LeavingPageReason)">
            <summary>
            Finalizes the currently active page.
            </summary>
            <param name="reason">Indicates the reason why the page is left.</param>
            <returns>Indicates whether the page was left.
              If there currently is no wizard displayed, the method will return <see langword="true"/> nonetheless.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="reason"/> is not a valid <see cref="T:TwoLayeredGUI.Wizard.LeavingPageReason"/> constant.</exception>
            <seealso cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.EnterPage"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.CompleteWizard">
            <summary>
            Finishes the current wizard with a positive result.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.CancelWizard">
            <summary>
            Finishes the current wizard as if it had been aborted.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.FinalizeState">
            <summary>
            Clears the <see cref="F:TwoLayeredGUI.Wizard.WizardRunner`2.wizardState"/> stack.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.FindPage(System.Boolean)">
            <summary>
            Finds the first valid page based on the current state.
            </summary>
            <param name="forward">Indicates whether the move should be performed forward.</param>
            <returns>A value that indicates whether a valid page could be found.</returns>
            <exception cref="T:System.InvalidOperationException">There is no wizard being displayed.</exception>
            <remarks>
            <para>This method updates the execution state of the current wizard to point to a valid page.
              If the state already indicates a valid page, it will not be changed.
              Otherwise, the state information will be modified to indicate the nearest page in the specified direction (forward or backword through the wizard).</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.HasNextPage">
            <summary>
            Checks whether there is any other wizard page after the current one.
            </summary>
            <returns>A value that indicates whether there is another wizard page.</returns>
            <exception cref="T:System.InvalidOperationException">There is no wizard being executed.</exception>
            <seealso cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.HasPreviousPage"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.HasPreviousPage">
            <summary>
            Checks whether there is any other wizard page in front of the current one.
            </summary>
            <returns>A value that indicates whether there is a preceding wizard page.</returns>
            <exception cref="T:System.InvalidOperationException">There is no wizard being executed.</exception>
            <seealso cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.HasNextPage"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.wizardState">
            <summary>
            The stack of currently executed wizards.
            </summary>
            <remarks>
            <para>This stack contains the execution states of all active nested wizards.
              The following conditions are always true (at the latest after calling <see cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.FindPage(System.Boolean)"/>, which enforces these rules):</para>
            <list type="bullet">
              <item>The topmost item indicates a wizard page as active.</item>
              <item>All other items indicate any of their respective sub-wizards as active.</item>
              <item>If the stack is empty, the wizard has been completely executed.</item>
            </list>
            </remarks>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.currentPage">
            <summary>
            The GUI representation of the currently active wizard page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.CurrentPage"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.currentSettings">
            <summary>
            The settings being edited.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.factoryDirectory">
            <summary>
            The directory of GUI factories.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.previousBackEnabled">
            <summary>
            The current value of <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.BackEnabled"/> since the last call to <see cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.DoUpdateButtonStates"/>, or <see langword="null"/> if that method was not called yet.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.previousNextEnabled">
            <summary>
            The current value of <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.NextEnabled"/> since the last call to <see cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.DoUpdateButtonStates"/>, or <see langword="null"/> if that method was not called yet.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.previousCancelEnabled">
            <summary>
            The current value of <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.CancelEnabled"/> since the last call to <see cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.DoUpdateButtonStates"/>, or <see langword="null"/> if that method was not called yet.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.previousFinishEnabled">
            <summary>
            The current value of <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.FinishEnabled"/> since the last call to <see cref="M:TwoLayeredGUI.Wizard.WizardRunner`2.DoUpdateButtonStates"/>, or <see langword="null"/> if that method was not called yet.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.DoUpdateButtonStates">
            <summary>
            Updates the states of the wizard navigation buttons.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.allowBack">
            <summary>
            Indicates whether the user can switch to the previous wizard page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowBack"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.allowNext">
            <summary>
            Indicates whether the user can switch to the next wizard page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowNext"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.allowCancel">
            <summary>
            Indicates whether the user may abort the wizard at the current page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowCancel"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.allowFinish">
            <summary>
            Indicates whether the user may complete the wizard at the current page.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowFinish"/>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.pageSettingsValid">
            <summary>
            Indicates whether the settings on the current wizard page are valid.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.PageSettingsValid"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.NextPage">
            <summary>
            Proceeds to the next page in the current wizard.
            </summary>
            <returns>Indicates whether the page was changed.
              Under certain circumstances, a wizard page might not allow to be left immediately.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a following page.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.PreviousPage">
            <summary>
            Returns to the previous page in the current wizard.
            </summary>
            <returns>Indicates whether the page was changed.
              Under certain circumstances, a wizard page might not allow to be left immediately.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a previous page.</exception>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.IsLeavingPage">
            <summary>
            Indicates whether the current wizard page is currently being left.
            </summary>
            <value>
            <para>This property indicates whether a request to leave the current wizard has been scheduled, but processing of that request has not yet started.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.IsWizardActive">
            <summary>
            Indicates whether there is a wizard being executed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.CurrentPageGui">
            <summary>
            The GUI representation of the currently active wizard page.
            </summary>
            <value>
            <para>This property returns the GUI representation of the currently active wizard page.
              If there is no active wizard page, it returns the default value of type <typeparamref name="TGui"/>.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.CurrentPage">
            <summary>
            The currently active wizard page.
            </summary>
            <value>
            <para>This property returns the currently active wizard page.
              If there is no active wizard page, it returns <see langword="null"/>.</para>
            </value>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardRunner`2.EnteringPage">
            <summary>
            This event is fired right before a new wizard page is displayed.
            </summary>
            <remarks>
            <para>This event is fired right before entering a wizard page.</para>
            </remarks>
            <seealso cref="E:TwoLayeredGUI.Wizard.WizardRunner`2.PageChanged"/>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardRunner`2.PageChanged">
            <summary>
            This event is fired when a new wizard page is shown.
            </summary>
            <remarks>
            <para>This event is fired right after entering a wizard page.</para>
            </remarks>
            <seealso cref="E:TwoLayeredGUI.Wizard.WizardRunner`2.EnteringPage"/>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardRunner`2.LeavingPage">
            <summary>
            This event is fired when a wizard page is being closed.
            </summary>
            <remarks>
            <para>When this event is fired, the wizard page is still being shown.
              For any actions that need to be performed after the page has been hidden, use the <see cref="E:TwoLayeredGUI.Wizard.WizardRunner`2.PageLeft"/> event.</para>
            </remarks>
            <seealso cref="E:TwoLayeredGUI.Wizard.WizardRunner`2.PageLeft"/>
            <seealso cref="E:TwoLayeredGUI.Wizard.WizardRunner`2.PageChanged"/>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardRunner`2.PageLeft">
            <summary>
            This event is fired when a wizard page has been closed.
            </summary>
            <remarks>
            <para>When this event is fired, the wizard page has already been hidden.
              It is possible that the page GUI is not allocated any more.</para>
            </remarks>
            <seealso cref="E:TwoLayeredGUI.Wizard.WizardRunner`2.LeavingPage"/>
            <seealso cref="E:TwoLayeredGUI.Wizard.WizardRunner`2.PageChanged"/>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardRunner`2.WizardLaunched">
            <summary>
            This event is fired when a top-level wizard is launched.
            </summary>
            <remarks>
            <para>This event is only fired for top-level wizards.
              The launch of nested sub-wizards will not cause any event handlers to be invoked.</para>
            </remarks>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardRunner`2.WizardFinished">
            <summary>
            This event is fired when a wizard has terminated.
            </summary>
            <remarks>
            <para>This event is only fired for top-level wizards.
              The completion of nested sub-wizards will not cause any event handlers to be invoked.</para>
            </remarks>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardRunner`2.WizardCanceled">
            <summary>
            This event is fired when a wizard was canceled before its successful termination.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardRunner`2.WizardCompleted">
            <summary>
            This event is fired when a wizard has successfully terminated.
            </summary>
        </member>
        <member name="E:TwoLayeredGUI.Wizard.WizardRunner`2.UpdateButtonStates">
            <summary>
            This event is fired when the states of the navigation buttons of the wizard must be updated.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.BackEnabled">
            <summary>
            Indicates whether the <i>Back</i> button is enabled.
            </summary>
            <value>
            <para>This property indicates whether the user can actually switch to the previous page.
              This is influenced both by the fact whether there is a previous page and by the value of the <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowBack"/> property.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.NextEnabled">
            <summary>
            Indicates whether the <i>Next</i> button is enabled.
            </summary>
            <value>
            <para>This property indicates whether the user can actually switch to the next page.
              This is influenced both by the fact whether there is a next page and by the value of the <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowNext"/> property.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.CancelEnabled">
            <summary>
            Inidcates whether the <i>Cancel</i> button is enabled.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.FinishEnabled">
            <summary>
            Indicates whether the <i>Finish</i> button is enabled.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowBack">
            <summary>
            Gets or sets whether the user can switch to the previous wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the previous wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no previous wizard page.
              Hence, the values of this property and of <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.BackEnabled"/> do not always match.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowNext">
            <summary>
            Gets or sets whether the user can switch to the next wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the next wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no next wizard page.
              Hence, the values of this property and of <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.NextEnabled"/> do not always match.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowCancel">
            <summary>
            Gets or sets a value that determines whether the user may abort the wizard at the current page.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.AllowFinish">
            <summary>
            Gets or sets a value that determines whether the user can signal to complete the editing process performed in the wizard.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.PageSettingsValid">
            <summary>
            Indicates whether the settings on the current wizard page are valid.
            </summary>
            <value>
            <para>Gets or sets a value that determines whether the settings on the current wizard page validated successfully.
              If this is <see langword="false"/>, the user cannot switch to the next wizard page.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState">
            <summary>
            Stores the state of one wizard.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.#ctor(TwoLayeredGUI.Wizard.IRunnableWizard{`0},System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="wizard">The wizard this instance refers to.</param>
            <param name="startAtBeginning">Indicates where the wizard should be started.
              If <see langword="true"/>, the wizard will start at the beginning, otherwise it will start at its end.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="wizard"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.Dispose">
            <summary>
            Frees all managed and unmanaged resources.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.wizard">
            <summary>
            The wizard whose state is stored in this instance.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.currentIndex">
            <summary>
            The page or wizard index currently displayed.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.CurrentIndex"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.IncIndex">
            <summary>
            Increases the value of the <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.CurrentIndex"/> property.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.DecIndex">
            <summary>
            Decreases the value of the <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.CurrentIndex"/> property.
            </summary>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.subWizard">
            <summary>
            Indicates whether <see cref="F:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.currentIndex"/> refers to a sub-wizard rather than a page of <see cref="F:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.wizard"/>.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.SubWizard"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.ProceedToSubWizards">
            <summary>
            Finishes iterating through the wizard pages and continues with the sub-wizards.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.SubWizard"/> is already <see langword="true"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.ReturnToPages">
            <summary>
            Finishes iterating through the sub-wizards and returns to the last wizard page.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.SubWizard"/> is already <see langword="false"/>.</exception>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.Wizard">
            <summary>
            The wizard this instance refers to.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.CurrentIndex">
            <summary>
            The page or wizard index currently displayed.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.SubWizard">
            <summary>
            Indicates whether <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.CurrentIndex"/> refers to a sub-wizard rather than a page of <see cref="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardState.Wizard"/>.
            </summary>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController">
            <summary>
            Provides access to a wizard via the <see cref="T:TwoLayeredGUI.Wizard.IInternalWizardController"/> interface.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.#ctor(TwoLayeredGUI.Wizard.WizardRunner{`0,`1})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="owner">The owner of this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.owner">
            <summary>
            The owner of this instance.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.UpdateButtonStates">
            <summary>
            Forces the wizard interface to refresh the states of the control buttons.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.NextPage">
            <summary>
            Proceeds to the next page in the current wizard.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a following page.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.PreviousPage">
            <summary>
            Returns to the previous page in the current wizard.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no active wizard, or the active wizard does not have a previous page.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.CompleteWizard">
            <summary>
            Finishes the current wizard with a positive result.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.CancelWizard">
            <summary>
            Finishes the current wizard as if it had been aborted.
            </summary>
            <returns>Indicates whether the operation was immediately executed.</returns>
            <exception cref="T:System.InvalidOperationException">There is no active wizard.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.LeavePageIfRequested">
            <summary>
            Resumes the process of leaving the page, if leaving the page was interrupted before.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.AllowBack">
            <summary>
            Gets or sets a value that determines whether the user can switch to the previous wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the previous wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no previous wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.AllowNext">
            <summary>
            Gets or sets a value that determines whether the user can switch to the next wizard page.
            </summary>
            <value>
            <para>This property controls whether the user may switch to the next wizard page.
              Even when set to <see langword="true"/>, it might not be possible if there is no next wizard page.</para>
            </value>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.AllowCancel">
            <summary>
            Gets or sets a value that determines whether the user can abort the wizard at this page.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.AllowFinish">
            <summary>
            Gets or sets a value that determines whether the user can signal to complete the editing process performed in the wizard.
            </summary>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardRunner`2.WizardController.PageSettingsValid">
            <summary>
            Indicates whether the settings on the current wizard page are valid.
            </summary>
            <value>
            <para>Gets or sets a value that determines whether the settings on the current wizard page validated successfully.
              If this is <see langword="false"/>, the user cannot switch to the next wizard page.</para>
            </value>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardUtilities">
            <summary>
            Provides some utility routines for the wizard framework.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardUtilities.HasPages``1(TwoLayeredGUI.Wizard.IRunnableWizard{``0})">
            <summary>
            Checks whether a given wizard contains any pages.
            </summary>
            <param name="wizard">The wizard to check.</param>
            <returns>A value that indicates whether either <paramref name="wizard"/> itself or any of its sub-wizards contain any pages.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="wizard"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardUtilities.LaunchWizard``2(TwoLayeredGUI.Wizard.IWizardDisplay{``0,``1},TwoLayeredGUI.Wizard.IRunnableWizard{``0},``0)">
            <summary>
            Displays a wizard whose pages can create their own GUI representation.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
            <param name="display">The display component to present the wizard.</param>
            <param name="wizard">The wizard or <see langword="null"/> if nothing should be displayed.</param>
            <param name="settings">The settings object edited in the wizard.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="display"/> is <see langword="null"/>, <paramref name="wizard"/> is not <see langword="null"/> while <paramref name="settings"/> is.</exception>
            <remarks>
            <para>This method causes the first page of <paramref name="wizard"/> to be displayed in the control.
              Users can then navigate through the wizard.</para>
            <para>If <paramref name="wizard"/> equals <see langword="null"/>, the effect of the method will match that of <see cref="M:TwoLayeredGUI.Wizard.IWizardDisplay`2.ClearWizard"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardUtilities.AddTextPage``1(System.Collections.Generic.ICollection{TwoLayeredGUI.Wizard.WizardPage{``0}},System.String,System.String)">
            <summary>
            Adds a text page to a collection of wizard pages.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <param name="pages">The page collection to add the page to.</param>
            <param name="title">The headline of the page.</param>
            <param name="text">The text displayed on the page.</param>
            <returns>The newly created wizard page.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pages"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method adds a new <see cref="T:TwoLayeredGUI.Wizard.TextPage`1"/> instance to the end of <paramref name="pages"/>.
              As text pages do not change or output any information found in the settings object, explicitely specifying the generic <typeparamref name="TSettings"/> parameter is only required for type-safety reasons.
              To simplify the syntax for adding text pages, this method (which can be used as an extension method in some languages) may be invoked instead, so the generic parameter will be inferred from the type of the <paramref name="pages"/> argument.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardUtilities.AddTextPage``1(System.Collections.Generic.ICollection{TwoLayeredGUI.Wizard.WizardPage{``0}},System.String,System.String,System.Boolean)">
            <summary>
            Adds a text page to a collection of wizard pages that can be used as the final page.
            </summary>
            <typeparam name="TSettings">The type that stores the settings to edit in the wizard.</typeparam>
            <param name="pages">The page collection to add the page to.</param>
            <param name="title">The headline of the page.</param>
            <param name="text">The text displayed on the page.</param>
            <param name="allowFinish">Indicates whether the user may finish the wizard at this page.</param>
            <returns>The newly created wizard page.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pages"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method adds a new <see cref="T:TwoLayeredGUI.Wizard.TextPage`1"/> instance to the end of <paramref name="pages"/>.
              As text pages do not change or output any information found in the settings object, explicitely specifying the generic <typeparamref name="TSettings"/> parameter is only required for type-safety reasons.
              To simplify the syntax for adding text pages, this method (which can be used as an extension method in some languages) may be invoked instead, so the generic parameter will be inferred from the type of the <paramref name="pages"/> argument.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardUtilities.GetPageSettingsType(System.Type)">
            <summary>
            Retrieves the settings type of a wizard page type.
            </summary>
            <param name="pageType">The wizard page type.</param>
            <returns>The settings type of the supplied page type or <see langword="null"/> if the settings type is an unassigned generic parameter.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pageType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pageType"/> is not derived from <see cref="T:TwoLayeredGUI.Wizard.WizardPage`1"/>.</exception>
            <remarks>
            <para>This method checks whether <paramref name="pageType"/> is derived from <see cref="T:TwoLayeredGUI.Wizard.WizardPage`1"/>.
              If so, it tries to retrieve the type supplied as the generic argument that indicates the type of the settings object to edit in the wizard.
              If there is an actual type supplied, this type will be returned.
              Otherwise, the returned value is <see langword="null"/>.</para>
            </remarks>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardUtilities.GetPageGuiFactorySettingsTypes``1(System.Type)">
            <summary>
            Retrieves the settings type of a wizard page GUI factory type.
            </summary>
            <typeparam name="TGui">The type that represents a basic unit in the user interface being used.</typeparam>
            <param name="factoryType">The wizard page GUI factory type.</param>
            <returns>The settings types of the supplied factory type or <see langword="null"/> if the settings type is an unassigned generic parameter.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="factoryType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="factoryType"/> does not implement <see cref="T:TwoLayeredGUI.Wizard.IWizardGuiFactory`2"/>.</exception>
            <remarks>
            <para>This method checks whether <paramref name="factoryType"/> implements <see cref="T:TwoLayeredGUI.Wizard.IWizardGuiFactory`2"/> (with <typeparamref name="TGui"/> specified for the GUI base type).
              If so, it tries to retrieve the types supplied as the generic argument that indicates the type of the settings object to edit in the wizard.
              If the interface is implemented for one or more settings types, these types will be returned in the resulting array.
              Otherwise, the resulting array will be empty.</para>
            </remarks>
        </member>
        <member name="T:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1">
            <summary>
            This class stores information about the validation results of a wizard page.
            </summary>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.#ctor(TwoLayeredGUI.Wizard.IWizardController{`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="controller">A controller object that provides access to a wizard.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.isValid">
            <summary>
            Indicates whether the input on the page is valid.
            </summary>
            <seealso cref="P:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.IsValid"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.SetValid">
            <summary>
            Stores a successful validation result.
            </summary>
            <seealso cref="M:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.SetInvalid"/>
        </member>
        <member name="M:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.SetInvalid">
            <summary>
            Stores a validation result that indicated an error.
            </summary>
            <seealso cref="M:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.SetValid"/>
        </member>
        <member name="P:TwoLayeredGUI.Wizard.WizardValidationEventArgs`1.IsValid">
            <summary>
            Indicates whether the input on the page is valid.
            </summary>
            <value>
            <para>This property indicates whether the input values on the wizard page are considered valid by all invoked validator event handlers.</para>
            </value>
        </member>
    </members>
</doc>
